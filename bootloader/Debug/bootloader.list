
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800457c  0800457c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004584  08004584  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800458c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000007c  08004608  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004608  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f46  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f69  00000000  00000000  00029ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b2f  00000000  00000000  0002d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd94  00000000  00000000  00043be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086238  00000000  00000000  0004f97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5bb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ec  00000000  00000000  000d5c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004040 	.word	0x08004040

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004040 	.word	0x08004040

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <BL_UART_Fetch_Host_Command>:
    CBL_CHANGE_ROP_Level_CMD
};

/* -----------------  Software Interfaces Definitions -----------------*/

BL_Status BL_UART_Fetch_Host_Command(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	717b      	strb	r3, [r7, #5]

	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 8000596:	22c8      	movs	r2, #200	; 0xc8
 8000598:	2100      	movs	r1, #0
 800059a:	4857      	ldr	r0, [pc, #348]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 800059c:	f003 f8da 	bl	8003754 <memset>
	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	2201      	movs	r2, #1
 80005a6:	4954      	ldr	r1, [pc, #336]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 80005a8:	4854      	ldr	r0, [pc, #336]	; (80006fc <BL_UART_Fetch_Host_Command+0x178>)
 80005aa:	f002 fd24 	bl	8002ff6 <HAL_UART_Receive>
 80005ae:	4603      	mov	r3, r0
 80005b0:	71bb      	strb	r3, [r7, #6]
	if(HAL_Status != HAL_OK){
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <BL_UART_Fetch_Host_Command+0x3a>
		Status = BL_NACK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	e096      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
	}
	else{
		Data_Length = BL_Host_Buffer[0];
 80005be:	4b4e      	ldr	r3, [pc, #312]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	717b      	strb	r3, [r7, #5]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length, HAL_MAX_DELAY);
 80005c4:	797b      	ldrb	r3, [r7, #5]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	494c      	ldr	r1, [pc, #304]	; (8000700 <BL_UART_Fetch_Host_Command+0x17c>)
 80005ce:	484b      	ldr	r0, [pc, #300]	; (80006fc <BL_UART_Fetch_Host_Command+0x178>)
 80005d0:	f002 fd11 	bl	8002ff6 <HAL_UART_Receive>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71bb      	strb	r3, [r7, #6]
		if(HAL_Status != HAL_OK){
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <BL_UART_Fetch_Host_Command+0x60>
			Status = BL_NACK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	e083      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
		}
		else{
			switch(BL_Host_Buffer[1]){
 80005e4:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 80005e6:	785b      	ldrb	r3, [r3, #1]
 80005e8:	3b10      	subs	r3, #16
 80005ea:	2b11      	cmp	r3, #17
 80005ec:	d87a      	bhi.n	80006e4 <BL_UART_Fetch_Host_Command+0x160>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <BL_UART_Fetch_Host_Command+0x70>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	0800063d 	.word	0x0800063d
 80005f8:	08000649 	.word	0x08000649
 80005fc:	08000655 	.word	0x08000655
 8000600:	08000661 	.word	0x08000661
 8000604:	0800066d 	.word	0x0800066d
 8000608:	08000679 	.word	0x08000679
 800060c:	08000685 	.word	0x08000685
 8000610:	08000691 	.word	0x08000691
 8000614:	080006a3 	.word	0x080006a3
 8000618:	080006b5 	.word	0x080006b5
 800061c:	080006e5 	.word	0x080006e5
 8000620:	080006e5 	.word	0x080006e5
 8000624:	080006e5 	.word	0x080006e5
 8000628:	080006e5 	.word	0x080006e5
 800062c:	080006e5 	.word	0x080006e5
 8000630:	080006e5 	.word	0x080006e5
 8000634:	080006c7 	.word	0x080006c7
 8000638:	080006d9 	.word	0x080006d9
				case CBL_GET_VER_CMD:
					Bootloader_Get_Version(BL_Host_Buffer);
 800063c:	482e      	ldr	r0, [pc, #184]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 800063e:	f000 f90f 	bl	8000860 <Bootloader_Get_Version>
					Status = BL_OK;
 8000642:	2301      	movs	r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
					break;
 8000646:	e051      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_GET_HELP_CMD:
					Bootloader_Get_Help(BL_Host_Buffer);
 8000648:	482b      	ldr	r0, [pc, #172]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 800064a:	f000 f953 	bl	80008f4 <Bootloader_Get_Help>
					Status = BL_OK;
 800064e:	2301      	movs	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
					break;
 8000652:	e04b      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000654:	4828      	ldr	r0, [pc, #160]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 8000656:	f000 f989 	bl	800096c <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
					break;
 800065e:	e045      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000660:	4825      	ldr	r0, [pc, #148]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 8000662:	f000 fa65 	bl	8000b30 <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 8000666:	2301      	movs	r3, #1
 8000668:	71fb      	strb	r3, [r7, #7]
					break;
 800066a:	e03f      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 800066c:	4822      	ldr	r0, [pc, #136]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 800066e:	f000 f9ed 	bl	8000a4c <Bootloader_Jump_To_Address>
					Status = BL_OK;
 8000672:	2301      	movs	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
					break;
 8000676:	e039      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_FLASH_ERASE_CMD:
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000678:	481f      	ldr	r0, [pc, #124]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 800067a:	f000 fb0d 	bl	8000c98 <Bootloader_Erase_Flash>
					Status = BL_OK;
 800067e:	2301      	movs	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
					break;
 8000682:	e033      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_MEM_WRITE_CMD:
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 8000686:	f000 fbbb 	bl	8000e00 <Bootloader_Memory_Write>
					Status = BL_OK;
 800068a:	2301      	movs	r3, #1
 800068c:	71fb      	strb	r3, [r7, #7]
					break;
 800068e:	e02d      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_ED_W_PROTECT_CMD:
					BL_Print_Message("Enable or Disable write protect on different sectors of the user flash \r\n");
 8000690:	481c      	ldr	r0, [pc, #112]	; (8000704 <BL_UART_Fetch_Host_Command+0x180>)
 8000692:	f000 f841 	bl	8000718 <BL_Print_Message>
					Bootloader_Enable_RW_Protection(BL_Host_Buffer);
 8000696:	4818      	ldr	r0, [pc, #96]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 8000698:	f000 fc32 	bl	8000f00 <Bootloader_Enable_RW_Protection>
					Status = BL_OK;
 800069c:	2301      	movs	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
					break;
 80006a0:	e024      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_MEM_READ_CMD:
					BL_Print_Message("Read data from different memories of the microcontroller \r\n");
 80006a2:	4819      	ldr	r0, [pc, #100]	; (8000708 <BL_UART_Fetch_Host_Command+0x184>)
 80006a4:	f000 f838 	bl	8000718 <BL_Print_Message>
					Bootloader_Memory_Read(BL_Host_Buffer);
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 80006aa:	f000 fc33 	bl	8000f14 <Bootloader_Memory_Read>
					Status = BL_OK;
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
					break;
 80006b2:	e01b      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_READ_SECTOR_STATUS_CMD:
					BL_Print_Message("Read all the sector protection status \r\n");
 80006b4:	4815      	ldr	r0, [pc, #84]	; (800070c <BL_UART_Fetch_Host_Command+0x188>)
 80006b6:	f000 f82f 	bl	8000718 <BL_Print_Message>
					Bootloader_Get_Sector_Protection_Status(BL_Host_Buffer);
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 80006bc:	f000 fc34 	bl	8000f28 <Bootloader_Get_Sector_Protection_Status>
					Status = BL_OK;
 80006c0:	2301      	movs	r3, #1
 80006c2:	71fb      	strb	r3, [r7, #7]
					break;
 80006c4:	e012      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_OTP_READ_CMD:
					BL_Print_Message("Read the OTP contents \r\n");
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <BL_UART_Fetch_Host_Command+0x18c>)
 80006c8:	f000 f826 	bl	8000718 <BL_Print_Message>
					Bootloader_Read_OTP(BL_Host_Buffer);
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 80006ce:	f000 fc35 	bl	8000f3c <Bootloader_Read_OTP>
					Status = BL_OK;
 80006d2:	2301      	movs	r3, #1
 80006d4:	71fb      	strb	r3, [r7, #7]
					break;
 80006d6:	e009      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				case CBL_CHANGE_ROP_Level_CMD:
					Bootloader_Change_Read_Protection_Level(BL_Host_Buffer);
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <BL_UART_Fetch_Host_Command+0x174>)
 80006da:	f000 fca9 	bl	8001030 <Bootloader_Change_Read_Protection_Level>
					Status = BL_OK;
 80006de:	2301      	movs	r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]
					break;
 80006e2:	e003      	b.n	80006ec <BL_UART_Fetch_Host_Command+0x168>
				default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <BL_UART_Fetch_Host_Command+0x190>)
 80006e6:	f000 f817 	bl	8000718 <BL_Print_Message>
					break;
 80006ea:	bf00      	nop
			}
		}
	}

	return Status;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000098 	.word	0x20000098
 80006fc:	2000016c 	.word	0x2000016c
 8000700:	20000099 	.word	0x20000099
 8000704:	08004058 	.word	0x08004058
 8000708:	080040a4 	.word	0x080040a4
 800070c:	080040e0 	.word	0x080040e0
 8000710:	0800410c 	.word	0x0800410c
 8000714:	08004128 	.word	0x08004128

08000718 <BL_Print_Message>:

void BL_Print_Message(char *format, ...){
 8000718:	b40f      	push	{r0, r1, r2, r3}
 800071a:	b580      	push	{r7, lr}
 800071c:	b09a      	sub	sp, #104	; 0x68
 800071e:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2260      	movs	r2, #96	; 0x60
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f003 f811 	bl	8003754 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 8000732:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000736:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f826 	bl	8003790 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 8000744:	1d39      	adds	r1, r7, #4
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	2264      	movs	r2, #100	; 0x64
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <BL_Print_Message+0x48>)
 800074e:	f002 fbc0 	bl	8002ed2 <HAL_UART_Transmit>
#elif (BL_DEBUG_METHOD == BL_ENABLE_CAN_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined CAN */
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 8000752:	bf00      	nop
 8000754:	3768      	adds	r7, #104	; 0x68
 8000756:	46bd      	mov	sp, r7
 8000758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr
 8000760:	200001b0 	.word	0x200001b0

08000764 <Bootloader_CRC_Verify>:

	/* Jump to Application Reset Handler */
	ResetHandler_Address();
}

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC){
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000770:	2300      	movs	r3, #0
 8000772:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000780:	2300      	movs	r3, #0
 8000782:	75fb      	strb	r3, [r7, #23]
 8000784:	e00f      	b.n	80007a6 <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2201      	movs	r2, #1
 8000796:	4619      	mov	r1, r3
 8000798:	4810      	ldr	r0, [pc, #64]	; (80007dc <Bootloader_CRC_Verify+0x78>)
 800079a:	f001 f896 	bl	80018ca <HAL_CRC_Accumulate>
 800079e:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	3301      	adds	r3, #1
 80007a4:	75fb      	strb	r3, [r7, #23]
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d8eb      	bhi.n	8000786 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
  __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <Bootloader_CRC_Verify+0x78>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <Bootloader_CRC_Verify+0x78>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f042 0201 	orr.w	r2, r2, #1
 80007bc:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 80007be:	69ba      	ldr	r2, [r7, #24]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d102      	bne.n	80007cc <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 80007c6:	2301      	movs	r3, #1
 80007c8:	77fb      	strb	r3, [r7, #31]
 80007ca:	e001      	b.n	80007d0 <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 80007cc:	2300      	movs	r3, #0
 80007ce:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 80007d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000160 	.word	0x20000160

080007e0 <Bootloader_Send_ACK>:

static void Bootloader_Send_ACK(uint8_t Replay_Len){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 80007ea:	2300      	movs	r3, #0
 80007ec:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 80007ee:	23cd      	movs	r3, #205	; 0xcd
 80007f0:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Replay_Len;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Ack_Value, 2, HAL_MAX_DELAY);
 80007f6:	f107 010c 	add.w	r1, r7, #12
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	2202      	movs	r2, #2
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <Bootloader_Send_ACK+0x30>)
 8000802:	f002 fb66 	bl	8002ed2 <HAL_UART_Transmit>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000016c 	.word	0x2000016c

08000814 <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 800081a:	23ab      	movs	r3, #171	; 0xab
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <Bootloader_Send_NACK+0x20>)
 8000828:	f002 fb53 	bl	8002ed2 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000016c 	.word	0x2000016c

08000838 <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <Bootloader_Send_Data_To_Host+0x24>)
 800084e:	f002 fb40 	bl	8002ed2 <HAL_UART_Transmit>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000016c 	.word	0x2000016c

08000860 <Bootloader_Get_Version>:

static void Bootloader_Get_Version(uint8_t *Host_Buffer){
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION };
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <Bootloader_Get_Version+0x80>)
 800086a:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the bootloader version from the MCU \r\n");
 8000874:	481b      	ldr	r0, [pc, #108]	; (80008e4 <Bootloader_Get_Version+0x84>)
 8000876:	f7ff ff4f 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b29b      	uxth	r3, r3
 8000880:	3301      	adds	r3, #1
 8000882:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000884:	8afb      	ldrh	r3, [r7, #22]
 8000886:	3b04      	subs	r3, #4
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000890:	8afb      	ldrh	r3, [r7, #22]
 8000892:	3b04      	subs	r3, #4
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4619      	mov	r1, r3
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff63 	bl	8000764 <Bootloader_CRC_Verify>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d114      	bne.n	80008ce <Bootloader_Get_Version+0x6e>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <Bootloader_Get_Version+0x88>)
 80008a6:	f7ff ff37 	bl	8000718 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(4);
 80008aa:	2004      	movs	r0, #4
 80008ac:	f7ff ff98 	bl	80007e0 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)(&BL_Version[0]), 4);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2104      	movs	r1, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffbe 	bl	8000838 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
    BL_Print_Message("Bootloader Ver. %d.%d.%d \r\n", BL_Version[1], BL_Version[2], BL_Version[3]);
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	4619      	mov	r1, r3
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	461a      	mov	r2, r3
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <Bootloader_Get_Version+0x8c>)
 80008c8:	f7ff ff26 	bl	8000718 <BL_Print_Message>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 80008cc:	e004      	b.n	80008d8 <Bootloader_Get_Version+0x78>
	BL_Print_Message("CRC Verification Failed \r\n");
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <Bootloader_Get_Version+0x90>)
 80008d0:	f7ff ff22 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 80008d4:	f7ff ff9e 	bl	8000814 <Bootloader_Send_NACK>
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	00010164 	.word	0x00010164
 80008e4:	08004158 	.word	0x08004158
 80008e8:	08004184 	.word	0x08004184
 80008ec:	080041a0 	.word	0x080041a0
 80008f0:	080041bc 	.word	0x080041bc

080008f4 <Bootloader_Get_Help>:

static void Bootloader_Get_Help(uint8_t *Host_Buffer){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	81fb      	strh	r3, [r7, #14]
  uint32_t Host_CRC32 = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the commands supported by the bootloader \r\n");
 8000904:	4815      	ldr	r0, [pc, #84]	; (800095c <Bootloader_Get_Help+0x68>)
 8000906:	f7ff ff07 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b29b      	uxth	r3, r3
 8000910:	3301      	adds	r3, #1
 8000912:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	3b04      	subs	r3, #4
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	60bb      	str	r3, [r7, #8]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	3b04      	subs	r3, #4
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff1b 	bl	8000764 <Bootloader_CRC_Verify>
 800092e:	4603      	mov	r3, r0
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10a      	bne.n	800094a <Bootloader_Get_Help+0x56>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000934:	480a      	ldr	r0, [pc, #40]	; (8000960 <Bootloader_Get_Help+0x6c>)
 8000936:	f7ff feef 	bl	8000718 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(12);
 800093a:	200c      	movs	r0, #12
 800093c:	f7ff ff50 	bl	80007e0 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)(&Bootloader_Supported_CMDs[0]), 12);
 8000940:	210c      	movs	r1, #12
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <Bootloader_Get_Help+0x70>)
 8000944:	f7ff ff78 	bl	8000838 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000948:	e004      	b.n	8000954 <Bootloader_Get_Help+0x60>
		BL_Print_Message("CRC Verification Failed \r\n");
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <Bootloader_Get_Help+0x74>)
 800094c:	f7ff fee4 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000950:	f7ff ff60 	bl	8000814 <Bootloader_Send_NACK>
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	080041d8 	.word	0x080041d8
 8000960:	08004184 	.word	0x08004184
 8000964:	20000000 	.word	0x20000000
 8000968:	080041bc 	.word	0x080041bc

0800096c <Bootloader_Get_Chip_Identification_Number>:

static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer){
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the MCU chip identification number \r\n");
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <Bootloader_Get_Chip_Identification_Number+0x80>)
 8000982:	f7ff fec9 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	3301      	adds	r3, #1
 800098e:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000990:	8afb      	ldrh	r3, [r7, #22]
 8000992:	3b04      	subs	r3, #4
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 800099c:	8afb      	ldrh	r3, [r7, #22]
 800099e:	3b04      	subs	r3, #4
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4619      	mov	r1, r3
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fedd 	bl	8000764 <Bootloader_CRC_Verify>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d113      	bne.n	80009d8 <Bootloader_Get_Chip_Identification_Number+0x6c>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <Bootloader_Get_Chip_Identification_Number+0x84>)
 80009b2:	f7ff feb1 	bl	8000718 <BL_Print_Message>
#endif
		/* Get the MCU chip identification number */
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <Bootloader_Get_Chip_Identification_Number+0x88>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		Bootloader_Send_ACK(2);
 80009c4:	2002      	movs	r0, #2
 80009c6:	f7ff ff0b 	bl	80007e0 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 80009ca:	f107 030e 	add.w	r3, r7, #14
 80009ce:	2102      	movs	r1, #2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff31 	bl	8000838 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 80009d6:	e004      	b.n	80009e2 <Bootloader_Get_Chip_Identification_Number+0x76>
		BL_Print_Message("CRC Verification Failed \r\n");
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <Bootloader_Get_Chip_Identification_Number+0x8c>)
 80009da:	f7ff fe9d 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 80009de:	f7ff ff19 	bl	8000814 <Bootloader_Send_NACK>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800420c 	.word	0x0800420c
 80009f0:	08004184 	.word	0x08004184
 80009f4:	e0042000 	.word	0xe0042000
 80009f8:	080041bc 	.word	0x080041bc

080009fc <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F407_SRAM1_END)){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a0e:	d306      	bcc.n	8000a1e <Host_Address_Verification+0x22>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <Host_Address_Verification+0x4c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d802      	bhi.n	8000a1e <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e00c      	b.n	8000a38 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F407_FLASH_END)){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a24:	d306      	bcc.n	8000a34 <Host_Address_Verification+0x38>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000a2c:	d802      	bhi.n	8000a34 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e001      	b.n	8000a38 <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2001c000 	.word	0x2001c000

08000a4c <Bootloader_Jump_To_Address>:

static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Jump bootloader to specified address \r\n");
 8000a64:	4826      	ldr	r0, [pc, #152]	; (8000b00 <Bootloader_Jump_To_Address+0xb4>)
 8000a66:	f7ff fe57 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	3301      	adds	r3, #1
 8000a72:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a74:	8bfb      	ldrh	r3, [r7, #30]
 8000a76:	3b04      	subs	r3, #4
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	61bb      	str	r3, [r7, #24]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000a80:	8bfb      	ldrh	r3, [r7, #30]
 8000a82:	3b04      	subs	r3, #4
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4619      	mov	r1, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fe6b 	bl	8000764 <Bootloader_CRC_Verify>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d12b      	bne.n	8000aec <Bootloader_Jump_To_Address+0xa0>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000a94:	481b      	ldr	r0, [pc, #108]	; (8000b04 <Bootloader_Jump_To_Address+0xb8>)
 8000a96:	f7ff fe3f 	bl	8000718 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fea0 	bl	80007e0 <Bootloader_Send_ACK>
		/* Extract the address form the HOST packet */
		HOST_Jump_Address = *((uint32_t *)&Host_Buffer[2]);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000aa6:	617b      	str	r3, [r7, #20]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);
 8000aa8:	6978      	ldr	r0, [r7, #20]
 8000aaa:	f7ff ffa7 	bl	80009fc <Host_Address_Verification>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d112      	bne.n	8000ade <Bootloader_Jump_To_Address+0x92>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Address verification succeeded \r\n");
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <Bootloader_Jump_To_Address+0xbc>)
 8000aba:	f7ff fe2d 	bl	8000718 <BL_Print_Message>
#endif
			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000abe:	f107 030f 	add.w	r3, r7, #15
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff feb7 	bl	8000838 <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump */
			Jump_Ptr Jump_Address = (Jump_Ptr)(HOST_Jump_Address + 1);
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Jump to : 0x%X \r\n", Jump_Address);
 8000ad0:	6939      	ldr	r1, [r7, #16]
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <Bootloader_Jump_To_Address+0xc0>)
 8000ad4:	f7ff fe20 	bl	8000718 <BL_Print_Message>
#endif
			Jump_Address();
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4798      	blx	r3
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000adc:	e00b      	b.n	8000af6 <Bootloader_Jump_To_Address+0xaa>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000ade:	f107 030f 	add.w	r3, r7, #15
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fea7 	bl	8000838 <Bootloader_Send_Data_To_Host>
}
 8000aea:	e004      	b.n	8000af6 <Bootloader_Jump_To_Address+0xaa>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <Bootloader_Jump_To_Address+0xc4>)
 8000aee:	f7ff fe13 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000af2:	f7ff fe8f 	bl	8000814 <Bootloader_Send_NACK>
}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08004238 	.word	0x08004238
 8000b04:	08004184 	.word	0x08004184
 8000b08:	08004260 	.word	0x08004260
 8000b0c:	08004284 	.word	0x08004284
 8000b10:	080041bc 	.word	0x080041bc

08000b14 <CBL_STM32F407_Get_RDP_Level>:

static uint8_t CBL_STM32F407_Get_RDP_Level(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 f9e3 	bl	8001ee8 <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	b2db      	uxtb	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the FLASH Read Protection Out level \r\n");
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <Bootloader_Read_Protection_Level+0x78>)
 8000b46:	f7ff fde7 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000b54:	8afb      	ldrh	r3, [r7, #22]
 8000b56:	3b04      	subs	r3, #4
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000b60:	8afb      	ldrh	r3, [r7, #22]
 8000b62:	3b04      	subs	r3, #4
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4619      	mov	r1, r3
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fdfb 	bl	8000764 <Bootloader_CRC_Verify>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d110      	bne.n	8000b96 <Bootloader_Read_Protection_Level+0x66>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <Bootloader_Read_Protection_Level+0x7c>)
 8000b76:	f7ff fdcf 	bl	8000718 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fe30 	bl	80007e0 <Bootloader_Send_ACK>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F407_Get_RDP_Level();
 8000b80:	f7ff ffc8 	bl	8000b14 <CBL_STM32F407_Get_RDP_Level>
 8000b84:	4603      	mov	r3, r0
 8000b86:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 8000b88:	f107 030f 	add.w	r3, r7, #15
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe52 	bl	8000838 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000b94:	e004      	b.n	8000ba0 <Bootloader_Read_Protection_Level+0x70>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <Bootloader_Read_Protection_Level+0x80>)
 8000b98:	f7ff fdbe 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000b9c:	f7ff fe3a 	bl	8000814 <Bootloader_Send_NACK>
}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08004298 	.word	0x08004298
 8000bac:	08004184 	.word	0x08004184
 8000bb0:	080041bc 	.word	0x080041bc

08000bb4 <Perform_Flash_Erase>:

static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t SectorError = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	2b0c      	cmp	r3, #12
 8000bde:	d903      	bls.n	8000be8 <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000be6:	e04c      	b.n	8000c82 <Perform_Flash_Erase+0xce>
	}
	else{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr)){
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b0b      	cmp	r3, #11
 8000bec:	d902      	bls.n	8000bf4 <Perform_Flash_Erase+0x40>
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2bff      	cmp	r3, #255	; 0xff
 8000bf2:	d143      	bne.n	8000c7c <Perform_Flash_Erase+0xc8>
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2bff      	cmp	r3, #255	; 0xff
 8000bf8:	d105      	bne.n	8000c06 <Perform_Flash_Erase+0x52>
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Flash Mass erase activation \r\n");
 8000bfe:	4824      	ldr	r0, [pc, #144]	; (8000c90 <Perform_Flash_Erase+0xdc>)
 8000c00:	f7ff fd8a 	bl	8000718 <BL_Print_Message>
 8000c04:	e015      	b.n	8000c32 <Perform_Flash_Erase+0x7e>
#endif
			}
			else{
				/* User needs Sector erase */
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("User needs Sector erase \r\n");
 8000c06:	4823      	ldr	r0, [pc, #140]	; (8000c94 <Perform_Flash_Erase+0xe0>)
 8000c08:	f7ff fd86 	bl	8000718 <BL_Print_Message>
#endif
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f1c3 030c 	rsb	r3, r3, #12
 8000c12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(Number_Of_Sectors > Remaining_Sectors){
 8000c16:	79ba      	ldrb	r2, [r7, #6]
 8000c18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d902      	bls.n	8000c26 <Perform_Flash_Erase+0x72>
					Number_Of_Sectors = Remaining_Sectors;
 8000c20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c24:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 8000c36:	2302      	movs	r3, #2
 8000c38:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
      HAL_Status = HAL_FLASH_Unlock();
 8000c3a:	f000 fec5 	bl	80019c8 <HAL_FLASH_Unlock>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000c44:	f107 020c 	add.w	r2, r7, #12
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f86c 	bl	8001d2c <HAL_FLASHEx_Erase>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d103      	bne.n	8000c6a <Perform_Flash_Erase+0xb6>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000c62:	2303      	movs	r3, #3
 8000c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c68:	e002      	b.n	8000c70 <Perform_Flash_Erase+0xbc>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Locks the FLASH control register access */
      HAL_Status = HAL_FLASH_Lock();
 8000c70:	f000 fecc 	bl	8001a0c <HAL_FLASH_Lock>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000c7a:	e002      	b.n	8000c82 <Perform_Flash_Erase+0xce>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Sector_Validity_Status;
 8000c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	080042c4 	.word	0x080042c4
 8000c94:	080042e4 	.word	0x080042e4

08000c98 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Mass erase or sector erase of the user flash \r\n");
 8000cac:	4824      	ldr	r0, [pc, #144]	; (8000d40 <Bootloader_Erase_Flash+0xa8>)
 8000cae:	f7ff fd33 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3301      	adds	r3, #1
 8000cba:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000cbc:	8afb      	ldrh	r3, [r7, #22]
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000cc8:	8afb      	ldrh	r3, [r7, #22]
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fd47 	bl	8000764 <Bootloader_CRC_Verify>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d128      	bne.n	8000d2e <Bootloader_Erase_Flash+0x96>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000cdc:	4819      	ldr	r0, [pc, #100]	; (8000d44 <Bootloader_Erase_Flash+0xac>)
 8000cde:	f7ff fd1b 	bl	8000718 <BL_Print_Message>
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fd7c 	bl	80007e0 <Bootloader_Send_ACK>
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3302      	adds	r3, #2
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3303      	adds	r3, #3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f7ff ff5c 	bl	8000bb4 <Perform_Flash_Erase>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d109      	bne.n	8000d1a <Bootloader_Erase_Flash+0x82>
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fd93 	bl	8000838 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Successful Erase \r\n");
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <Bootloader_Erase_Flash+0xb0>)
 8000d14:	f7ff fd00 	bl	8000718 <BL_Print_Message>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000d18:	e00e      	b.n	8000d38 <Bootloader_Erase_Flash+0xa0>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000d1a:	f107 030f 	add.w	r3, r7, #15
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fd89 	bl	8000838 <Bootloader_Send_Data_To_Host>
			BL_Print_Message("Erase request failed !!\r\n");
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <Bootloader_Erase_Flash+0xb4>)
 8000d28:	f7ff fcf6 	bl	8000718 <BL_Print_Message>
}
 8000d2c:	e004      	b.n	8000d38 <Bootloader_Erase_Flash+0xa0>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <Bootloader_Erase_Flash+0xb8>)
 8000d30:	f7ff fcf2 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000d34:	f7ff fd6e 	bl	8000814 <Bootloader_Send_NACK>
}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	08004300 	.word	0x08004300
 8000d44:	08004184 	.word	0x08004184
 8000d48:	08004330 	.word	0x08004330
 8000d4c:	08004344 	.word	0x08004344
 8000d50:	080041bc 	.word	0x080041bc

08000d54 <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d66:	2300      	movs	r3, #0
 8000d68:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000d6e:	f000 fe2b 	bl	80019c8 <HAL_FLASH_Unlock>
 8000d72:	4603      	mov	r3, r0
 8000d74:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	75bb      	strb	r3, [r7, #22]
 8000d80:	e023      	b.n	8000dca <Flash_Memory_Write_Payload+0x76>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000d82:	2300      	movs	r3, #0
 8000d84:	82bb      	strh	r3, [r7, #20]
 8000d86:	e01c      	b.n	8000dc2 <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 8000d88:	8aba      	ldrh	r2, [r7, #20]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	18d1      	adds	r1, r2, r3
 8000d8e:	8abb      	ldrh	r3, [r7, #20]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	4615      	mov	r5, r2
 8000d9e:	4622      	mov	r2, r4
 8000da0:	462b      	mov	r3, r5
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 fdbc 	bl	8001920 <HAL_FLASH_Program>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75bb      	strb	r3, [r7, #22]
				break;
 8000db6:	e008      	b.n	8000dca <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000db8:	2301      	movs	r3, #1
 8000dba:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000dbc:	8abb      	ldrh	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	82bb      	strh	r3, [r7, #20]
 8000dc2:	8aba      	ldrh	r2, [r7, #20]
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3de      	bcc.n	8000d88 <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000dca:	7dbb      	ldrb	r3, [r7, #22]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d10f      	bne.n	8000df0 <Flash_Memory_Write_Payload+0x9c>
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <Flash_Memory_Write_Payload+0x9c>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000dd6:	f000 fe19 	bl	8001a0c <HAL_FLASH_Lock>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000de4:	2300      	movs	r3, #0
 8000de6:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000de8:	e004      	b.n	8000df4 <Flash_Memory_Write_Payload+0xa0>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000dee:	e001      	b.n	8000df4 <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000df0:	2300      	movs	r3, #0
 8000df2:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e00 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	727b      	strb	r3, [r7, #9]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
 8000e20:	4831      	ldr	r0, [pc, #196]	; (8000ee8 <Bootloader_Memory_Write+0xe8>)
 8000e22:	f7ff fc79 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000e30:	8afb      	ldrh	r3, [r7, #22]
 8000e32:	3b04      	subs	r3, #4
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000e3c:	8afb      	ldrh	r3, [r7, #22]
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4619      	mov	r1, r3
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fc8d 	bl	8000764 <Bootloader_CRC_Verify>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d142      	bne.n	8000ed6 <Bootloader_Memory_Write+0xd6>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000e50:	4826      	ldr	r0, [pc, #152]	; (8000eec <Bootloader_Memory_Write+0xec>)
 8000e52:	f7ff fc61 	bl	8000718 <BL_Print_Message>
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff fcc2 	bl	80007e0 <Bootloader_Send_ACK>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e62:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("HOST_Address = 0x%X \r\n", HOST_Address);
 8000e64:	68f9      	ldr	r1, [r7, #12]
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <Bootloader_Memory_Write+0xf0>)
 8000e68:	f7ff fc56 	bl	8000718 <BL_Print_Message>
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	799b      	ldrb	r3, [r3, #6]
 8000e70:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff fdc2 	bl	80009fc <Host_Address_Verification>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000e7c:	7abb      	ldrb	r3, [r7, #10]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d120      	bne.n	8000ec4 <Bootloader_Memory_Write+0xc4>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3307      	adds	r3, #7
 8000e86:	7afa      	ldrb	r2, [r7, #11]
 8000e88:	b292      	uxth	r2, r2
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff61 	bl	8000d54 <Flash_Memory_Write_Payload>
 8000e92:	4603      	mov	r3, r0
 8000e94:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000e96:	7a7b      	ldrb	r3, [r7, #9]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d109      	bne.n	8000eb0 <Bootloader_Memory_Write+0xb0>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000e9c:	f107 0309 	add.w	r3, r7, #9
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fcc8 	bl	8000838 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Payload Valid \r\n");
 8000ea8:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <Bootloader_Memory_Write+0xf4>)
 8000eaa:	f7ff fc35 	bl	8000718 <BL_Print_Message>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000eae:	e017      	b.n	8000ee0 <Bootloader_Memory_Write+0xe0>
				BL_Print_Message("Payload InValid \r\n");
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <Bootloader_Memory_Write+0xf8>)
 8000eb2:	f7ff fc31 	bl	8000718 <BL_Print_Message>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000eb6:	f107 0309 	add.w	r3, r7, #9
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fcbb 	bl	8000838 <Bootloader_Send_Data_To_Host>
}
 8000ec2:	e00d      	b.n	8000ee0 <Bootloader_Memory_Write+0xe0>
			Address_Verification = ADDRESS_IS_INVALID;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000ec8:	f107 030a 	add.w	r3, r7, #10
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fcb2 	bl	8000838 <Bootloader_Send_Data_To_Host>
}
 8000ed4:	e004      	b.n	8000ee0 <Bootloader_Memory_Write+0xe0>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <Bootloader_Memory_Write+0xfc>)
 8000ed8:	f7ff fc1e 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000edc:	f7ff fc9a 	bl	8000814 <Bootloader_Send_NACK>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08004360 	.word	0x08004360
 8000eec:	08004184 	.word	0x08004184
 8000ef0:	08004394 	.word	0x08004394
 8000ef4:	080043ac 	.word	0x080043ac
 8000ef8:	080043c0 	.word	0x080043c0
 8000efc:	080041bc 	.word	0x080041bc

08000f00 <Bootloader_Enable_RW_Protection>:

static void Bootloader_Enable_RW_Protection(uint8_t *Host_Buffer){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <Bootloader_Memory_Read>:

static void Bootloader_Memory_Read(uint8_t *Host_Buffer){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <Bootloader_Get_Sector_Protection_Status>:

static void Bootloader_Get_Sector_Protection_Status(uint8_t *Host_Buffer){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <Bootloader_Read_OTP>:

static void Bootloader_Read_OTP(uint8_t *Host_Buffer){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <Change_ROP_Level>:

static uint8_t Change_ROP_Level(uint32_t ROP_Level){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	FLASH_OBProgramInitTypeDef FLASH_OBProgramInit;
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Unlock the FLASH Option Control Registers access */
	HAL_Status = HAL_FLASH_OB_Unlock();
 8000f64:	f000 fd62 	bl	8001a2c <HAL_FLASH_OB_Unlock>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(HAL_Status != HAL_OK){
 8000f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <Change_ROP_Level+0x34>
		ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Failed -> Unlock the FLASH Option Control Registers access \r\n");
 8000f7c:	4827      	ldr	r0, [pc, #156]	; (800101c <Change_ROP_Level+0xcc>)
 8000f7e:	f7ff fbcb 	bl	8000718 <BL_Print_Message>
 8000f82:	e044      	b.n	800100e <Change_ROP_Level+0xbe>
#endif
	}
	else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Passed -> Unlock the FLASH Option Control Registers access \r\n");
 8000f84:	4826      	ldr	r0, [pc, #152]	; (8001020 <Change_ROP_Level+0xd0>)
 8000f86:	f7ff fbc7 	bl	8000718 <BL_Print_Message>
#endif
		FLASH_OBProgramInit.OptionType = OPTIONBYTE_RDP; /* RDP option byte configuration */
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	60bb      	str	r3, [r7, #8]
		FLASH_OBProgramInit.Banks = FLASH_BANK_1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
		FLASH_OBProgramInit.RDPLevel = ROP_Level;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
		/* Program option bytes */
		HAL_Status = HAL_FLASHEx_OBProgram(&FLASH_OBProgramInit);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 ff36 	bl	8001e0c <HAL_FLASHEx_OBProgram>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(HAL_Status != HAL_OK){
 8000fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00b      	beq.n	8000fc6 <Change_ROP_Level+0x76>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Failed -> Program option bytes \r\n");
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <Change_ROP_Level+0xd4>)
 8000fb0:	f7ff fbb2 	bl	8000718 <BL_Print_Message>
#endif
			HAL_Status = HAL_FLASH_OB_Lock();
 8000fb4:	f000 fd56 	bl	8001a64 <HAL_FLASH_OB_Lock>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fc4:	e023      	b.n	800100e <Change_ROP_Level+0xbe>
		}
		else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Passed -> Program option bytes \r\n");
 8000fc6:	4818      	ldr	r0, [pc, #96]	; (8001028 <Change_ROP_Level+0xd8>)
 8000fc8:	f7ff fba6 	bl	8000718 <BL_Print_Message>
#endif
			/* Launch the option byte loading */
			HAL_Status = HAL_FLASH_OB_Launch();
 8000fcc:	f000 fd5a 	bl	8001a84 <HAL_FLASH_OB_Launch>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(HAL_Status != HAL_OK){
 8000fd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <Change_ROP_Level+0x96>
				ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fe4:	e013      	b.n	800100e <Change_ROP_Level+0xbe>
			}
			else{
				/* Lock the FLASH Option Control Registers access */
				HAL_Status = HAL_FLASH_OB_Lock();
 8000fe6:	f000 fd3d 	bl	8001a64 <HAL_FLASH_OB_Lock>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(HAL_Status != HAL_OK){
 8000ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <Change_ROP_Level+0xb0>
					ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ffe:	e006      	b.n	800100e <Change_ROP_Level+0xbe>
				}
				else{
					ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8001000:	2301      	movs	r3, #1
 8001002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("Passed -> Program ROP to Level : 0x%X \r\n", ROP_Level);
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <Change_ROP_Level+0xdc>)
 800100a:	f7ff fb85 	bl	8000718 <BL_Print_Message>
#endif
				}
			}
		}
	}
	return ROP_Level_Status;
 800100e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001012:	4618      	mov	r0, r3
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	080043d4 	.word	0x080043d4
 8001020:	08004414 	.word	0x08004414
 8001024:	08004454 	.word	0x08004454
 8001028:	08004478 	.word	0x08004478
 800102c:	0800449c 	.word	0x0800449c

08001030 <Bootloader_Change_Read_Protection_Level>:

static void Bootloader_Change_Read_Protection_Level(uint8_t *Host_Buffer){
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	82bb      	strh	r3, [r7, #20]
  uint32_t Host_CRC32 = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_ROP_Level = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Change read protection level of the user flash \r\n");
 8001048:	4825      	ldr	r0, [pc, #148]	; (80010e0 <Bootloader_Change_Read_Protection_Level+0xb0>)
 800104a:	f7ff fb65 	bl	8000718 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	3301      	adds	r3, #1
 8001056:	82bb      	strh	r3, [r7, #20]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8001058:	8abb      	ldrh	r3, [r7, #20]
 800105a:	3b04      	subs	r3, #4
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8001064:	8abb      	ldrh	r3, [r7, #20]
 8001066:	3b04      	subs	r3, #4
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fb79 	bl	8000764 <Bootloader_CRC_Verify>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d129      	bne.n	80010cc <Bootloader_Change_Read_Protection_Level+0x9c>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <Bootloader_Change_Read_Protection_Level+0xb4>)
 800107a:	f7ff fb4d 	bl	8000718 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fbae 	bl	80007e0 <Bootloader_Send_ACK>
		/* Request change the Read Out Protection Level */
		Host_ROP_Level = Host_Buffer[2];
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	789b      	ldrb	r3, [r3, #2]
 8001088:	75fb      	strb	r3, [r7, #23]
		/* Warning: When enabling read protection level 2, it s no more possible to go back to level 1 or 0 */
		if((CBL_ROP_LEVEL_2 == Host_ROP_Level) || (OB_RDP_LEVEL_2 == Host_ROP_Level)){
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d002      	beq.n	8001096 <Bootloader_Change_Read_Protection_Level+0x66>
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2bcc      	cmp	r3, #204	; 0xcc
 8001094:	d102      	bne.n	800109c <Bootloader_Change_Read_Protection_Level+0x6c>
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e010      	b.n	80010be <Bootloader_Change_Read_Protection_Level+0x8e>
		}
		else{
			if(CBL_ROP_LEVEL_0 == Host_ROP_Level){
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <Bootloader_Change_Read_Protection_Level+0x78>
				Host_ROP_Level = 0xAA;
 80010a2:	23aa      	movs	r3, #170	; 0xaa
 80010a4:	75fb      	strb	r3, [r7, #23]
 80010a6:	e004      	b.n	80010b2 <Bootloader_Change_Read_Protection_Level+0x82>
			}
			else if(CBL_ROP_LEVEL_1 == Host_ROP_Level){
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <Bootloader_Change_Read_Protection_Level+0x82>
				Host_ROP_Level = 0x55;
 80010ae:	2355      	movs	r3, #85	; 0x55
 80010b0:	75fb      	strb	r3, [r7, #23]
			}
			ROP_Level_Status = Change_ROP_Level(Host_ROP_Level);
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff4b 	bl	8000f50 <Change_ROP_Level>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]
		}
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 80010be:	f107 030f 	add.w	r3, r7, #15
 80010c2:	2101      	movs	r1, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fbb7 	bl	8000838 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 80010ca:	e004      	b.n	80010d6 <Bootloader_Change_Read_Protection_Level+0xa6>
		BL_Print_Message("CRC Verification Failed \r\n");
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <Bootloader_Change_Read_Protection_Level+0xb8>)
 80010ce:	f7ff fb23 	bl	8000718 <BL_Print_Message>
		Bootloader_Send_NACK();
 80010d2:	f7ff fb9f 	bl	8000814 <Bootloader_Send_NACK>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	080044c8 	.word	0x080044c8
 80010e4:	08004184 	.word	0x08004184
 80010e8:	080041bc 	.word	0x080041bc

080010ec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_CRC_Init+0x20>)
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <MX_CRC_Init+0x24>)
 80010f4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_CRC_Init+0x20>)
 80010f8:	f000 fbcb 	bl	8001892 <HAL_CRC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001102:	f000 f8d5 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000160 	.word	0x20000160
 8001110:	40023000 	.word	0x40023000

08001114 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <HAL_CRC_MspInit+0x3c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10d      	bne.n	8001142 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_CRC_MspInit+0x40>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <HAL_CRC_MspInit+0x40>)
 8001130:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <HAL_CRC_MspInit+0x40>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023000 	.word	0x40023000
 8001154:	40023800 	.word	0x40023800

08001158 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_GPIO_Init+0x30>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <MX_GPIO_Init+0x30>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_GPIO_Init+0x30>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 fa27 	bl	80015e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t number = 0 ;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  BL_Status COMD_STS ;
  char massege_1[] = "user bootloader started \r\n" ;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <main+0x5c>)
 800119c:	f107 0418 	add.w	r4, r7, #24
 80011a0:	461d      	mov	r5, r3
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011aa:	c403      	stmia	r4!, {r0, r1}
 80011ac:	8022      	strh	r2, [r4, #0]
 80011ae:	3402      	adds	r4, #2
 80011b0:	0c13      	lsrs	r3, r2, #16
 80011b2:	7023      	strb	r3, [r4, #0]
  char massege_2[] = "iam osama112 >> %d \r\n" ;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <main+0x60>)
 80011b6:	463c      	mov	r4, r7
 80011b8:	461d      	mov	r5, r3
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011c2:	6020      	str	r0, [r4, #0]
 80011c4:	3404      	adds	r4, #4
 80011c6:	8021      	strh	r1, [r4, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f812 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f7ff ffc4 	bl	8001158 <MX_GPIO_Init>
  MX_CRC_Init();
 80011d0:	f7ff ff8c 	bl	80010ec <MX_CRC_Init>
  MX_USART1_UART_Init();
 80011d4:	f000 f90c 	bl	80013f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011d8:	f000 f934 	bl	8001444 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  COMD_STS =  BL_UART_Fetch_Host_Command();
 80011dc:	f7ff f9d2 	bl	8000584 <BL_UART_Fetch_Host_Command>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80011e6:	e7f9      	b.n	80011dc <main+0x50>
 80011e8:	080044fc 	.word	0x080044fc
 80011ec:	08004518 	.word	0x08004518

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 faa8 	bl	8003754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <SystemClock_Config+0xb8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <SystemClock_Config+0xb8>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <SystemClock_Config+0xb8>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <SystemClock_Config+0xbc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <SystemClock_Config+0xbc>)
 800123e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <SystemClock_Config+0xbc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2310      	movs	r3, #16
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800125c:	2300      	movs	r3, #0
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f001 f98f 	bl	8002588 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001270:	f000 f81e 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fbf2 	bl	8002a78 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800129a:	f000 f809 	bl	80012b0 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_MspInit+0x4c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f996 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f002 f9b6 	bl	8003700 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20010000 	.word	0x20010000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20000168 	.word	0x20000168
 80013c8:	20000228 	.word	0x20000228

080013cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART1_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART1_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART1_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART1_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART1_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001428:	f001 fd06 	bl	8002e38 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f7ff ff3d 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000016c 	.word	0x2000016c
 8001440:	40011000 	.word	0x40011000

08001444 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_USART2_UART_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800147c:	f001 fcdc 	bl	8002e38 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001486:	f7ff ff13 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200001b0 	.word	0x200001b0
 8001494:	40004400 	.word	0x40004400

08001498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a32      	ldr	r2, [pc, #200]	; (8001580 <HAL_UART_MspInit+0xe8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12d      	bne.n	8001516 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_UART_MspInit+0xec>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a30      	ldr	r2, [pc, #192]	; (8001584 <HAL_UART_MspInit+0xec>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_UART_MspInit+0xec>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_UART_MspInit+0xec>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a29      	ldr	r2, [pc, #164]	; (8001584 <HAL_UART_MspInit+0xec>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_UART_MspInit+0xec>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001504:	2307      	movs	r3, #7
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	481e      	ldr	r0, [pc, #120]	; (8001588 <HAL_UART_MspInit+0xf0>)
 8001510:	f000 feb6 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001514:	e030      	b.n	8001578 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <HAL_UART_MspInit+0xf4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d12b      	bne.n	8001578 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_UART_MspInit+0xec>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_UART_MspInit+0xec>)
 800152a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0xec>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_UART_MspInit+0xec>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_UART_MspInit+0xec>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_UART_MspInit+0xec>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001558:	230c      	movs	r3, #12
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001568:	2307      	movs	r3, #7
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_UART_MspInit+0xf0>)
 8001574:	f000 fe84 	bl	8002280 <HAL_GPIO_Init>
}
 8001578:	bf00      	nop
 800157a:	3730      	adds	r7, #48	; 0x30
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40011000 	.word	0x40011000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	40004400 	.word	0x40004400

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001596:	490e      	ldr	r1, [pc, #56]	; (80015d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ac:	4c0b      	ldr	r4, [pc, #44]	; (80015dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ba:	f7ff ff07 	bl	80013cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f002 f8a5 	bl	800370c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fde3 	bl	800118c <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80015d4:	0800458c 	.word	0x0800458c
  ldr r2, =_sbss
 80015d8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80015dc:	20000228 	.word	0x20000228

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_Init+0x40>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_Init+0x40>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x40>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f90d 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fe50 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f917 	bl	800187a <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f8ed 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000000c 	.word	0x2000000c
 8001680:	20000014 	.word	0x20000014
 8001684:	20000010 	.word	0x20000010

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000014 	.word	0x20000014
 80016ac:	200001f4 	.word	0x200001f4

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200001f4 	.word	0x200001f4

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff47 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff5c 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffb0 	bl	80017e8 <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e00e      	b.n	80018c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	795b      	ldrb	r3, [r3, #5]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fc2d 	bl	8001114 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2202      	movs	r2, #2
 80018de:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	441a      	add	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d3f0      	bcc.n	80018e6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001912:	693b      	ldr	r3, [r7, #16]
}
 8001914:	4618      	mov	r0, r3
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_FLASH_Program+0xa0>)
 8001934:	7e1b      	ldrb	r3, [r3, #24]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_FLASH_Program+0x1e>
 800193a:	2302      	movs	r3, #2
 800193c:	e03b      	b.n	80019b6 <HAL_FLASH_Program+0x96>
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_FLASH_Program+0xa0>)
 8001940:	2201      	movs	r2, #1
 8001942:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001944:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001948:	f000 f8b0 	bl	8001aac <FLASH_WaitForLastOperation>
 800194c:	4603      	mov	r3, r0
 800194e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d12b      	bne.n	80019ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800195c:	783b      	ldrb	r3, [r7, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f000 f95b 	bl	8001c1c <FLASH_Program_Byte>
 8001966:	e016      	b.n	8001996 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d105      	bne.n	800197a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800196e:	883b      	ldrh	r3, [r7, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	f000 f92e 	bl	8001bd4 <FLASH_Program_HalfWord>
 8001978:	e00d      	b.n	8001996 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d105      	bne.n	800198c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f000 f903 	bl	8001b90 <FLASH_Program_Word>
 800198a:	e004      	b.n	8001996 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800198c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f000 f8cb 	bl	8001b2c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001996:	f24c 3050 	movw	r0, #50000	; 0xc350
 800199a:	f000 f887 	bl	8001aac <FLASH_WaitForLastOperation>
 800199e:	4603      	mov	r3, r0
 80019a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_FLASH_Program+0xa4>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_FLASH_Program+0xa4>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_FLASH_Program+0xa0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200001f8 	.word	0x200001f8
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_FLASH_Unlock+0x38>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da0b      	bge.n	80019f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_FLASH_Unlock+0x38>)
 80019dc:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_FLASH_Unlock+0x3c>)
 80019de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_FLASH_Unlock+0x38>)
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_FLASH_Unlock+0x40>)
 80019e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_FLASH_Unlock+0x38>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da01      	bge.n	80019f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80019f2:	79fb      	ldrb	r3, [r7, #7]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	45670123 	.word	0x45670123
 8001a08:	cdef89ab 	.word	0xcdef89ab

08001a0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_FLASH_Lock+0x1c>)
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_FLASH_Lock+0x1c>)
 8001a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a1a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_FLASH_OB_Unlock+0x30>)
 8001a40:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <HAL_FLASH_OB_Unlock+0x34>)
 8001a46:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40023c00 	.word	0x40023c00
 8001a5c:	08192a3b 	.word	0x08192a3b
 8001a60:	4c5d6e7f 	.word	0x4c5d6e7f

08001a64 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_FLASH_OB_Lock+0x1c>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_FLASH_OB_Lock+0x1c>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_FLASH_OB_Launch+0x24>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_FLASH_OB_Launch+0x24>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001a98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a9c:	f000 f806 	bl	8001aac <FLASH_WaitForLastOperation>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c14 	.word	0x40023c14

08001aac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <FLASH_WaitForLastOperation+0x78>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001abe:	f7ff fdf7 	bl	80016b0 <HAL_GetTick>
 8001ac2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ac4:	e010      	b.n	8001ae8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d00c      	beq.n	8001ae8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <FLASH_WaitForLastOperation+0x38>
 8001ad4:	f7ff fdec 	bl	80016b0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d201      	bcs.n	8001ae8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e019      	b.n	8001b1c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <FLASH_WaitForLastOperation+0x7c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e8      	bne.n	8001ac6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <FLASH_WaitForLastOperation+0x7c>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <FLASH_WaitForLastOperation+0x7c>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <FLASH_WaitForLastOperation+0x7c>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b12:	f000 f8a5 	bl	8001c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
  
}  
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200001f8 	.word	0x200001f8
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <FLASH_Program_DoubleWord+0x60>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <FLASH_Program_DoubleWord+0x60>)
 8001b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <FLASH_Program_DoubleWord+0x60>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4a10      	ldr	r2, [pc, #64]	; (8001b8c <FLASH_Program_DoubleWord+0x60>)
 8001b4a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <FLASH_Program_DoubleWord+0x60>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <FLASH_Program_DoubleWord+0x60>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001b62:	f3bf 8f6f 	isb	sy
}
 8001b66:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	000a      	movs	r2, r1
 8001b76:	2300      	movs	r3, #0
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	3104      	adds	r1, #4
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	801a      	strh	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	4a2b      	ldr	r2, [pc, #172]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <FLASH_SetErrorCode+0xc8>)
 8001d12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <FLASH_SetErrorCode+0xc4>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	60da      	str	r2, [r3, #12]
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40023c00 	.word	0x40023c00
 8001d28:	200001f8 	.word	0x200001f8

08001d2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_FLASHEx_Erase+0xd8>)
 8001d40:	7e1b      	ldrb	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_FLASHEx_Erase+0x1e>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e058      	b.n	8001dfc <HAL_FLASHEx_Erase+0xd0>
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_FLASHEx_Erase+0xd8>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d54:	f7ff feaa 	bl	8001aac <FLASH_WaitForLastOperation>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d148      	bne.n	8001df4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d115      	bne.n	8001d9e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 f8d6 	bl	8001f30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d88:	f7ff fe90 	bl	8001aac <FLASH_WaitForLastOperation>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_FLASHEx_Erase+0xdc>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_FLASHEx_Erase+0xdc>)
 8001d96:	f023 0304 	bic.w	r3, r3, #4
 8001d9a:	6113      	str	r3, [r2, #16]
 8001d9c:	e028      	b.n	8001df0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	e01c      	b.n	8001de0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4619      	mov	r1, r3
 8001dae:	68b8      	ldr	r0, [r7, #8]
 8001db0:	f000 f8e2 	bl	8001f78 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fe78 	bl	8001aac <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dca:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	601a      	str	r2, [r3, #0]
          break;
 8001dd8:	e00a      	b.n	8001df0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3da      	bcc.n	8001da6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001df0:	f000 fa00 	bl	80021f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_FLASHEx_Erase+0xd8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	761a      	strb	r2, [r3, #24]

  return status;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200001f8 	.word	0x200001f8
 8001e08:	40023c00 	.word	0x40023c00

08001e0c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e18:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <HAL_FLASHEx_OBProgram+0xd8>)
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_FLASHEx_OBProgram+0x18>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e05b      	b.n	8001edc <HAL_FLASHEx_OBProgram+0xd0>
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <HAL_FLASHEx_OBProgram+0xd8>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d018      	beq.n	8001e68 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10a      	bne.n	8001e54 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4619      	mov	r1, r3
 8001e48:	4610      	mov	r0, r2
 8001e4a:	f000 f8dd 	bl	8002008 <FLASH_OB_EnableWRP>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e009      	b.n	8001e68 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f000 f8f4 	bl	800204c <FLASH_OB_DisableWRP>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f906 	bl	800208c <FLASH_OB_RDP_LevelConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f000 f906 	bl	80020c0 <FLASH_OB_UserConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f928 	bl	8002120 <FLASH_OB_BOR_LevelConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_FLASHEx_OBProgram+0xd8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	761a      	strb	r2, [r3, #24]

  return status;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200001f8 	.word	0x200001f8

08001ee8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001ef6:	f000 f941 	bl	800217c <FLASH_OB_GetWRP>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001f02:	f000 f947 	bl	8002194 <FLASH_OB_GetRDP>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001f0e:	f000 f925 	bl	800215c <FLASH_OB_GetUser>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001f1a:	f000 f95b 	bl	80021d4 <FLASH_OB_GetBOR>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	615a      	str	r2, [r3, #20]
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6113      	str	r3, [r2, #16]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e010      	b.n	8001fb6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d103      	bne.n	8001fa2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	e009      	b.n	8001fb6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d103      	bne.n	8001fb0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e002      	b.n	8001fb6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001fb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	490f      	ldr	r1, [pc, #60]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	6113      	str	r3, [r2, #16]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40023c00 	.word	0x40023c00

08002008 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002016:	f24c 3050 	movw	r0, #50000	; 0xc350
 800201a:	f7ff fd47 	bl	8001aac <FLASH_WaitForLastOperation>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <FLASH_OB_EnableWRP+0x40>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	b29b      	uxth	r3, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	4904      	ldr	r1, [pc, #16]	; (8002048 <FLASH_OB_EnableWRP+0x40>)
 8002038:	4013      	ands	r3, r2
 800203a:	b29b      	uxth	r3, r3
 800203c:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023c16 	.word	0x40023c16

0800204c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800205a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800205e:	f7ff fd25 	bl	8001aac <FLASH_WaitForLastOperation>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d108      	bne.n	800207e <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <FLASH_OB_DisableWRP+0x3c>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29a      	uxth	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4904      	ldr	r1, [pc, #16]	; (8002088 <FLASH_OB_DisableWRP+0x3c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023c16 	.word	0x40023c16

0800208c <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800209a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800209e:	f7ff fd05 	bl	8001aac <FLASH_WaitForLastOperation>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <FLASH_OB_RDP_LevelConfig+0x30>)
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	7013      	strb	r3, [r2, #0]
  }

  return status;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023c15 	.word	0x40023c15

080020c0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
 80020ca:	460b      	mov	r3, r1
 80020cc:	71bb      	strb	r3, [r7, #6]
 80020ce:	4613      	mov	r3, r2
 80020d0:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80020d2:	23ff      	movs	r3, #255	; 0xff
 80020d4:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020de:	f7ff fce5 	bl	8001aac <FLASH_WaitForLastOperation>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d111      	bne.n	8002110 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <FLASH_OB_UserConfig+0x5c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	4313      	orrs	r3, r2
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4905      	ldr	r1, [pc, #20]	; (800211c <FLASH_OB_UserConfig+0x5c>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4313      	orrs	r3, r2
 800210c:	b2db      	uxtb	r3, r3
 800210e:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8002110:	7bbb      	ldrb	r3, [r7, #14]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c14 	.word	0x40023c14

08002120 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <FLASH_OB_BOR_LevelConfig+0x38>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4a09      	ldr	r2, [pc, #36]	; (8002158 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002132:	f023 030c 	bic.w	r3, r3, #12
 8002136:	b2db      	uxtb	r3, r3
 8002138:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <FLASH_OB_BOR_LevelConfig+0x38>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4905      	ldr	r1, [pc, #20]	; (8002158 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4313      	orrs	r3, r2
 8002146:	b2db      	uxtb	r3, r3
 8002148:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800214a:	2300      	movs	r3, #0

}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40023c14 	.word	0x40023c14

0800215c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <FLASH_OB_GetUser+0x1c>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f023 031f 	bic.w	r3, r3, #31
 800216a:	b2db      	uxtb	r3, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <FLASH_OB_GetWRP+0x14>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40023c16 	.word	0x40023c16

08002194 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800219a:	23aa      	movs	r3, #170	; 0xaa
 800219c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <FLASH_OB_GetRDP+0x3c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2bcc      	cmp	r3, #204	; 0xcc
 80021a6:	d102      	bne.n	80021ae <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80021a8:	23cc      	movs	r3, #204	; 0xcc
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	e009      	b.n	80021c2 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <FLASH_OB_GetRDP+0x3c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2baa      	cmp	r3, #170	; 0xaa
 80021b6:	d102      	bne.n	80021be <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80021b8:	23aa      	movs	r3, #170	; 0xaa
 80021ba:	71fb      	strb	r3, [r7, #7]
 80021bc:	e001      	b.n	80021c2 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80021be:	2355      	movs	r3, #85	; 0x55
 80021c0:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40023c15 	.word	0x40023c15

080021d4 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <FLASH_OB_GetBOR+0x1c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	b2db      	uxtb	r3, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023c14 	.word	0x40023c14

080021f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <FLASH_FlushCaches+0x88>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002200:	2b00      	cmp	r3, #0
 8002202:	d017      	beq.n	8002234 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <FLASH_FlushCaches+0x88>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1c      	ldr	r2, [pc, #112]	; (800227c <FLASH_FlushCaches+0x88>)
 800220a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800220e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <FLASH_FlushCaches+0x88>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <FLASH_FlushCaches+0x88>)
 8002216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <FLASH_FlushCaches+0x88>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a16      	ldr	r2, [pc, #88]	; (800227c <FLASH_FlushCaches+0x88>)
 8002222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002226:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <FLASH_FlushCaches+0x88>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <FLASH_FlushCaches+0x88>)
 800222e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002232:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <FLASH_FlushCaches+0x88>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <FLASH_FlushCaches+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <FLASH_FlushCaches+0x88>)
 8002246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800224a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <FLASH_FlushCaches+0x88>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <FLASH_FlushCaches+0x88>)
 8002252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <FLASH_FlushCaches+0x88>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <FLASH_FlushCaches+0x88>)
 800225e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002262:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <FLASH_FlushCaches+0x88>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <FLASH_FlushCaches+0x88>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
  }
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e159      	b.n	8002550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 8148 	bne.w	800254a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a2 	beq.w	800254a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a56      	ldr	r2, [pc, #344]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x202>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_GPIO_Init+0x2f4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x1fe>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a47      	ldr	r2, [pc, #284]	; (8002578 <HAL_GPIO_Init+0x2f8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x1fa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_GPIO_Init+0x2fc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x1f6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a45      	ldr	r2, [pc, #276]	; (8002580 <HAL_GPIO_Init+0x300>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x1f2>
 800246e:	2304      	movs	r3, #4
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002472:	2307      	movs	r3, #7
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_GPIO_Init+0x304>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f aea2 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e267      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d075      	beq.n	8002692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a6:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d00c      	beq.n	80025cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b2:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d112      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	4b7e      	ldr	r3, [pc, #504]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05b      	beq.n	8002690 <HAL_RCC_OscConfig+0x108>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d157      	bne.n	8002690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e242      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x74>
 80025ee:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a75      	ldr	r2, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x98>
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6f      	ldr	r2, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6c      	ldr	r2, [pc, #432]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 8002620:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a68      	ldr	r2, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff f836 	bl	80016b0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff f832 	bl	80016b0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e207      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0xc0>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff f822 	bl	80016b0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f81e 	bl	80016b0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1f3      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0xe8>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d063      	beq.n	8002766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d11c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d116      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e1c7      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4937      	ldr	r1, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	e03a      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x244>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe ffd7 	bl	80016b0 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7fe ffd3 	bl	80016b0 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1a8      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4925      	ldr	r1, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
 8002738:	e015      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x244>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe ffb6 	bl	80016b0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002748:	f7fe ffb2 	bl	80016b0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e187      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d036      	beq.n	80027e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCC_OscConfig+0x248>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe ff96 	bl	80016b0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002788:	f7fe ff92 	bl	80016b0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e167      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x200>
 80027a6:	e01b      	b.n	80027e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x248>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe ff7f 	bl	80016b0 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	e00e      	b.n	80027d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b6:	f7fe ff7b 	bl	80016b0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d907      	bls.n	80027d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e150      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	42470000 	.word	0x42470000
 80027d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ea      	bne.n	80027b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8097 	beq.w	800291c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b7d      	ldr	r3, [pc, #500]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a7c      	ldr	r2, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b7a      	ldr	r3, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b77      	ldr	r3, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a73      	ldr	r2, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7fe ff3b 	bl	80016b0 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe ff37 	bl	80016b0 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e10c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x2ea>
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b05      	cmp	r3, #5
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x30c>
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	4a5e      	ldr	r2, [pc, #376]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6713      	str	r3, [r2, #112]	; 0x70
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002894:	4b58      	ldr	r3, [pc, #352]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a57      	ldr	r2, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a54      	ldr	r2, [pc, #336]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f023 0304 	bic.w	r3, r3, #4
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fefc 	bl	80016b0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fef8 	bl	80016b0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0cb      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0ee      	beq.n	80028bc <HAL_RCC_OscConfig+0x334>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fee6 	bl	80016b0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe fee2 	bl	80016b0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0b5      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ee      	bne.n	80028e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a1 	beq.w	8002a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002926:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	d05c      	beq.n	80029ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d141      	bne.n	80029be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe feb6 	bl	80016b0 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe feb2 	bl	80016b0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e087      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	491b      	ldr	r1, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fe8b 	bl	80016b0 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe fe87 	bl	80016b0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e05c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x416>
 80029bc:	e054      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fe74 	bl	80016b0 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fe70 	bl	80016b0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e045      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x444>
 80029ea:	e03d      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e038      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000
 8002a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x4ec>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d028      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d121      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0cc      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d90c      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0b8      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae4:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	494d      	ldr	r1, [pc, #308]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d044      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d119      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e06f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e067      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4934      	ldr	r1, [pc, #208]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fda2 	bl	80016b0 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7fe fd9e 	bl	80016b0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e04f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d20c      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e032      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4916      	ldr	r1, [pc, #88]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	490e      	ldr	r1, [pc, #56]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bfe:	f000 f821 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002c02:	4602      	mov	r2, r0
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	490a      	ldr	r1, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	5ccb      	ldrb	r3, [r1, r3]
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fd02 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023c00 	.word	0x40023c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08004530 	.word	0x08004530
 8002c3c:	2000000c 	.word	0x2000000c
 8002c40:	20000010 	.word	0x20000010

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b090      	sub	sp, #64	; 0x40
 8002c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c50:	2300      	movs	r3, #0
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c54:	2300      	movs	r3, #0
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x40>
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	f200 80a1 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c76:	e09b      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c7c:	e09b      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7e:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c82:	e098      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c84:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d028      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cac:	2100      	movs	r1, #0
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb0:	fb03 f201 	mul.w	r2, r3, r1
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a43      	ldr	r2, [pc, #268]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8002cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc4:	460a      	mov	r2, r1
 8002cc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cca:	4413      	add	r3, r2
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	61fa      	str	r2, [r7, #28]
 8002cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cde:	f7fd facf 	bl	8000280 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cea:	e053      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	617a      	str	r2, [r7, #20]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cfe:	f04f 0b00 	mov.w	fp, #0
 8002d02:	4652      	mov	r2, sl
 8002d04:	465b      	mov	r3, fp
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	0159      	lsls	r1, r3, #5
 8002d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d14:	0150      	lsls	r0, r2, #5
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d1e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d36:	ebb2 0408 	subs.w	r4, r2, r8
 8002d3a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	00eb      	lsls	r3, r5, #3
 8002d48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4c:	00e2      	lsls	r2, r4, #3
 8002d4e:	4614      	mov	r4, r2
 8002d50:	461d      	mov	r5, r3
 8002d52:	eb14 030a 	adds.w	r3, r4, sl
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	eb45 030b 	adc.w	r3, r5, fp
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	028b      	lsls	r3, r1, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d74:	4621      	mov	r1, r4
 8002d76:	028a      	lsls	r2, r1, #10
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	60fa      	str	r2, [r7, #12]
 8002d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d88:	f7fd fa7a 	bl	8000280 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3740      	adds	r7, #64	; 0x40
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	017d7840 	.word	0x017d7840

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08004540 	.word	0x08004540

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffdc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0b5b      	lsrs	r3, r3, #13
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08004540 	.word	0x08004540

08002e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e03f      	b.n	8002eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fb1a 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f9cb 	bl	8003218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b08a      	sub	sp, #40	; 0x28
 8002ed6:	af02      	add	r7, sp, #8
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d17c      	bne.n	8002fec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_UART_Transmit+0x2c>
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e075      	b.n	8002fee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Transmit+0x3e>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e06e      	b.n	8002fee <HAL_UART_Transmit+0x11c>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f26:	f7fe fbc3 	bl	80016b0 <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f40:	d108      	bne.n	8002f54 <HAL_UART_Transmit+0x82>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e003      	b.n	8002f5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f64:	e02a      	b.n	8002fbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f8e2 	bl	800313a <UART_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e036      	b.n	8002fee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e007      	b.n	8002fae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1cf      	bne.n	8002f66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2140      	movs	r1, #64	; 0x40
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f8b2 	bl	800313a <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e006      	b.n	8002fee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08a      	sub	sp, #40	; 0x28
 8002ffa:	af02      	add	r7, sp, #8
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b20      	cmp	r3, #32
 8003014:	f040 808c 	bne.w	8003130 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_UART_Receive+0x2e>
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e084      	b.n	8003132 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_UART_Receive+0x40>
 8003032:	2302      	movs	r3, #2
 8003034:	e07d      	b.n	8003132 <HAL_UART_Receive+0x13c>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2222      	movs	r2, #34	; 0x22
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003052:	f7fe fb2d 	bl	80016b0 <HAL_GetTick>
 8003056:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d108      	bne.n	8003080 <HAL_UART_Receive+0x8a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e003      	b.n	8003088 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003090:	e043      	b.n	800311a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2120      	movs	r1, #32
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f84c 	bl	800313a <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e042      	b.n	8003132 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030be:	b29a      	uxth	r2, r3
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	3302      	adds	r3, #2
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e01f      	b.n	800310c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d007      	beq.n	80030e6 <HAL_UART_Receive+0xf0>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_UART_Receive+0xfe>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e008      	b.n	8003106 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003100:	b2da      	uxtb	r2, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1b6      	bne.n	8003092 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b090      	sub	sp, #64	; 0x40
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314a:	e050      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d04c      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <UART_WaitOnFlagUntilTimeout+0x30>
 800315a:	f7fe faa9 	bl	80016b0 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003166:	429a      	cmp	r2, r3
 8003168:	d241      	bcs.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318a:	637a      	str	r2, [r7, #52]	; 0x34
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3314      	adds	r3, #20
 80031a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	613b      	str	r3, [r7, #16]
   return(result);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3314      	adds	r3, #20
 80031bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031be:	623a      	str	r2, [r7, #32]
 80031c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	69f9      	ldr	r1, [r7, #28]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e5      	bne.n	800319e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00f      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d09f      	beq.n	800314c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3740      	adds	r7, #64	; 0x40
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b0c0      	sub	sp, #256	; 0x100
 800321e:	af00      	add	r7, sp, #0
 8003220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	ea40 0301 	orr.w	r3, r0, r1
 8003240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003270:	f021 010c 	bic.w	r1, r1, #12
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800327e:	430b      	orrs	r3, r1
 8003280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	6999      	ldr	r1, [r3, #24]
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	ea40 0301 	orr.w	r3, r0, r1
 800329e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b8f      	ldr	r3, [pc, #572]	; (80034e4 <UART_SetConfig+0x2cc>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d005      	beq.n	80032b8 <UART_SetConfig+0xa0>
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b8d      	ldr	r3, [pc, #564]	; (80034e8 <UART_SetConfig+0x2d0>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d104      	bne.n	80032c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b8:	f7ff fdaa 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 80032bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032c0:	e003      	b.n	80032ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032c2:	f7ff fd91 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 80032c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d4:	f040 810c 	bne.w	80034f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032ea:	4622      	mov	r2, r4
 80032ec:	462b      	mov	r3, r5
 80032ee:	1891      	adds	r1, r2, r2
 80032f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80032f2:	415b      	adcs	r3, r3
 80032f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032fa:	4621      	mov	r1, r4
 80032fc:	eb12 0801 	adds.w	r8, r2, r1
 8003300:	4629      	mov	r1, r5
 8003302:	eb43 0901 	adc.w	r9, r3, r1
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331a:	4690      	mov	r8, r2
 800331c:	4699      	mov	r9, r3
 800331e:	4623      	mov	r3, r4
 8003320:	eb18 0303 	adds.w	r3, r8, r3
 8003324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003328:	462b      	mov	r3, r5
 800332a:	eb49 0303 	adc.w	r3, r9, r3
 800332e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800333e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003346:	460b      	mov	r3, r1
 8003348:	18db      	adds	r3, r3, r3
 800334a:	653b      	str	r3, [r7, #80]	; 0x50
 800334c:	4613      	mov	r3, r2
 800334e:	eb42 0303 	adc.w	r3, r2, r3
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
 8003354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800335c:	f7fc ff90 	bl	8000280 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4b61      	ldr	r3, [pc, #388]	; (80034ec <UART_SetConfig+0x2d4>)
 8003366:	fba3 2302 	umull	r2, r3, r3, r2
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	011c      	lsls	r4, r3, #4
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800337c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	64b9      	str	r1, [r7, #72]	; 0x48
 8003388:	415b      	adcs	r3, r3
 800338a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800338c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003390:	4641      	mov	r1, r8
 8003392:	eb12 0a01 	adds.w	sl, r2, r1
 8003396:	4649      	mov	r1, r9
 8003398:	eb43 0b01 	adc.w	fp, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b0:	4692      	mov	sl, r2
 80033b2:	469b      	mov	fp, r3
 80033b4:	4643      	mov	r3, r8
 80033b6:	eb1a 0303 	adds.w	r3, sl, r3
 80033ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033be:	464b      	mov	r3, r9
 80033c0:	eb4b 0303 	adc.w	r3, fp, r3
 80033c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033dc:	460b      	mov	r3, r1
 80033de:	18db      	adds	r3, r3, r3
 80033e0:	643b      	str	r3, [r7, #64]	; 0x40
 80033e2:	4613      	mov	r3, r2
 80033e4:	eb42 0303 	adc.w	r3, r2, r3
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033f2:	f7fc ff45 	bl	8000280 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <UART_SetConfig+0x2d4>)
 80033fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2264      	movs	r2, #100	; 0x64
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	1acb      	subs	r3, r1, r3
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003412:	4b36      	ldr	r3, [pc, #216]	; (80034ec <UART_SetConfig+0x2d4>)
 8003414:	fba3 2302 	umull	r2, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003420:	441c      	add	r4, r3
 8003422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800342c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003434:	4642      	mov	r2, r8
 8003436:	464b      	mov	r3, r9
 8003438:	1891      	adds	r1, r2, r2
 800343a:	63b9      	str	r1, [r7, #56]	; 0x38
 800343c:	415b      	adcs	r3, r3
 800343e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003444:	4641      	mov	r1, r8
 8003446:	1851      	adds	r1, r2, r1
 8003448:	6339      	str	r1, [r7, #48]	; 0x30
 800344a:	4649      	mov	r1, r9
 800344c:	414b      	adcs	r3, r1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800345c:	4659      	mov	r1, fp
 800345e:	00cb      	lsls	r3, r1, #3
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003466:	4651      	mov	r1, sl
 8003468:	00ca      	lsls	r2, r1, #3
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	4603      	mov	r3, r0
 8003470:	4642      	mov	r2, r8
 8003472:	189b      	adds	r3, r3, r2
 8003474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003478:	464b      	mov	r3, r9
 800347a:	460a      	mov	r2, r1
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003498:	460b      	mov	r3, r1
 800349a:	18db      	adds	r3, r3, r3
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
 800349e:	4613      	mov	r3, r2
 80034a0:	eb42 0303 	adc.w	r3, r2, r3
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034ae:	f7fc fee7 	bl	8000280 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <UART_SetConfig+0x2d4>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	; 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	3332      	adds	r3, #50	; 0x32
 80034ca:	4a08      	ldr	r2, [pc, #32]	; (80034ec <UART_SetConfig+0x2d4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	f003 0207 	and.w	r2, r3, #7
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4422      	add	r2, r4
 80034de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034e0:	e105      	b.n	80036ee <UART_SetConfig+0x4d6>
 80034e2:	bf00      	nop
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40011400 	.word	0x40011400
 80034ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003502:	4642      	mov	r2, r8
 8003504:	464b      	mov	r3, r9
 8003506:	1891      	adds	r1, r2, r2
 8003508:	6239      	str	r1, [r7, #32]
 800350a:	415b      	adcs	r3, r3
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
 800350e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003512:	4641      	mov	r1, r8
 8003514:	1854      	adds	r4, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb43 0501 	adc.w	r5, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	00eb      	lsls	r3, r5, #3
 8003526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	4614      	mov	r4, r2
 800352e:	461d      	mov	r5, r3
 8003530:	4643      	mov	r3, r8
 8003532:	18e3      	adds	r3, r4, r3
 8003534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003538:	464b      	mov	r3, r9
 800353a:	eb45 0303 	adc.w	r3, r5, r3
 800353e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800354e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800355e:	4629      	mov	r1, r5
 8003560:	008b      	lsls	r3, r1, #2
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003568:	4621      	mov	r1, r4
 800356a:	008a      	lsls	r2, r1, #2
 800356c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003570:	f7fc fe86 	bl	8000280 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4b60      	ldr	r3, [pc, #384]	; (80036fc <UART_SetConfig+0x4e4>)
 800357a:	fba3 2302 	umull	r2, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	011c      	lsls	r4, r3, #4
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800358c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	61b9      	str	r1, [r7, #24]
 800359c:	415b      	adcs	r3, r3
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6139      	str	r1, [r7, #16]
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035d8:	464b      	mov	r3, r9
 80035da:	460a      	mov	r2, r1
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035fc:	4649      	mov	r1, r9
 80035fe:	008b      	lsls	r3, r1, #2
 8003600:	4641      	mov	r1, r8
 8003602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003606:	4641      	mov	r1, r8
 8003608:	008a      	lsls	r2, r1, #2
 800360a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800360e:	f7fc fe37 	bl	8000280 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b39      	ldr	r3, [pc, #228]	; (80036fc <UART_SetConfig+0x4e4>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a34      	ldr	r2, [pc, #208]	; (80036fc <UART_SetConfig+0x4e4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003636:	441c      	add	r4, r3
 8003638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363c:	2200      	movs	r2, #0
 800363e:	673b      	str	r3, [r7, #112]	; 0x70
 8003640:	677a      	str	r2, [r7, #116]	; 0x74
 8003642:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003646:	4642      	mov	r2, r8
 8003648:	464b      	mov	r3, r9
 800364a:	1891      	adds	r1, r2, r2
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	415b      	adcs	r3, r3
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003656:	4641      	mov	r1, r8
 8003658:	1851      	adds	r1, r2, r1
 800365a:	6039      	str	r1, [r7, #0]
 800365c:	4649      	mov	r1, r9
 800365e:	414b      	adcs	r3, r1
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800366e:	4659      	mov	r1, fp
 8003670:	00cb      	lsls	r3, r1, #3
 8003672:	4651      	mov	r1, sl
 8003674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003678:	4651      	mov	r1, sl
 800367a:	00ca      	lsls	r2, r1, #3
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	4603      	mov	r3, r0
 8003682:	4642      	mov	r2, r8
 8003684:	189b      	adds	r3, r3, r2
 8003686:	66bb      	str	r3, [r7, #104]	; 0x68
 8003688:	464b      	mov	r3, r9
 800368a:	460a      	mov	r2, r1
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	663b      	str	r3, [r7, #96]	; 0x60
 800369c:	667a      	str	r2, [r7, #100]	; 0x64
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036aa:	4649      	mov	r1, r9
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	4641      	mov	r1, r8
 80036b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b4:	4641      	mov	r1, r8
 80036b6:	008a      	lsls	r2, r1, #2
 80036b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036bc:	f7fc fde0 	bl	8000280 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <UART_SetConfig+0x4e4>)
 80036c6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2164      	movs	r1, #100	; 0x64
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a08      	ldr	r2, [pc, #32]	; (80036fc <UART_SetConfig+0x4e4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 020f 	and.w	r2, r3, #15
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4422      	add	r2, r4
 80036ec:	609a      	str	r2, [r3, #8]
}
 80036ee:	bf00      	nop
 80036f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fa:	bf00      	nop
 80036fc:	51eb851f 	.word	0x51eb851f

08003700 <__errno>:
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <__errno+0x8>)
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000018 	.word	0x20000018

0800370c <__libc_init_array>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	4d0d      	ldr	r5, [pc, #52]	; (8003744 <__libc_init_array+0x38>)
 8003710:	4c0d      	ldr	r4, [pc, #52]	; (8003748 <__libc_init_array+0x3c>)
 8003712:	1b64      	subs	r4, r4, r5
 8003714:	10a4      	asrs	r4, r4, #2
 8003716:	2600      	movs	r6, #0
 8003718:	42a6      	cmp	r6, r4
 800371a:	d109      	bne.n	8003730 <__libc_init_array+0x24>
 800371c:	4d0b      	ldr	r5, [pc, #44]	; (800374c <__libc_init_array+0x40>)
 800371e:	4c0c      	ldr	r4, [pc, #48]	; (8003750 <__libc_init_array+0x44>)
 8003720:	f000 fc8e 	bl	8004040 <_init>
 8003724:	1b64      	subs	r4, r4, r5
 8003726:	10a4      	asrs	r4, r4, #2
 8003728:	2600      	movs	r6, #0
 800372a:	42a6      	cmp	r6, r4
 800372c:	d105      	bne.n	800373a <__libc_init_array+0x2e>
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	f855 3b04 	ldr.w	r3, [r5], #4
 8003734:	4798      	blx	r3
 8003736:	3601      	adds	r6, #1
 8003738:	e7ee      	b.n	8003718 <__libc_init_array+0xc>
 800373a:	f855 3b04 	ldr.w	r3, [r5], #4
 800373e:	4798      	blx	r3
 8003740:	3601      	adds	r6, #1
 8003742:	e7f2      	b.n	800372a <__libc_init_array+0x1e>
 8003744:	08004584 	.word	0x08004584
 8003748:	08004584 	.word	0x08004584
 800374c:	08004584 	.word	0x08004584
 8003750:	08004588 	.word	0x08004588

08003754 <memset>:
 8003754:	4402      	add	r2, r0
 8003756:	4603      	mov	r3, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	f803 1b01 	strb.w	r1, [r3], #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <_vsiprintf_r>:
 8003764:	b500      	push	{lr}
 8003766:	b09b      	sub	sp, #108	; 0x6c
 8003768:	9100      	str	r1, [sp, #0]
 800376a:	9104      	str	r1, [sp, #16]
 800376c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003770:	9105      	str	r1, [sp, #20]
 8003772:	9102      	str	r1, [sp, #8]
 8003774:	4905      	ldr	r1, [pc, #20]	; (800378c <_vsiprintf_r+0x28>)
 8003776:	9103      	str	r1, [sp, #12]
 8003778:	4669      	mov	r1, sp
 800377a:	f000 f86f 	bl	800385c <_svfiprintf_r>
 800377e:	9b00      	ldr	r3, [sp, #0]
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	b01b      	add	sp, #108	; 0x6c
 8003786:	f85d fb04 	ldr.w	pc, [sp], #4
 800378a:	bf00      	nop
 800378c:	ffff0208 	.word	0xffff0208

08003790 <vsiprintf>:
 8003790:	4613      	mov	r3, r2
 8003792:	460a      	mov	r2, r1
 8003794:	4601      	mov	r1, r0
 8003796:	4802      	ldr	r0, [pc, #8]	; (80037a0 <vsiprintf+0x10>)
 8003798:	6800      	ldr	r0, [r0, #0]
 800379a:	f7ff bfe3 	b.w	8003764 <_vsiprintf_r>
 800379e:	bf00      	nop
 80037a0:	20000018 	.word	0x20000018

080037a4 <__ssputs_r>:
 80037a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	688e      	ldr	r6, [r1, #8]
 80037aa:	429e      	cmp	r6, r3
 80037ac:	4682      	mov	sl, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	4690      	mov	r8, r2
 80037b2:	461f      	mov	r7, r3
 80037b4:	d838      	bhi.n	8003828 <__ssputs_r+0x84>
 80037b6:	898a      	ldrh	r2, [r1, #12]
 80037b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037bc:	d032      	beq.n	8003824 <__ssputs_r+0x80>
 80037be:	6825      	ldr	r5, [r4, #0]
 80037c0:	6909      	ldr	r1, [r1, #16]
 80037c2:	eba5 0901 	sub.w	r9, r5, r1
 80037c6:	6965      	ldr	r5, [r4, #20]
 80037c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037d0:	3301      	adds	r3, #1
 80037d2:	444b      	add	r3, r9
 80037d4:	106d      	asrs	r5, r5, #1
 80037d6:	429d      	cmp	r5, r3
 80037d8:	bf38      	it	cc
 80037da:	461d      	movcc	r5, r3
 80037dc:	0553      	lsls	r3, r2, #21
 80037de:	d531      	bpl.n	8003844 <__ssputs_r+0xa0>
 80037e0:	4629      	mov	r1, r5
 80037e2:	f000 fb63 	bl	8003eac <_malloc_r>
 80037e6:	4606      	mov	r6, r0
 80037e8:	b950      	cbnz	r0, 8003800 <__ssputs_r+0x5c>
 80037ea:	230c      	movs	r3, #12
 80037ec:	f8ca 3000 	str.w	r3, [sl]
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f6:	81a3      	strh	r3, [r4, #12]
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003800:	6921      	ldr	r1, [r4, #16]
 8003802:	464a      	mov	r2, r9
 8003804:	f000 fabe 	bl	8003d84 <memcpy>
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800380e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003812:	81a3      	strh	r3, [r4, #12]
 8003814:	6126      	str	r6, [r4, #16]
 8003816:	6165      	str	r5, [r4, #20]
 8003818:	444e      	add	r6, r9
 800381a:	eba5 0509 	sub.w	r5, r5, r9
 800381e:	6026      	str	r6, [r4, #0]
 8003820:	60a5      	str	r5, [r4, #8]
 8003822:	463e      	mov	r6, r7
 8003824:	42be      	cmp	r6, r7
 8003826:	d900      	bls.n	800382a <__ssputs_r+0x86>
 8003828:	463e      	mov	r6, r7
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	4632      	mov	r2, r6
 800382e:	4641      	mov	r1, r8
 8003830:	f000 fab6 	bl	8003da0 <memmove>
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	1b9b      	subs	r3, r3, r6
 8003838:	60a3      	str	r3, [r4, #8]
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	4433      	add	r3, r6
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	2000      	movs	r0, #0
 8003842:	e7db      	b.n	80037fc <__ssputs_r+0x58>
 8003844:	462a      	mov	r2, r5
 8003846:	f000 fba5 	bl	8003f94 <_realloc_r>
 800384a:	4606      	mov	r6, r0
 800384c:	2800      	cmp	r0, #0
 800384e:	d1e1      	bne.n	8003814 <__ssputs_r+0x70>
 8003850:	6921      	ldr	r1, [r4, #16]
 8003852:	4650      	mov	r0, sl
 8003854:	f000 fabe 	bl	8003dd4 <_free_r>
 8003858:	e7c7      	b.n	80037ea <__ssputs_r+0x46>
	...

0800385c <_svfiprintf_r>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	4698      	mov	r8, r3
 8003862:	898b      	ldrh	r3, [r1, #12]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	b09d      	sub	sp, #116	; 0x74
 8003868:	4607      	mov	r7, r0
 800386a:	460d      	mov	r5, r1
 800386c:	4614      	mov	r4, r2
 800386e:	d50e      	bpl.n	800388e <_svfiprintf_r+0x32>
 8003870:	690b      	ldr	r3, [r1, #16]
 8003872:	b963      	cbnz	r3, 800388e <_svfiprintf_r+0x32>
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	f000 fb19 	bl	8003eac <_malloc_r>
 800387a:	6028      	str	r0, [r5, #0]
 800387c:	6128      	str	r0, [r5, #16]
 800387e:	b920      	cbnz	r0, 800388a <_svfiprintf_r+0x2e>
 8003880:	230c      	movs	r3, #12
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	e0d1      	b.n	8003a2e <_svfiprintf_r+0x1d2>
 800388a:	2340      	movs	r3, #64	; 0x40
 800388c:	616b      	str	r3, [r5, #20]
 800388e:	2300      	movs	r3, #0
 8003890:	9309      	str	r3, [sp, #36]	; 0x24
 8003892:	2320      	movs	r3, #32
 8003894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003898:	f8cd 800c 	str.w	r8, [sp, #12]
 800389c:	2330      	movs	r3, #48	; 0x30
 800389e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a48 <_svfiprintf_r+0x1ec>
 80038a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038a6:	f04f 0901 	mov.w	r9, #1
 80038aa:	4623      	mov	r3, r4
 80038ac:	469a      	mov	sl, r3
 80038ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038b2:	b10a      	cbz	r2, 80038b8 <_svfiprintf_r+0x5c>
 80038b4:	2a25      	cmp	r2, #37	; 0x25
 80038b6:	d1f9      	bne.n	80038ac <_svfiprintf_r+0x50>
 80038b8:	ebba 0b04 	subs.w	fp, sl, r4
 80038bc:	d00b      	beq.n	80038d6 <_svfiprintf_r+0x7a>
 80038be:	465b      	mov	r3, fp
 80038c0:	4622      	mov	r2, r4
 80038c2:	4629      	mov	r1, r5
 80038c4:	4638      	mov	r0, r7
 80038c6:	f7ff ff6d 	bl	80037a4 <__ssputs_r>
 80038ca:	3001      	adds	r0, #1
 80038cc:	f000 80aa 	beq.w	8003a24 <_svfiprintf_r+0x1c8>
 80038d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038d2:	445a      	add	r2, fp
 80038d4:	9209      	str	r2, [sp, #36]	; 0x24
 80038d6:	f89a 3000 	ldrb.w	r3, [sl]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80a2 	beq.w	8003a24 <_svfiprintf_r+0x1c8>
 80038e0:	2300      	movs	r3, #0
 80038e2:	f04f 32ff 	mov.w	r2, #4294967295
 80038e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038ea:	f10a 0a01 	add.w	sl, sl, #1
 80038ee:	9304      	str	r3, [sp, #16]
 80038f0:	9307      	str	r3, [sp, #28]
 80038f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038f6:	931a      	str	r3, [sp, #104]	; 0x68
 80038f8:	4654      	mov	r4, sl
 80038fa:	2205      	movs	r2, #5
 80038fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003900:	4851      	ldr	r0, [pc, #324]	; (8003a48 <_svfiprintf_r+0x1ec>)
 8003902:	f7fc fc6d 	bl	80001e0 <memchr>
 8003906:	9a04      	ldr	r2, [sp, #16]
 8003908:	b9d8      	cbnz	r0, 8003942 <_svfiprintf_r+0xe6>
 800390a:	06d0      	lsls	r0, r2, #27
 800390c:	bf44      	itt	mi
 800390e:	2320      	movmi	r3, #32
 8003910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003914:	0711      	lsls	r1, r2, #28
 8003916:	bf44      	itt	mi
 8003918:	232b      	movmi	r3, #43	; 0x2b
 800391a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800391e:	f89a 3000 	ldrb.w	r3, [sl]
 8003922:	2b2a      	cmp	r3, #42	; 0x2a
 8003924:	d015      	beq.n	8003952 <_svfiprintf_r+0xf6>
 8003926:	9a07      	ldr	r2, [sp, #28]
 8003928:	4654      	mov	r4, sl
 800392a:	2000      	movs	r0, #0
 800392c:	f04f 0c0a 	mov.w	ip, #10
 8003930:	4621      	mov	r1, r4
 8003932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003936:	3b30      	subs	r3, #48	; 0x30
 8003938:	2b09      	cmp	r3, #9
 800393a:	d94e      	bls.n	80039da <_svfiprintf_r+0x17e>
 800393c:	b1b0      	cbz	r0, 800396c <_svfiprintf_r+0x110>
 800393e:	9207      	str	r2, [sp, #28]
 8003940:	e014      	b.n	800396c <_svfiprintf_r+0x110>
 8003942:	eba0 0308 	sub.w	r3, r0, r8
 8003946:	fa09 f303 	lsl.w	r3, r9, r3
 800394a:	4313      	orrs	r3, r2
 800394c:	9304      	str	r3, [sp, #16]
 800394e:	46a2      	mov	sl, r4
 8003950:	e7d2      	b.n	80038f8 <_svfiprintf_r+0x9c>
 8003952:	9b03      	ldr	r3, [sp, #12]
 8003954:	1d19      	adds	r1, r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	9103      	str	r1, [sp, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	bfbb      	ittet	lt
 800395e:	425b      	neglt	r3, r3
 8003960:	f042 0202 	orrlt.w	r2, r2, #2
 8003964:	9307      	strge	r3, [sp, #28]
 8003966:	9307      	strlt	r3, [sp, #28]
 8003968:	bfb8      	it	lt
 800396a:	9204      	strlt	r2, [sp, #16]
 800396c:	7823      	ldrb	r3, [r4, #0]
 800396e:	2b2e      	cmp	r3, #46	; 0x2e
 8003970:	d10c      	bne.n	800398c <_svfiprintf_r+0x130>
 8003972:	7863      	ldrb	r3, [r4, #1]
 8003974:	2b2a      	cmp	r3, #42	; 0x2a
 8003976:	d135      	bne.n	80039e4 <_svfiprintf_r+0x188>
 8003978:	9b03      	ldr	r3, [sp, #12]
 800397a:	1d1a      	adds	r2, r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	9203      	str	r2, [sp, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	bfb8      	it	lt
 8003984:	f04f 33ff 	movlt.w	r3, #4294967295
 8003988:	3402      	adds	r4, #2
 800398a:	9305      	str	r3, [sp, #20]
 800398c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a58 <_svfiprintf_r+0x1fc>
 8003990:	7821      	ldrb	r1, [r4, #0]
 8003992:	2203      	movs	r2, #3
 8003994:	4650      	mov	r0, sl
 8003996:	f7fc fc23 	bl	80001e0 <memchr>
 800399a:	b140      	cbz	r0, 80039ae <_svfiprintf_r+0x152>
 800399c:	2340      	movs	r3, #64	; 0x40
 800399e:	eba0 000a 	sub.w	r0, r0, sl
 80039a2:	fa03 f000 	lsl.w	r0, r3, r0
 80039a6:	9b04      	ldr	r3, [sp, #16]
 80039a8:	4303      	orrs	r3, r0
 80039aa:	3401      	adds	r4, #1
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b2:	4826      	ldr	r0, [pc, #152]	; (8003a4c <_svfiprintf_r+0x1f0>)
 80039b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039b8:	2206      	movs	r2, #6
 80039ba:	f7fc fc11 	bl	80001e0 <memchr>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d038      	beq.n	8003a34 <_svfiprintf_r+0x1d8>
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <_svfiprintf_r+0x1f4>)
 80039c4:	bb1b      	cbnz	r3, 8003a0e <_svfiprintf_r+0x1b2>
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	3307      	adds	r3, #7
 80039ca:	f023 0307 	bic.w	r3, r3, #7
 80039ce:	3308      	adds	r3, #8
 80039d0:	9303      	str	r3, [sp, #12]
 80039d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d4:	4433      	add	r3, r6
 80039d6:	9309      	str	r3, [sp, #36]	; 0x24
 80039d8:	e767      	b.n	80038aa <_svfiprintf_r+0x4e>
 80039da:	fb0c 3202 	mla	r2, ip, r2, r3
 80039de:	460c      	mov	r4, r1
 80039e0:	2001      	movs	r0, #1
 80039e2:	e7a5      	b.n	8003930 <_svfiprintf_r+0xd4>
 80039e4:	2300      	movs	r3, #0
 80039e6:	3401      	adds	r4, #1
 80039e8:	9305      	str	r3, [sp, #20]
 80039ea:	4619      	mov	r1, r3
 80039ec:	f04f 0c0a 	mov.w	ip, #10
 80039f0:	4620      	mov	r0, r4
 80039f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039f6:	3a30      	subs	r2, #48	; 0x30
 80039f8:	2a09      	cmp	r2, #9
 80039fa:	d903      	bls.n	8003a04 <_svfiprintf_r+0x1a8>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0c5      	beq.n	800398c <_svfiprintf_r+0x130>
 8003a00:	9105      	str	r1, [sp, #20]
 8003a02:	e7c3      	b.n	800398c <_svfiprintf_r+0x130>
 8003a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a08:	4604      	mov	r4, r0
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e7f0      	b.n	80039f0 <_svfiprintf_r+0x194>
 8003a0e:	ab03      	add	r3, sp, #12
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	462a      	mov	r2, r5
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <_svfiprintf_r+0x1f8>)
 8003a16:	a904      	add	r1, sp, #16
 8003a18:	4638      	mov	r0, r7
 8003a1a:	f3af 8000 	nop.w
 8003a1e:	1c42      	adds	r2, r0, #1
 8003a20:	4606      	mov	r6, r0
 8003a22:	d1d6      	bne.n	80039d2 <_svfiprintf_r+0x176>
 8003a24:	89ab      	ldrh	r3, [r5, #12]
 8003a26:	065b      	lsls	r3, r3, #25
 8003a28:	f53f af2c 	bmi.w	8003884 <_svfiprintf_r+0x28>
 8003a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a2e:	b01d      	add	sp, #116	; 0x74
 8003a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a34:	ab03      	add	r3, sp, #12
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	462a      	mov	r2, r5
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <_svfiprintf_r+0x1f8>)
 8003a3c:	a904      	add	r1, sp, #16
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f000 f87a 	bl	8003b38 <_printf_i>
 8003a44:	e7eb      	b.n	8003a1e <_svfiprintf_r+0x1c2>
 8003a46:	bf00      	nop
 8003a48:	08004548 	.word	0x08004548
 8003a4c:	08004552 	.word	0x08004552
 8003a50:	00000000 	.word	0x00000000
 8003a54:	080037a5 	.word	0x080037a5
 8003a58:	0800454e 	.word	0x0800454e

08003a5c <_printf_common>:
 8003a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a60:	4616      	mov	r6, r2
 8003a62:	4699      	mov	r9, r3
 8003a64:	688a      	ldr	r2, [r1, #8]
 8003a66:	690b      	ldr	r3, [r1, #16]
 8003a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	bfb8      	it	lt
 8003a70:	4613      	movlt	r3, r2
 8003a72:	6033      	str	r3, [r6, #0]
 8003a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a78:	4607      	mov	r7, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	b10a      	cbz	r2, 8003a82 <_printf_common+0x26>
 8003a7e:	3301      	adds	r3, #1
 8003a80:	6033      	str	r3, [r6, #0]
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	0699      	lsls	r1, r3, #26
 8003a86:	bf42      	ittt	mi
 8003a88:	6833      	ldrmi	r3, [r6, #0]
 8003a8a:	3302      	addmi	r3, #2
 8003a8c:	6033      	strmi	r3, [r6, #0]
 8003a8e:	6825      	ldr	r5, [r4, #0]
 8003a90:	f015 0506 	ands.w	r5, r5, #6
 8003a94:	d106      	bne.n	8003aa4 <_printf_common+0x48>
 8003a96:	f104 0a19 	add.w	sl, r4, #25
 8003a9a:	68e3      	ldr	r3, [r4, #12]
 8003a9c:	6832      	ldr	r2, [r6, #0]
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	42ab      	cmp	r3, r5
 8003aa2:	dc26      	bgt.n	8003af2 <_printf_common+0x96>
 8003aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003aa8:	1e13      	subs	r3, r2, #0
 8003aaa:	6822      	ldr	r2, [r4, #0]
 8003aac:	bf18      	it	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	0692      	lsls	r2, r2, #26
 8003ab2:	d42b      	bmi.n	8003b0c <_printf_common+0xb0>
 8003ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ab8:	4649      	mov	r1, r9
 8003aba:	4638      	mov	r0, r7
 8003abc:	47c0      	blx	r8
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d01e      	beq.n	8003b00 <_printf_common+0xa4>
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	68e5      	ldr	r5, [r4, #12]
 8003ac6:	6832      	ldr	r2, [r6, #0]
 8003ac8:	f003 0306 	and.w	r3, r3, #6
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	bf08      	it	eq
 8003ad0:	1aad      	subeq	r5, r5, r2
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	6922      	ldr	r2, [r4, #16]
 8003ad6:	bf0c      	ite	eq
 8003ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003adc:	2500      	movne	r5, #0
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	bfc4      	itt	gt
 8003ae2:	1a9b      	subgt	r3, r3, r2
 8003ae4:	18ed      	addgt	r5, r5, r3
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	341a      	adds	r4, #26
 8003aea:	42b5      	cmp	r5, r6
 8003aec:	d11a      	bne.n	8003b24 <_printf_common+0xc8>
 8003aee:	2000      	movs	r0, #0
 8003af0:	e008      	b.n	8003b04 <_printf_common+0xa8>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4652      	mov	r2, sl
 8003af6:	4649      	mov	r1, r9
 8003af8:	4638      	mov	r0, r7
 8003afa:	47c0      	blx	r8
 8003afc:	3001      	adds	r0, #1
 8003afe:	d103      	bne.n	8003b08 <_printf_common+0xac>
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b08:	3501      	adds	r5, #1
 8003b0a:	e7c6      	b.n	8003a9a <_printf_common+0x3e>
 8003b0c:	18e1      	adds	r1, r4, r3
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	2030      	movs	r0, #48	; 0x30
 8003b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b16:	4422      	add	r2, r4
 8003b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b20:	3302      	adds	r3, #2
 8003b22:	e7c7      	b.n	8003ab4 <_printf_common+0x58>
 8003b24:	2301      	movs	r3, #1
 8003b26:	4622      	mov	r2, r4
 8003b28:	4649      	mov	r1, r9
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	47c0      	blx	r8
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d0e6      	beq.n	8003b00 <_printf_common+0xa4>
 8003b32:	3601      	adds	r6, #1
 8003b34:	e7d9      	b.n	8003aea <_printf_common+0x8e>
	...

08003b38 <_printf_i>:
 8003b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b3c:	7e0f      	ldrb	r7, [r1, #24]
 8003b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b40:	2f78      	cmp	r7, #120	; 0x78
 8003b42:	4691      	mov	r9, r2
 8003b44:	4680      	mov	r8, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	469a      	mov	sl, r3
 8003b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b4e:	d807      	bhi.n	8003b60 <_printf_i+0x28>
 8003b50:	2f62      	cmp	r7, #98	; 0x62
 8003b52:	d80a      	bhi.n	8003b6a <_printf_i+0x32>
 8003b54:	2f00      	cmp	r7, #0
 8003b56:	f000 80d8 	beq.w	8003d0a <_printf_i+0x1d2>
 8003b5a:	2f58      	cmp	r7, #88	; 0x58
 8003b5c:	f000 80a3 	beq.w	8003ca6 <_printf_i+0x16e>
 8003b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b68:	e03a      	b.n	8003be0 <_printf_i+0xa8>
 8003b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b6e:	2b15      	cmp	r3, #21
 8003b70:	d8f6      	bhi.n	8003b60 <_printf_i+0x28>
 8003b72:	a101      	add	r1, pc, #4	; (adr r1, 8003b78 <_printf_i+0x40>)
 8003b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b78:	08003bd1 	.word	0x08003bd1
 8003b7c:	08003be5 	.word	0x08003be5
 8003b80:	08003b61 	.word	0x08003b61
 8003b84:	08003b61 	.word	0x08003b61
 8003b88:	08003b61 	.word	0x08003b61
 8003b8c:	08003b61 	.word	0x08003b61
 8003b90:	08003be5 	.word	0x08003be5
 8003b94:	08003b61 	.word	0x08003b61
 8003b98:	08003b61 	.word	0x08003b61
 8003b9c:	08003b61 	.word	0x08003b61
 8003ba0:	08003b61 	.word	0x08003b61
 8003ba4:	08003cf1 	.word	0x08003cf1
 8003ba8:	08003c15 	.word	0x08003c15
 8003bac:	08003cd3 	.word	0x08003cd3
 8003bb0:	08003b61 	.word	0x08003b61
 8003bb4:	08003b61 	.word	0x08003b61
 8003bb8:	08003d13 	.word	0x08003d13
 8003bbc:	08003b61 	.word	0x08003b61
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003b61 	.word	0x08003b61
 8003bc8:	08003b61 	.word	0x08003b61
 8003bcc:	08003cdb 	.word	0x08003cdb
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	602a      	str	r2, [r5, #0]
 8003bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0a3      	b.n	8003d2c <_printf_i+0x1f4>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	6829      	ldr	r1, [r5, #0]
 8003be8:	0606      	lsls	r6, r0, #24
 8003bea:	f101 0304 	add.w	r3, r1, #4
 8003bee:	d50a      	bpl.n	8003c06 <_printf_i+0xce>
 8003bf0:	680e      	ldr	r6, [r1, #0]
 8003bf2:	602b      	str	r3, [r5, #0]
 8003bf4:	2e00      	cmp	r6, #0
 8003bf6:	da03      	bge.n	8003c00 <_printf_i+0xc8>
 8003bf8:	232d      	movs	r3, #45	; 0x2d
 8003bfa:	4276      	negs	r6, r6
 8003bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c00:	485e      	ldr	r0, [pc, #376]	; (8003d7c <_printf_i+0x244>)
 8003c02:	230a      	movs	r3, #10
 8003c04:	e019      	b.n	8003c3a <_printf_i+0x102>
 8003c06:	680e      	ldr	r6, [r1, #0]
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c0e:	bf18      	it	ne
 8003c10:	b236      	sxthne	r6, r6
 8003c12:	e7ef      	b.n	8003bf4 <_printf_i+0xbc>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	1d19      	adds	r1, r3, #4
 8003c1a:	6029      	str	r1, [r5, #0]
 8003c1c:	0601      	lsls	r1, r0, #24
 8003c1e:	d501      	bpl.n	8003c24 <_printf_i+0xec>
 8003c20:	681e      	ldr	r6, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <_printf_i+0xf2>
 8003c24:	0646      	lsls	r6, r0, #25
 8003c26:	d5fb      	bpl.n	8003c20 <_printf_i+0xe8>
 8003c28:	881e      	ldrh	r6, [r3, #0]
 8003c2a:	4854      	ldr	r0, [pc, #336]	; (8003d7c <_printf_i+0x244>)
 8003c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c2e:	bf0c      	ite	eq
 8003c30:	2308      	moveq	r3, #8
 8003c32:	230a      	movne	r3, #10
 8003c34:	2100      	movs	r1, #0
 8003c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c3a:	6865      	ldr	r5, [r4, #4]
 8003c3c:	60a5      	str	r5, [r4, #8]
 8003c3e:	2d00      	cmp	r5, #0
 8003c40:	bfa2      	ittt	ge
 8003c42:	6821      	ldrge	r1, [r4, #0]
 8003c44:	f021 0104 	bicge.w	r1, r1, #4
 8003c48:	6021      	strge	r1, [r4, #0]
 8003c4a:	b90e      	cbnz	r6, 8003c50 <_printf_i+0x118>
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	d04d      	beq.n	8003cec <_printf_i+0x1b4>
 8003c50:	4615      	mov	r5, r2
 8003c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c56:	fb03 6711 	mls	r7, r3, r1, r6
 8003c5a:	5dc7      	ldrb	r7, [r0, r7]
 8003c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c60:	4637      	mov	r7, r6
 8003c62:	42bb      	cmp	r3, r7
 8003c64:	460e      	mov	r6, r1
 8003c66:	d9f4      	bls.n	8003c52 <_printf_i+0x11a>
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d10b      	bne.n	8003c84 <_printf_i+0x14c>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	07de      	lsls	r6, r3, #31
 8003c70:	d508      	bpl.n	8003c84 <_printf_i+0x14c>
 8003c72:	6923      	ldr	r3, [r4, #16]
 8003c74:	6861      	ldr	r1, [r4, #4]
 8003c76:	4299      	cmp	r1, r3
 8003c78:	bfde      	ittt	le
 8003c7a:	2330      	movle	r3, #48	; 0x30
 8003c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c84:	1b52      	subs	r2, r2, r5
 8003c86:	6122      	str	r2, [r4, #16]
 8003c88:	f8cd a000 	str.w	sl, [sp]
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	aa03      	add	r2, sp, #12
 8003c90:	4621      	mov	r1, r4
 8003c92:	4640      	mov	r0, r8
 8003c94:	f7ff fee2 	bl	8003a5c <_printf_common>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d14c      	bne.n	8003d36 <_printf_i+0x1fe>
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	b004      	add	sp, #16
 8003ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca6:	4835      	ldr	r0, [pc, #212]	; (8003d7c <_printf_i+0x244>)
 8003ca8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cac:	6829      	ldr	r1, [r5, #0]
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cb4:	6029      	str	r1, [r5, #0]
 8003cb6:	061d      	lsls	r5, r3, #24
 8003cb8:	d514      	bpl.n	8003ce4 <_printf_i+0x1ac>
 8003cba:	07df      	lsls	r7, r3, #31
 8003cbc:	bf44      	itt	mi
 8003cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003cc2:	6023      	strmi	r3, [r4, #0]
 8003cc4:	b91e      	cbnz	r6, 8003cce <_printf_i+0x196>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f023 0320 	bic.w	r3, r3, #32
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	2310      	movs	r3, #16
 8003cd0:	e7b0      	b.n	8003c34 <_printf_i+0xfc>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	f043 0320 	orr.w	r3, r3, #32
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	2378      	movs	r3, #120	; 0x78
 8003cdc:	4828      	ldr	r0, [pc, #160]	; (8003d80 <_printf_i+0x248>)
 8003cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ce2:	e7e3      	b.n	8003cac <_printf_i+0x174>
 8003ce4:	0659      	lsls	r1, r3, #25
 8003ce6:	bf48      	it	mi
 8003ce8:	b2b6      	uxthmi	r6, r6
 8003cea:	e7e6      	b.n	8003cba <_printf_i+0x182>
 8003cec:	4615      	mov	r5, r2
 8003cee:	e7bb      	b.n	8003c68 <_printf_i+0x130>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	6826      	ldr	r6, [r4, #0]
 8003cf4:	6961      	ldr	r1, [r4, #20]
 8003cf6:	1d18      	adds	r0, r3, #4
 8003cf8:	6028      	str	r0, [r5, #0]
 8003cfa:	0635      	lsls	r5, r6, #24
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	d501      	bpl.n	8003d04 <_printf_i+0x1cc>
 8003d00:	6019      	str	r1, [r3, #0]
 8003d02:	e002      	b.n	8003d0a <_printf_i+0x1d2>
 8003d04:	0670      	lsls	r0, r6, #25
 8003d06:	d5fb      	bpl.n	8003d00 <_printf_i+0x1c8>
 8003d08:	8019      	strh	r1, [r3, #0]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	4615      	mov	r5, r2
 8003d10:	e7ba      	b.n	8003c88 <_printf_i+0x150>
 8003d12:	682b      	ldr	r3, [r5, #0]
 8003d14:	1d1a      	adds	r2, r3, #4
 8003d16:	602a      	str	r2, [r5, #0]
 8003d18:	681d      	ldr	r5, [r3, #0]
 8003d1a:	6862      	ldr	r2, [r4, #4]
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f7fc fa5e 	bl	80001e0 <memchr>
 8003d24:	b108      	cbz	r0, 8003d2a <_printf_i+0x1f2>
 8003d26:	1b40      	subs	r0, r0, r5
 8003d28:	6060      	str	r0, [r4, #4]
 8003d2a:	6863      	ldr	r3, [r4, #4]
 8003d2c:	6123      	str	r3, [r4, #16]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d34:	e7a8      	b.n	8003c88 <_printf_i+0x150>
 8003d36:	6923      	ldr	r3, [r4, #16]
 8003d38:	462a      	mov	r2, r5
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	47d0      	blx	sl
 8003d40:	3001      	adds	r0, #1
 8003d42:	d0ab      	beq.n	8003c9c <_printf_i+0x164>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	079b      	lsls	r3, r3, #30
 8003d48:	d413      	bmi.n	8003d72 <_printf_i+0x23a>
 8003d4a:	68e0      	ldr	r0, [r4, #12]
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	4298      	cmp	r0, r3
 8003d50:	bfb8      	it	lt
 8003d52:	4618      	movlt	r0, r3
 8003d54:	e7a4      	b.n	8003ca0 <_printf_i+0x168>
 8003d56:	2301      	movs	r3, #1
 8003d58:	4632      	mov	r2, r6
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	47d0      	blx	sl
 8003d60:	3001      	adds	r0, #1
 8003d62:	d09b      	beq.n	8003c9c <_printf_i+0x164>
 8003d64:	3501      	adds	r5, #1
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	9903      	ldr	r1, [sp, #12]
 8003d6a:	1a5b      	subs	r3, r3, r1
 8003d6c:	42ab      	cmp	r3, r5
 8003d6e:	dcf2      	bgt.n	8003d56 <_printf_i+0x21e>
 8003d70:	e7eb      	b.n	8003d4a <_printf_i+0x212>
 8003d72:	2500      	movs	r5, #0
 8003d74:	f104 0619 	add.w	r6, r4, #25
 8003d78:	e7f5      	b.n	8003d66 <_printf_i+0x22e>
 8003d7a:	bf00      	nop
 8003d7c:	08004559 	.word	0x08004559
 8003d80:	0800456a 	.word	0x0800456a

08003d84 <memcpy>:
 8003d84:	440a      	add	r2, r1
 8003d86:	4291      	cmp	r1, r2
 8003d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d8c:	d100      	bne.n	8003d90 <memcpy+0xc>
 8003d8e:	4770      	bx	lr
 8003d90:	b510      	push	{r4, lr}
 8003d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d9a:	4291      	cmp	r1, r2
 8003d9c:	d1f9      	bne.n	8003d92 <memcpy+0xe>
 8003d9e:	bd10      	pop	{r4, pc}

08003da0 <memmove>:
 8003da0:	4288      	cmp	r0, r1
 8003da2:	b510      	push	{r4, lr}
 8003da4:	eb01 0402 	add.w	r4, r1, r2
 8003da8:	d902      	bls.n	8003db0 <memmove+0x10>
 8003daa:	4284      	cmp	r4, r0
 8003dac:	4623      	mov	r3, r4
 8003dae:	d807      	bhi.n	8003dc0 <memmove+0x20>
 8003db0:	1e43      	subs	r3, r0, #1
 8003db2:	42a1      	cmp	r1, r4
 8003db4:	d008      	beq.n	8003dc8 <memmove+0x28>
 8003db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dbe:	e7f8      	b.n	8003db2 <memmove+0x12>
 8003dc0:	4402      	add	r2, r0
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	428a      	cmp	r2, r1
 8003dc6:	d100      	bne.n	8003dca <memmove+0x2a>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dd2:	e7f7      	b.n	8003dc4 <memmove+0x24>

08003dd4 <_free_r>:
 8003dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	d044      	beq.n	8003e64 <_free_r+0x90>
 8003dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dde:	9001      	str	r0, [sp, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f1a1 0404 	sub.w	r4, r1, #4
 8003de6:	bfb8      	it	lt
 8003de8:	18e4      	addlt	r4, r4, r3
 8003dea:	f000 f913 	bl	8004014 <__malloc_lock>
 8003dee:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <_free_r+0x94>)
 8003df0:	9801      	ldr	r0, [sp, #4]
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	b933      	cbnz	r3, 8003e04 <_free_r+0x30>
 8003df6:	6063      	str	r3, [r4, #4]
 8003df8:	6014      	str	r4, [r2, #0]
 8003dfa:	b003      	add	sp, #12
 8003dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e00:	f000 b90e 	b.w	8004020 <__malloc_unlock>
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d908      	bls.n	8003e1a <_free_r+0x46>
 8003e08:	6825      	ldr	r5, [r4, #0]
 8003e0a:	1961      	adds	r1, r4, r5
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	bf01      	itttt	eq
 8003e10:	6819      	ldreq	r1, [r3, #0]
 8003e12:	685b      	ldreq	r3, [r3, #4]
 8003e14:	1949      	addeq	r1, r1, r5
 8003e16:	6021      	streq	r1, [r4, #0]
 8003e18:	e7ed      	b.n	8003df6 <_free_r+0x22>
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b10b      	cbz	r3, 8003e24 <_free_r+0x50>
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d9fa      	bls.n	8003e1a <_free_r+0x46>
 8003e24:	6811      	ldr	r1, [r2, #0]
 8003e26:	1855      	adds	r5, r2, r1
 8003e28:	42a5      	cmp	r5, r4
 8003e2a:	d10b      	bne.n	8003e44 <_free_r+0x70>
 8003e2c:	6824      	ldr	r4, [r4, #0]
 8003e2e:	4421      	add	r1, r4
 8003e30:	1854      	adds	r4, r2, r1
 8003e32:	42a3      	cmp	r3, r4
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	d1e0      	bne.n	8003dfa <_free_r+0x26>
 8003e38:	681c      	ldr	r4, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	6053      	str	r3, [r2, #4]
 8003e3e:	4421      	add	r1, r4
 8003e40:	6011      	str	r1, [r2, #0]
 8003e42:	e7da      	b.n	8003dfa <_free_r+0x26>
 8003e44:	d902      	bls.n	8003e4c <_free_r+0x78>
 8003e46:	230c      	movs	r3, #12
 8003e48:	6003      	str	r3, [r0, #0]
 8003e4a:	e7d6      	b.n	8003dfa <_free_r+0x26>
 8003e4c:	6825      	ldr	r5, [r4, #0]
 8003e4e:	1961      	adds	r1, r4, r5
 8003e50:	428b      	cmp	r3, r1
 8003e52:	bf04      	itt	eq
 8003e54:	6819      	ldreq	r1, [r3, #0]
 8003e56:	685b      	ldreq	r3, [r3, #4]
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	bf04      	itt	eq
 8003e5c:	1949      	addeq	r1, r1, r5
 8003e5e:	6021      	streq	r1, [r4, #0]
 8003e60:	6054      	str	r4, [r2, #4]
 8003e62:	e7ca      	b.n	8003dfa <_free_r+0x26>
 8003e64:	b003      	add	sp, #12
 8003e66:	bd30      	pop	{r4, r5, pc}
 8003e68:	20000218 	.word	0x20000218

08003e6c <sbrk_aligned>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	4e0e      	ldr	r6, [pc, #56]	; (8003ea8 <sbrk_aligned+0x3c>)
 8003e70:	460c      	mov	r4, r1
 8003e72:	6831      	ldr	r1, [r6, #0]
 8003e74:	4605      	mov	r5, r0
 8003e76:	b911      	cbnz	r1, 8003e7e <sbrk_aligned+0x12>
 8003e78:	f000 f8bc 	bl	8003ff4 <_sbrk_r>
 8003e7c:	6030      	str	r0, [r6, #0]
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4628      	mov	r0, r5
 8003e82:	f000 f8b7 	bl	8003ff4 <_sbrk_r>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d00a      	beq.n	8003ea0 <sbrk_aligned+0x34>
 8003e8a:	1cc4      	adds	r4, r0, #3
 8003e8c:	f024 0403 	bic.w	r4, r4, #3
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	d007      	beq.n	8003ea4 <sbrk_aligned+0x38>
 8003e94:	1a21      	subs	r1, r4, r0
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 f8ac 	bl	8003ff4 <_sbrk_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d101      	bne.n	8003ea4 <sbrk_aligned+0x38>
 8003ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	2000021c 	.word	0x2000021c

08003eac <_malloc_r>:
 8003eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb0:	1ccd      	adds	r5, r1, #3
 8003eb2:	f025 0503 	bic.w	r5, r5, #3
 8003eb6:	3508      	adds	r5, #8
 8003eb8:	2d0c      	cmp	r5, #12
 8003eba:	bf38      	it	cc
 8003ebc:	250c      	movcc	r5, #12
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	db01      	blt.n	8003ec8 <_malloc_r+0x1c>
 8003ec4:	42a9      	cmp	r1, r5
 8003ec6:	d905      	bls.n	8003ed4 <_malloc_r+0x28>
 8003ec8:	230c      	movs	r3, #12
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	2600      	movs	r6, #0
 8003ece:	4630      	mov	r0, r6
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	4e2e      	ldr	r6, [pc, #184]	; (8003f90 <_malloc_r+0xe4>)
 8003ed6:	f000 f89d 	bl	8004014 <__malloc_lock>
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	461c      	mov	r4, r3
 8003ede:	bb34      	cbnz	r4, 8003f2e <_malloc_r+0x82>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f7ff ffc2 	bl	8003e6c <sbrk_aligned>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	4604      	mov	r4, r0
 8003eec:	d14d      	bne.n	8003f8a <_malloc_r+0xde>
 8003eee:	6834      	ldr	r4, [r6, #0]
 8003ef0:	4626      	mov	r6, r4
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	d140      	bne.n	8003f78 <_malloc_r+0xcc>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4638      	mov	r0, r7
 8003efc:	eb04 0803 	add.w	r8, r4, r3
 8003f00:	f000 f878 	bl	8003ff4 <_sbrk_r>
 8003f04:	4580      	cmp	r8, r0
 8003f06:	d13a      	bne.n	8003f7e <_malloc_r+0xd2>
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	3503      	adds	r5, #3
 8003f0c:	1a6d      	subs	r5, r5, r1
 8003f0e:	f025 0503 	bic.w	r5, r5, #3
 8003f12:	3508      	adds	r5, #8
 8003f14:	2d0c      	cmp	r5, #12
 8003f16:	bf38      	it	cc
 8003f18:	250c      	movcc	r5, #12
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f7ff ffa5 	bl	8003e6c <sbrk_aligned>
 8003f22:	3001      	adds	r0, #1
 8003f24:	d02b      	beq.n	8003f7e <_malloc_r+0xd2>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	442b      	add	r3, r5
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	e00e      	b.n	8003f4c <_malloc_r+0xa0>
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	1b52      	subs	r2, r2, r5
 8003f32:	d41e      	bmi.n	8003f72 <_malloc_r+0xc6>
 8003f34:	2a0b      	cmp	r2, #11
 8003f36:	d916      	bls.n	8003f66 <_malloc_r+0xba>
 8003f38:	1961      	adds	r1, r4, r5
 8003f3a:	42a3      	cmp	r3, r4
 8003f3c:	6025      	str	r5, [r4, #0]
 8003f3e:	bf18      	it	ne
 8003f40:	6059      	strne	r1, [r3, #4]
 8003f42:	6863      	ldr	r3, [r4, #4]
 8003f44:	bf08      	it	eq
 8003f46:	6031      	streq	r1, [r6, #0]
 8003f48:	5162      	str	r2, [r4, r5]
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f104 060b 	add.w	r6, r4, #11
 8003f52:	f000 f865 	bl	8004020 <__malloc_unlock>
 8003f56:	f026 0607 	bic.w	r6, r6, #7
 8003f5a:	1d23      	adds	r3, r4, #4
 8003f5c:	1af2      	subs	r2, r6, r3
 8003f5e:	d0b6      	beq.n	8003ece <_malloc_r+0x22>
 8003f60:	1b9b      	subs	r3, r3, r6
 8003f62:	50a3      	str	r3, [r4, r2]
 8003f64:	e7b3      	b.n	8003ece <_malloc_r+0x22>
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	bf0c      	ite	eq
 8003f6c:	6032      	streq	r2, [r6, #0]
 8003f6e:	605a      	strne	r2, [r3, #4]
 8003f70:	e7ec      	b.n	8003f4c <_malloc_r+0xa0>
 8003f72:	4623      	mov	r3, r4
 8003f74:	6864      	ldr	r4, [r4, #4]
 8003f76:	e7b2      	b.n	8003ede <_malloc_r+0x32>
 8003f78:	4634      	mov	r4, r6
 8003f7a:	6876      	ldr	r6, [r6, #4]
 8003f7c:	e7b9      	b.n	8003ef2 <_malloc_r+0x46>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4638      	mov	r0, r7
 8003f84:	f000 f84c 	bl	8004020 <__malloc_unlock>
 8003f88:	e7a1      	b.n	8003ece <_malloc_r+0x22>
 8003f8a:	6025      	str	r5, [r4, #0]
 8003f8c:	e7de      	b.n	8003f4c <_malloc_r+0xa0>
 8003f8e:	bf00      	nop
 8003f90:	20000218 	.word	0x20000218

08003f94 <_realloc_r>:
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	4680      	mov	r8, r0
 8003f9a:	4614      	mov	r4, r2
 8003f9c:	460e      	mov	r6, r1
 8003f9e:	b921      	cbnz	r1, 8003faa <_realloc_r+0x16>
 8003fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	f7ff bf81 	b.w	8003eac <_malloc_r>
 8003faa:	b92a      	cbnz	r2, 8003fb8 <_realloc_r+0x24>
 8003fac:	f7ff ff12 	bl	8003dd4 <_free_r>
 8003fb0:	4625      	mov	r5, r4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb8:	f000 f838 	bl	800402c <_malloc_usable_size_r>
 8003fbc:	4284      	cmp	r4, r0
 8003fbe:	4607      	mov	r7, r0
 8003fc0:	d802      	bhi.n	8003fc8 <_realloc_r+0x34>
 8003fc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fc6:	d812      	bhi.n	8003fee <_realloc_r+0x5a>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f7ff ff6e 	bl	8003eac <_malloc_r>
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0ed      	beq.n	8003fb2 <_realloc_r+0x1e>
 8003fd6:	42bc      	cmp	r4, r7
 8003fd8:	4622      	mov	r2, r4
 8003fda:	4631      	mov	r1, r6
 8003fdc:	bf28      	it	cs
 8003fde:	463a      	movcs	r2, r7
 8003fe0:	f7ff fed0 	bl	8003d84 <memcpy>
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f7ff fef4 	bl	8003dd4 <_free_r>
 8003fec:	e7e1      	b.n	8003fb2 <_realloc_r+0x1e>
 8003fee:	4635      	mov	r5, r6
 8003ff0:	e7df      	b.n	8003fb2 <_realloc_r+0x1e>
	...

08003ff4 <_sbrk_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4d06      	ldr	r5, [pc, #24]	; (8004010 <_sbrk_r+0x1c>)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	f7fd f9ae 	bl	8001360 <_sbrk>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_sbrk_r+0x1a>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_sbrk_r+0x1a>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	20000220 	.word	0x20000220

08004014 <__malloc_lock>:
 8004014:	4801      	ldr	r0, [pc, #4]	; (800401c <__malloc_lock+0x8>)
 8004016:	f000 b811 	b.w	800403c <__retarget_lock_acquire_recursive>
 800401a:	bf00      	nop
 800401c:	20000224 	.word	0x20000224

08004020 <__malloc_unlock>:
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <__malloc_unlock+0x8>)
 8004022:	f000 b80c 	b.w	800403e <__retarget_lock_release_recursive>
 8004026:	bf00      	nop
 8004028:	20000224 	.word	0x20000224

0800402c <_malloc_usable_size_r>:
 800402c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004030:	1f18      	subs	r0, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfbc      	itt	lt
 8004036:	580b      	ldrlt	r3, [r1, r0]
 8004038:	18c0      	addlt	r0, r0, r3
 800403a:	4770      	bx	lr

0800403c <__retarget_lock_acquire_recursive>:
 800403c:	4770      	bx	lr

0800403e <__retarget_lock_release_recursive>:
 800403e:	4770      	bx	lr

08004040 <_init>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr

0800404c <_fini>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr

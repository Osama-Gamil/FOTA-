
RC_FinalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f8  080081d0  080081d0  000081d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080108c8  080108c8  000108c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a10  08010a10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08010a10  08010a10  00010a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a18  08010a18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a18  08010a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a1c  08010a1c  00010a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08010a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019454  20000078  08010a98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200194cc  08010a98  000294cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001771b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378a  00000000  00000000  000377c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002377d  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193ae  00000000  00000000  00060da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc6aa  00000000  00000000  0007a153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001567fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab0  00000000  00000000  00156850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	; (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	; (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000078 	.word	0x20000078
 80081ec:	00000000 	.word	0x00000000
 80081f0:	080108b0 	.word	0x080108b0

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	; (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	; (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	; (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	2000007c 	.word	0x2000007c
 800820c:	080108b0 	.word	0x080108b0

08008210 <memchr>:
 8008210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008214:	2a10      	cmp	r2, #16
 8008216:	db2b      	blt.n	8008270 <memchr+0x60>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	d008      	beq.n	8008230 <memchr+0x20>
 800821e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008222:	3a01      	subs	r2, #1
 8008224:	428b      	cmp	r3, r1
 8008226:	d02d      	beq.n	8008284 <memchr+0x74>
 8008228:	f010 0f07 	tst.w	r0, #7
 800822c:	b342      	cbz	r2, 8008280 <memchr+0x70>
 800822e:	d1f6      	bne.n	800821e <memchr+0xe>
 8008230:	b4f0      	push	{r4, r5, r6, r7}
 8008232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800823a:	f022 0407 	bic.w	r4, r2, #7
 800823e:	f07f 0700 	mvns.w	r7, #0
 8008242:	2300      	movs	r3, #0
 8008244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008248:	3c08      	subs	r4, #8
 800824a:	ea85 0501 	eor.w	r5, r5, r1
 800824e:	ea86 0601 	eor.w	r6, r6, r1
 8008252:	fa85 f547 	uadd8	r5, r5, r7
 8008256:	faa3 f587 	sel	r5, r3, r7
 800825a:	fa86 f647 	uadd8	r6, r6, r7
 800825e:	faa5 f687 	sel	r6, r5, r7
 8008262:	b98e      	cbnz	r6, 8008288 <memchr+0x78>
 8008264:	d1ee      	bne.n	8008244 <memchr+0x34>
 8008266:	bcf0      	pop	{r4, r5, r6, r7}
 8008268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800826c:	f002 0207 	and.w	r2, r2, #7
 8008270:	b132      	cbz	r2, 8008280 <memchr+0x70>
 8008272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008276:	3a01      	subs	r2, #1
 8008278:	ea83 0301 	eor.w	r3, r3, r1
 800827c:	b113      	cbz	r3, 8008284 <memchr+0x74>
 800827e:	d1f8      	bne.n	8008272 <memchr+0x62>
 8008280:	2000      	movs	r0, #0
 8008282:	4770      	bx	lr
 8008284:	3801      	subs	r0, #1
 8008286:	4770      	bx	lr
 8008288:	2d00      	cmp	r5, #0
 800828a:	bf06      	itte	eq
 800828c:	4635      	moveq	r5, r6
 800828e:	3803      	subeq	r0, #3
 8008290:	3807      	subne	r0, #7
 8008292:	f015 0f01 	tst.w	r5, #1
 8008296:	d107      	bne.n	80082a8 <memchr+0x98>
 8008298:	3001      	adds	r0, #1
 800829a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800829e:	bf02      	ittt	eq
 80082a0:	3001      	addeq	r0, #1
 80082a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80082a6:	3001      	addeq	r0, #1
 80082a8:	bcf0      	pop	{r4, r5, r6, r7}
 80082aa:	3801      	subs	r0, #1
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop

080082b0 <__aeabi_uldivmod>:
 80082b0:	b953      	cbnz	r3, 80082c8 <__aeabi_uldivmod+0x18>
 80082b2:	b94a      	cbnz	r2, 80082c8 <__aeabi_uldivmod+0x18>
 80082b4:	2900      	cmp	r1, #0
 80082b6:	bf08      	it	eq
 80082b8:	2800      	cmpeq	r0, #0
 80082ba:	bf1c      	itt	ne
 80082bc:	f04f 31ff 	movne.w	r1, #4294967295
 80082c0:	f04f 30ff 	movne.w	r0, #4294967295
 80082c4:	f000 b974 	b.w	80085b0 <__aeabi_idiv0>
 80082c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082d0:	f000 f806 	bl	80082e0 <__udivmoddi4>
 80082d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082dc:	b004      	add	sp, #16
 80082de:	4770      	bx	lr

080082e0 <__udivmoddi4>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	9d08      	ldr	r5, [sp, #32]
 80082e6:	4604      	mov	r4, r0
 80082e8:	468e      	mov	lr, r1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d14d      	bne.n	800838a <__udivmoddi4+0xaa>
 80082ee:	428a      	cmp	r2, r1
 80082f0:	4694      	mov	ip, r2
 80082f2:	d969      	bls.n	80083c8 <__udivmoddi4+0xe8>
 80082f4:	fab2 f282 	clz	r2, r2
 80082f8:	b152      	cbz	r2, 8008310 <__udivmoddi4+0x30>
 80082fa:	fa01 f302 	lsl.w	r3, r1, r2
 80082fe:	f1c2 0120 	rsb	r1, r2, #32
 8008302:	fa20 f101 	lsr.w	r1, r0, r1
 8008306:	fa0c fc02 	lsl.w	ip, ip, r2
 800830a:	ea41 0e03 	orr.w	lr, r1, r3
 800830e:	4094      	lsls	r4, r2
 8008310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008314:	0c21      	lsrs	r1, r4, #16
 8008316:	fbbe f6f8 	udiv	r6, lr, r8
 800831a:	fa1f f78c 	uxth.w	r7, ip
 800831e:	fb08 e316 	mls	r3, r8, r6, lr
 8008322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008326:	fb06 f107 	mul.w	r1, r6, r7
 800832a:	4299      	cmp	r1, r3
 800832c:	d90a      	bls.n	8008344 <__udivmoddi4+0x64>
 800832e:	eb1c 0303 	adds.w	r3, ip, r3
 8008332:	f106 30ff 	add.w	r0, r6, #4294967295
 8008336:	f080 811f 	bcs.w	8008578 <__udivmoddi4+0x298>
 800833a:	4299      	cmp	r1, r3
 800833c:	f240 811c 	bls.w	8008578 <__udivmoddi4+0x298>
 8008340:	3e02      	subs	r6, #2
 8008342:	4463      	add	r3, ip
 8008344:	1a5b      	subs	r3, r3, r1
 8008346:	b2a4      	uxth	r4, r4
 8008348:	fbb3 f0f8 	udiv	r0, r3, r8
 800834c:	fb08 3310 	mls	r3, r8, r0, r3
 8008350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008354:	fb00 f707 	mul.w	r7, r0, r7
 8008358:	42a7      	cmp	r7, r4
 800835a:	d90a      	bls.n	8008372 <__udivmoddi4+0x92>
 800835c:	eb1c 0404 	adds.w	r4, ip, r4
 8008360:	f100 33ff 	add.w	r3, r0, #4294967295
 8008364:	f080 810a 	bcs.w	800857c <__udivmoddi4+0x29c>
 8008368:	42a7      	cmp	r7, r4
 800836a:	f240 8107 	bls.w	800857c <__udivmoddi4+0x29c>
 800836e:	4464      	add	r4, ip
 8008370:	3802      	subs	r0, #2
 8008372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008376:	1be4      	subs	r4, r4, r7
 8008378:	2600      	movs	r6, #0
 800837a:	b11d      	cbz	r5, 8008384 <__udivmoddi4+0xa4>
 800837c:	40d4      	lsrs	r4, r2
 800837e:	2300      	movs	r3, #0
 8008380:	e9c5 4300 	strd	r4, r3, [r5]
 8008384:	4631      	mov	r1, r6
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	428b      	cmp	r3, r1
 800838c:	d909      	bls.n	80083a2 <__udivmoddi4+0xc2>
 800838e:	2d00      	cmp	r5, #0
 8008390:	f000 80ef 	beq.w	8008572 <__udivmoddi4+0x292>
 8008394:	2600      	movs	r6, #0
 8008396:	e9c5 0100 	strd	r0, r1, [r5]
 800839a:	4630      	mov	r0, r6
 800839c:	4631      	mov	r1, r6
 800839e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a2:	fab3 f683 	clz	r6, r3
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	d14a      	bne.n	8008440 <__udivmoddi4+0x160>
 80083aa:	428b      	cmp	r3, r1
 80083ac:	d302      	bcc.n	80083b4 <__udivmoddi4+0xd4>
 80083ae:	4282      	cmp	r2, r0
 80083b0:	f200 80f9 	bhi.w	80085a6 <__udivmoddi4+0x2c6>
 80083b4:	1a84      	subs	r4, r0, r2
 80083b6:	eb61 0303 	sbc.w	r3, r1, r3
 80083ba:	2001      	movs	r0, #1
 80083bc:	469e      	mov	lr, r3
 80083be:	2d00      	cmp	r5, #0
 80083c0:	d0e0      	beq.n	8008384 <__udivmoddi4+0xa4>
 80083c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80083c6:	e7dd      	b.n	8008384 <__udivmoddi4+0xa4>
 80083c8:	b902      	cbnz	r2, 80083cc <__udivmoddi4+0xec>
 80083ca:	deff      	udf	#255	; 0xff
 80083cc:	fab2 f282 	clz	r2, r2
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	f040 8092 	bne.w	80084fa <__udivmoddi4+0x21a>
 80083d6:	eba1 010c 	sub.w	r1, r1, ip
 80083da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083de:	fa1f fe8c 	uxth.w	lr, ip
 80083e2:	2601      	movs	r6, #1
 80083e4:	0c20      	lsrs	r0, r4, #16
 80083e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083ea:	fb07 1113 	mls	r1, r7, r3, r1
 80083ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083f2:	fb0e f003 	mul.w	r0, lr, r3
 80083f6:	4288      	cmp	r0, r1
 80083f8:	d908      	bls.n	800840c <__udivmoddi4+0x12c>
 80083fa:	eb1c 0101 	adds.w	r1, ip, r1
 80083fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8008402:	d202      	bcs.n	800840a <__udivmoddi4+0x12a>
 8008404:	4288      	cmp	r0, r1
 8008406:	f200 80cb 	bhi.w	80085a0 <__udivmoddi4+0x2c0>
 800840a:	4643      	mov	r3, r8
 800840c:	1a09      	subs	r1, r1, r0
 800840e:	b2a4      	uxth	r4, r4
 8008410:	fbb1 f0f7 	udiv	r0, r1, r7
 8008414:	fb07 1110 	mls	r1, r7, r0, r1
 8008418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800841c:	fb0e fe00 	mul.w	lr, lr, r0
 8008420:	45a6      	cmp	lr, r4
 8008422:	d908      	bls.n	8008436 <__udivmoddi4+0x156>
 8008424:	eb1c 0404 	adds.w	r4, ip, r4
 8008428:	f100 31ff 	add.w	r1, r0, #4294967295
 800842c:	d202      	bcs.n	8008434 <__udivmoddi4+0x154>
 800842e:	45a6      	cmp	lr, r4
 8008430:	f200 80bb 	bhi.w	80085aa <__udivmoddi4+0x2ca>
 8008434:	4608      	mov	r0, r1
 8008436:	eba4 040e 	sub.w	r4, r4, lr
 800843a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800843e:	e79c      	b.n	800837a <__udivmoddi4+0x9a>
 8008440:	f1c6 0720 	rsb	r7, r6, #32
 8008444:	40b3      	lsls	r3, r6
 8008446:	fa22 fc07 	lsr.w	ip, r2, r7
 800844a:	ea4c 0c03 	orr.w	ip, ip, r3
 800844e:	fa20 f407 	lsr.w	r4, r0, r7
 8008452:	fa01 f306 	lsl.w	r3, r1, r6
 8008456:	431c      	orrs	r4, r3
 8008458:	40f9      	lsrs	r1, r7
 800845a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800845e:	fa00 f306 	lsl.w	r3, r0, r6
 8008462:	fbb1 f8f9 	udiv	r8, r1, r9
 8008466:	0c20      	lsrs	r0, r4, #16
 8008468:	fa1f fe8c 	uxth.w	lr, ip
 800846c:	fb09 1118 	mls	r1, r9, r8, r1
 8008470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008474:	fb08 f00e 	mul.w	r0, r8, lr
 8008478:	4288      	cmp	r0, r1
 800847a:	fa02 f206 	lsl.w	r2, r2, r6
 800847e:	d90b      	bls.n	8008498 <__udivmoddi4+0x1b8>
 8008480:	eb1c 0101 	adds.w	r1, ip, r1
 8008484:	f108 3aff 	add.w	sl, r8, #4294967295
 8008488:	f080 8088 	bcs.w	800859c <__udivmoddi4+0x2bc>
 800848c:	4288      	cmp	r0, r1
 800848e:	f240 8085 	bls.w	800859c <__udivmoddi4+0x2bc>
 8008492:	f1a8 0802 	sub.w	r8, r8, #2
 8008496:	4461      	add	r1, ip
 8008498:	1a09      	subs	r1, r1, r0
 800849a:	b2a4      	uxth	r4, r4
 800849c:	fbb1 f0f9 	udiv	r0, r1, r9
 80084a0:	fb09 1110 	mls	r1, r9, r0, r1
 80084a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80084a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80084ac:	458e      	cmp	lr, r1
 80084ae:	d908      	bls.n	80084c2 <__udivmoddi4+0x1e2>
 80084b0:	eb1c 0101 	adds.w	r1, ip, r1
 80084b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80084b8:	d26c      	bcs.n	8008594 <__udivmoddi4+0x2b4>
 80084ba:	458e      	cmp	lr, r1
 80084bc:	d96a      	bls.n	8008594 <__udivmoddi4+0x2b4>
 80084be:	3802      	subs	r0, #2
 80084c0:	4461      	add	r1, ip
 80084c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80084c6:	fba0 9402 	umull	r9, r4, r0, r2
 80084ca:	eba1 010e 	sub.w	r1, r1, lr
 80084ce:	42a1      	cmp	r1, r4
 80084d0:	46c8      	mov	r8, r9
 80084d2:	46a6      	mov	lr, r4
 80084d4:	d356      	bcc.n	8008584 <__udivmoddi4+0x2a4>
 80084d6:	d053      	beq.n	8008580 <__udivmoddi4+0x2a0>
 80084d8:	b15d      	cbz	r5, 80084f2 <__udivmoddi4+0x212>
 80084da:	ebb3 0208 	subs.w	r2, r3, r8
 80084de:	eb61 010e 	sbc.w	r1, r1, lr
 80084e2:	fa01 f707 	lsl.w	r7, r1, r7
 80084e6:	fa22 f306 	lsr.w	r3, r2, r6
 80084ea:	40f1      	lsrs	r1, r6
 80084ec:	431f      	orrs	r7, r3
 80084ee:	e9c5 7100 	strd	r7, r1, [r5]
 80084f2:	2600      	movs	r6, #0
 80084f4:	4631      	mov	r1, r6
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	f1c2 0320 	rsb	r3, r2, #32
 80084fe:	40d8      	lsrs	r0, r3
 8008500:	fa0c fc02 	lsl.w	ip, ip, r2
 8008504:	fa21 f303 	lsr.w	r3, r1, r3
 8008508:	4091      	lsls	r1, r2
 800850a:	4301      	orrs	r1, r0
 800850c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008510:	fa1f fe8c 	uxth.w	lr, ip
 8008514:	fbb3 f0f7 	udiv	r0, r3, r7
 8008518:	fb07 3610 	mls	r6, r7, r0, r3
 800851c:	0c0b      	lsrs	r3, r1, #16
 800851e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008522:	fb00 f60e 	mul.w	r6, r0, lr
 8008526:	429e      	cmp	r6, r3
 8008528:	fa04 f402 	lsl.w	r4, r4, r2
 800852c:	d908      	bls.n	8008540 <__udivmoddi4+0x260>
 800852e:	eb1c 0303 	adds.w	r3, ip, r3
 8008532:	f100 38ff 	add.w	r8, r0, #4294967295
 8008536:	d22f      	bcs.n	8008598 <__udivmoddi4+0x2b8>
 8008538:	429e      	cmp	r6, r3
 800853a:	d92d      	bls.n	8008598 <__udivmoddi4+0x2b8>
 800853c:	3802      	subs	r0, #2
 800853e:	4463      	add	r3, ip
 8008540:	1b9b      	subs	r3, r3, r6
 8008542:	b289      	uxth	r1, r1
 8008544:	fbb3 f6f7 	udiv	r6, r3, r7
 8008548:	fb07 3316 	mls	r3, r7, r6, r3
 800854c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008550:	fb06 f30e 	mul.w	r3, r6, lr
 8008554:	428b      	cmp	r3, r1
 8008556:	d908      	bls.n	800856a <__udivmoddi4+0x28a>
 8008558:	eb1c 0101 	adds.w	r1, ip, r1
 800855c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008560:	d216      	bcs.n	8008590 <__udivmoddi4+0x2b0>
 8008562:	428b      	cmp	r3, r1
 8008564:	d914      	bls.n	8008590 <__udivmoddi4+0x2b0>
 8008566:	3e02      	subs	r6, #2
 8008568:	4461      	add	r1, ip
 800856a:	1ac9      	subs	r1, r1, r3
 800856c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008570:	e738      	b.n	80083e4 <__udivmoddi4+0x104>
 8008572:	462e      	mov	r6, r5
 8008574:	4628      	mov	r0, r5
 8008576:	e705      	b.n	8008384 <__udivmoddi4+0xa4>
 8008578:	4606      	mov	r6, r0
 800857a:	e6e3      	b.n	8008344 <__udivmoddi4+0x64>
 800857c:	4618      	mov	r0, r3
 800857e:	e6f8      	b.n	8008372 <__udivmoddi4+0x92>
 8008580:	454b      	cmp	r3, r9
 8008582:	d2a9      	bcs.n	80084d8 <__udivmoddi4+0x1f8>
 8008584:	ebb9 0802 	subs.w	r8, r9, r2
 8008588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800858c:	3801      	subs	r0, #1
 800858e:	e7a3      	b.n	80084d8 <__udivmoddi4+0x1f8>
 8008590:	4646      	mov	r6, r8
 8008592:	e7ea      	b.n	800856a <__udivmoddi4+0x28a>
 8008594:	4620      	mov	r0, r4
 8008596:	e794      	b.n	80084c2 <__udivmoddi4+0x1e2>
 8008598:	4640      	mov	r0, r8
 800859a:	e7d1      	b.n	8008540 <__udivmoddi4+0x260>
 800859c:	46d0      	mov	r8, sl
 800859e:	e77b      	b.n	8008498 <__udivmoddi4+0x1b8>
 80085a0:	3b02      	subs	r3, #2
 80085a2:	4461      	add	r1, ip
 80085a4:	e732      	b.n	800840c <__udivmoddi4+0x12c>
 80085a6:	4630      	mov	r0, r6
 80085a8:	e709      	b.n	80083be <__udivmoddi4+0xde>
 80085aa:	4464      	add	r4, ip
 80085ac:	3802      	subs	r0, #2
 80085ae:	e742      	b.n	8008436 <__udivmoddi4+0x156>

080085b0 <__aeabi_idiv0>:
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop

080085b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f103 0208 	add.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f04f 32ff 	mov.w	r2, #4294967295
 80085cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f103 0208 	add.w	r2, r3, #8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f103 0208 	add.w	r2, r3, #8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800860e:	b480      	push	{r7}
 8008610:	b085      	sub	sp, #20
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008656:	b480      	push	{r7}
 8008658:	b085      	sub	sp, #20
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866c:	d103      	bne.n	8008676 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e00c      	b.n	8008690 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3308      	adds	r3, #8
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e002      	b.n	8008684 <vListInsert+0x2e>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	429a      	cmp	r2, r3
 800868e:	d2f6      	bcs.n	800867e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	601a      	str	r2, [r3, #0]
}
 80086bc:	bf00      	nop
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6892      	ldr	r2, [r2, #8]
 80086de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6852      	ldr	r2, [r2, #4]
 80086e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d103      	bne.n	80086fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	1e5a      	subs	r2, r3, #1
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008726:	2301      	movs	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10a      	bne.n	800874a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008746:	bf00      	nop
 8008748:	e7fe      	b.n	8008748 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d052      	beq.n	80087f6 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8008754:	2b00      	cmp	r3, #0
 8008756:	d04e      	beq.n	80087f6 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008760:	2100      	movs	r1, #0
 8008762:	fba3 2302 	umull	r2, r3, r3, r2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d000      	beq.n	800876c <xQueueGenericReset+0x50>
 800876a:	2101      	movs	r1, #1
 800876c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800876e:	2b00      	cmp	r3, #0
 8008770:	d141      	bne.n	80087f6 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8008772:	f002 f8d1 	bl	800a918 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877e:	6939      	ldr	r1, [r7, #16]
 8008780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	441a      	add	r2, r3
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	2200      	movs	r2, #0
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a2:	3b01      	subs	r3, #1
 80087a4:	6939      	ldr	r1, [r7, #16]
 80087a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	441a      	add	r2, r3
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	22ff      	movs	r2, #255	; 0xff
 80087b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d109      	bne.n	80087dc <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00f      	beq.n	80087f0 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	3310      	adds	r3, #16
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 f87d 	bl	80098d4 <xTaskRemoveFromEventList>
 80087da:	e009      	b.n	80087f0 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	3310      	adds	r3, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fee7 	bl	80085b4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	3324      	adds	r3, #36	; 0x24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff fee2 	bl	80085b4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80087f0:	f002 f8c2 	bl	800a978 <vPortExitCritical>
 80087f4:	e001      	b.n	80087fa <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <xQueueGenericReset+0xfa>
        __asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	60bb      	str	r3, [r7, #8]
    }
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008816:	697b      	ldr	r3, [r7, #20]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008820:	b580      	push	{r7, lr}
 8008822:	b08a      	sub	sp, #40	; 0x28
 8008824:	af02      	add	r7, sp, #8
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02e      	beq.n	8008896 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008838:	2100      	movs	r1, #0
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	fba3 2302 	umull	r2, r3, r3, r2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d000      	beq.n	8008848 <xQueueGenericCreate+0x28>
 8008846:	2101      	movs	r1, #1
 8008848:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800884a:	2b00      	cmp	r3, #0
 800884c:	d123      	bne.n	8008896 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008856:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800885a:	d81c      	bhi.n	8008896 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	fb02 f303 	mul.w	r3, r2, r3
 8008864:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	3350      	adds	r3, #80	; 0x50
 800886a:	4618      	mov	r0, r3
 800886c:	f002 f976 	bl	800ab5c <pvPortMalloc>
 8008870:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01c      	beq.n	80088b2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	3350      	adds	r3, #80	; 0x50
 8008880:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008882:	79fa      	ldrb	r2, [r7, #7]
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	4613      	mov	r3, r2
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f814 	bl	80088bc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008894:	e00d      	b.n	80088b2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueGenericCreate+0x92>
        __asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	613b      	str	r3, [r7, #16]
    }
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80088b2:	69fb      	ldr	r3, [r7, #28]
    }
 80088b4:	4618      	mov	r0, r3
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e002      	b.n	80088de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088ea:	2101      	movs	r1, #1
 80088ec:	69b8      	ldr	r0, [r7, #24]
 80088ee:	f7ff ff15 	bl	800871c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00e      	beq.n	800892e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008922:	2300      	movs	r3, #0
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f81d 	bl	8008968 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af00      	add	r7, sp, #0
 800893c:	4603      	mov	r3, r0
 800893e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008940:	2301      	movs	r3, #1
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	2300      	movs	r3, #0
 8008946:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	461a      	mov	r2, r3
 800894c:	6939      	ldr	r1, [r7, #16]
 800894e:	6978      	ldr	r0, [r7, #20]
 8008950:	f7ff ff66 	bl	8008820 <xQueueGenericCreate>
 8008954:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7ff ffd3 	bl	8008902 <prvInitialiseMutex>

        return xNewQueue;
 800895c:	68fb      	ldr	r3, [r7, #12]
    }
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	; 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008976:	2300      	movs	r3, #0
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <xQueueGenericSend+0x32>
        __asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <xQueueGenericSend+0x40>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <xQueueGenericSend+0x44>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <xQueueGenericSend+0x46>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <xQueueGenericSend+0x60>
        __asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d103      	bne.n	80089d6 <xQueueGenericSend+0x6e>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <xQueueGenericSend+0x72>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <xQueueGenericSend+0x74>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xQueueGenericSend+0x8e>
        __asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	623b      	str	r3, [r7, #32]
    }
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089f6:	f001 f903 	bl	8009c00 <xTaskGetSchedulerState>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <xQueueGenericSend+0x9e>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <xQueueGenericSend+0xa2>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueGenericSend+0xa4>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <xQueueGenericSend+0xbe>
        __asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	61fb      	str	r3, [r7, #28]
    }
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008a26:	f001 ff77 	bl	800a918 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d302      	bcc.n	8008a3c <xQueueGenericSend+0xd4>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d112      	bne.n	8008a62 <xQueueGenericSend+0xfa>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a42:	f000 f9fd 	bl	8008e40 <prvCopyDataToQueue>
 8008a46:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <xQueueGenericSend+0xf2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	3324      	adds	r3, #36	; 0x24
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 ff3d 	bl	80098d4 <xTaskRemoveFromEventList>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008a5a:	f001 ff8d 	bl	800a978 <vPortExitCritical>
                return pdPASS;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e062      	b.n	8008b28 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d103      	bne.n	8008a70 <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008a68:	f001 ff86 	bl	800a978 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e05b      	b.n	8008b28 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008a76:	f107 0314 	add.w	r3, r7, #20
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 ff8c 	bl	8009998 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008a84:	f001 ff78 	bl	800a978 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008a88:	f000 fd2a 	bl	80094e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008a8c:	f001 ff44 	bl	800a918 <vPortEnterCritical>
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d103      	bne.n	8008aa6 <xQueueGenericSend+0x13e>
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aac:	b25b      	sxtb	r3, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d103      	bne.n	8008abc <xQueueGenericSend+0x154>
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008abc:	f001 ff5c 	bl	800a978 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ac0:	1d3a      	adds	r2, r7, #4
 8008ac2:	f107 0314 	add.w	r3, r7, #20
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 ff7b 	bl	80099c4 <xTaskCheckForTimeOut>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d123      	bne.n	8008b1c <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ad6:	f000 faab 	bl	8009030 <prvIsQueueFull>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d017      	beq.n	8008b10 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	3310      	adds	r3, #16
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fea3 	bl	8009834 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008af0:	f000 fa36 	bl	8008f60 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008af4:	f000 fd02 	bl	80094fc <xTaskResumeAll>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d193      	bne.n	8008a26 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8008afe:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <xQueueGenericSend+0x1c8>)
 8008b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	e78a      	b.n	8008a26 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b12:	f000 fa25 	bl	8008f60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008b16:	f000 fcf1 	bl	80094fc <xTaskResumeAll>
 8008b1a:	e784      	b.n	8008a26 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b1e:	f000 fa1f 	bl	8008f60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008b22:	f000 fceb 	bl	80094fc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8008b26:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3738      	adds	r7, #56	; 0x38
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b092      	sub	sp, #72	; 0x48
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8008b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <xQueueGenericSendFromISR+0x3c>
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <xQueueGenericSendFromISR+0x40>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <xQueueGenericSendFromISR+0x42>
 8008b74:	2300      	movs	r3, #0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d103      	bne.n	8008b9e <xQueueGenericSendFromISR+0x6a>
 8008b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <xQueueGenericSendFromISR+0x6e>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <xQueueGenericSendFromISR+0x70>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bbe:	f001 ff8d 	bl	800aadc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8008bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	623a      	str	r2, [r7, #32]
 8008bd8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8008bda:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d302      	bcc.n	8008bf0 <xQueueGenericSendFromISR+0xbc>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d146      	bne.n	8008c7e <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c06:	f000 f91b 	bl	8008e40 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8008c0a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d112      	bne.n	8008c3a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02d      	beq.n	8008c78 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c1e:	3324      	adds	r3, #36	; 0x24
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 fe57 	bl	80098d4 <xTaskRemoveFromEventList>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d025      	beq.n	8008c78 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d022      	beq.n	8008c78 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e01e      	b.n	8008c78 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8008c3a:	f000 fcfd 	bl	8009638 <uxTaskGetNumberOfTasks>
 8008c3e:	6338      	str	r0, [r7, #48]	; 0x30
 8008c40:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d916      	bls.n	8008c78 <xQueueGenericSendFromISR+0x144>
 8008c4a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c50:	d10a      	bne.n	8008c68 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	61bb      	str	r3, [r7, #24]
    }
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <xQueueGenericSendFromISR+0x132>
 8008c68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	b25a      	sxtb	r2, r3
 8008c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8008c7c:	e001      	b.n	8008c82 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	647b      	str	r3, [r7, #68]	; 0x44
 8008c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c84:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008c8c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3748      	adds	r7, #72	; 0x48
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08c      	sub	sp, #48	; 0x30
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xQueueReceive+0x30>
        __asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	623b      	str	r3, [r7, #32]
    }
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d103      	bne.n	8008cd6 <xQueueReceive+0x3e>
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <xQueueReceive+0x42>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <xQueueReceive+0x44>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <xQueueReceive+0x5e>
        __asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	61fb      	str	r3, [r7, #28]
    }
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cf6:	f000 ff83 	bl	8009c00 <xTaskGetSchedulerState>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <xQueueReceive+0x6e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <xQueueReceive+0x72>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueReceive+0x74>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xQueueReceive+0x8e>
        __asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	61bb      	str	r3, [r7, #24]
    }
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008d26:	f001 fdf7 	bl	800a918 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d014      	beq.n	8008d60 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d3a:	f000 f8eb 	bl	8008f14 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	3310      	adds	r3, #16
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fdbe 	bl	80098d4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008d58:	f001 fe0e 	bl	800a978 <vPortExitCritical>
                return pdPASS;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e069      	b.n	8008e34 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d103      	bne.n	8008d6e <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008d66:	f001 fe07 	bl	800a978 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e062      	b.n	8008e34 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008d74:	f107 0310 	add.w	r3, r7, #16
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fe0d 	bl	8009998 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008d82:	f001 fdf9 	bl	800a978 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008d86:	f000 fbab 	bl	80094e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008d8a:	f001 fdc5 	bl	800a918 <vPortEnterCritical>
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d94:	b25b      	sxtb	r3, r3
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9a:	d103      	bne.n	8008da4 <xQueueReceive+0x10c>
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008daa:	b25b      	sxtb	r3, r3
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	d103      	bne.n	8008dba <xQueueReceive+0x122>
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dba:	f001 fddd 	bl	800a978 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dbe:	1d3a      	adds	r2, r7, #4
 8008dc0:	f107 0310 	add.w	r3, r7, #16
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fdfc 	bl	80099c4 <xTaskCheckForTimeOut>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d123      	bne.n	8008e1a <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd4:	f000 f916 	bl	8009004 <prvIsQueueEmpty>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d017      	beq.n	8008e0e <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	3324      	adds	r3, #36	; 0x24
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fd24 	bl	8009834 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dee:	f000 f8b7 	bl	8008f60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008df2:	f000 fb83 	bl	80094fc <xTaskResumeAll>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d194      	bne.n	8008d26 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8008dfc:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <xQueueReceive+0x1a4>)
 8008dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	e78b      	b.n	8008d26 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e10:	f000 f8a6 	bl	8008f60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008e14:	f000 fb72 	bl	80094fc <xTaskResumeAll>
 8008e18:	e785      	b.n	8008d26 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e1c:	f000 f8a0 	bl	8008f60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008e20:	f000 fb6c 	bl	80094fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e26:	f000 f8ed 	bl	8009004 <prvIsQueueEmpty>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f43f af7a 	beq.w	8008d26 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8008e32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3730      	adds	r7, #48	; 0x30
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10d      	bne.n	8008e7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d14d      	bne.n	8008f02 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fee6 	bl	8009c3c <xTaskPriorityDisinherit>
 8008e70:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	e043      	b.n	8008f02 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d119      	bne.n	8008eb4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6858      	ldr	r0, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	461a      	mov	r2, r3
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	f006 fd6c 	bl	800f968 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e98:	441a      	add	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d32b      	bcc.n	8008f02 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	605a      	str	r2, [r3, #4]
 8008eb2:	e026      	b.n	8008f02 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	68d8      	ldr	r0, [r3, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	f006 fd52 	bl	800f968 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	425b      	negs	r3, r3
 8008ece:	441a      	add	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d207      	bcs.n	8008ef0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee8:	425b      	negs	r3, r3
 8008eea:	441a      	add	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d105      	bne.n	8008f02 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8008f0a:	697b      	ldr	r3, [r7, #20]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d018      	beq.n	8008f58 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	441a      	add	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d303      	bcc.n	8008f48 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68d9      	ldr	r1, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	461a      	mov	r2, r3
 8008f52:	6838      	ldr	r0, [r7, #0]
 8008f54:	f006 fd08 	bl	800f968 <memcpy>
    }
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008f68:	f001 fcd6 	bl	800a918 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f72:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f74:	e011      	b.n	8008f9a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d012      	beq.n	8008fa4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3324      	adds	r3, #36	; 0x24
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fca6 	bl	80098d4 <xTaskRemoveFromEventList>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008f8e:	f000 fd7f 	bl	8009a90 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dce9      	bgt.n	8008f76 <prvUnlockQueue+0x16>
 8008fa2:	e000      	b.n	8008fa6 <prvUnlockQueue+0x46>
                    break;
 8008fa4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	22ff      	movs	r2, #255	; 0xff
 8008faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8008fae:	f001 fce3 	bl	800a978 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008fb2:	f001 fcb1 	bl	800a918 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fbc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fbe:	e011      	b.n	8008fe4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d012      	beq.n	8008fee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3310      	adds	r3, #16
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fc81 	bl	80098d4 <xTaskRemoveFromEventList>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008fd8:	f000 fd5a 	bl	8009a90 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dce9      	bgt.n	8008fc0 <prvUnlockQueue+0x60>
 8008fec:	e000      	b.n	8008ff0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008fee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	22ff      	movs	r2, #255	; 0xff
 8008ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8008ff8:	f001 fcbe 	bl	800a978 <vPortExitCritical>
}
 8008ffc:	bf00      	nop
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800900c:	f001 fc84 	bl	800a918 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009014:	2b00      	cmp	r3, #0
 8009016:	d102      	bne.n	800901e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009018:	2301      	movs	r3, #1
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	e001      	b.n	8009022 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009022:	f001 fca9 	bl	800a978 <vPortExitCritical>

    return xReturn;
 8009026:	68fb      	ldr	r3, [r7, #12]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009038:	f001 fc6e 	bl	800a918 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009044:	429a      	cmp	r2, r3
 8009046:	d102      	bne.n	800904e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009048:	2301      	movs	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e001      	b.n	8009052 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009052:	f001 fc91 	bl	800a978 <vPortExitCritical>

    return xReturn;
 8009056:	68fb      	ldr	r3, [r7, #12]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	60fb      	str	r3, [r7, #12]
    }
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d024      	beq.n	80090da <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	e01e      	b.n	80090d4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8009096:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <vQueueAddToRegistry+0x98>)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4413      	add	r3, r2
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d105      	bne.n	80090b2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <vQueueAddToRegistry+0x98>)
 80090ac:	4413      	add	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]
                    break;
 80090b0:	e013      	b.n	80090da <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <vQueueAddToRegistry+0x6e>
 80090b8:	4a0f      	ldr	r2, [pc, #60]	; (80090f8 <vQueueAddToRegistry+0x98>)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4a0b      	ldr	r2, [pc, #44]	; (80090f8 <vQueueAddToRegistry+0x98>)
 80090ca:	4413      	add	r3, r2
 80090cc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	3301      	adds	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2b07      	cmp	r3, #7
 80090d8:	d9dd      	bls.n	8009096 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	20000094 	.word	0x20000094

080090fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800910c:	f001 fc04 	bl	800a918 <vPortEnterCritical>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009116:	b25b      	sxtb	r3, r3
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d103      	bne.n	8009126 <vQueueWaitForMessageRestricted+0x2a>
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912c:	b25b      	sxtb	r3, r3
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009132:	d103      	bne.n	800913c <vQueueWaitForMessageRestricted+0x40>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800913c:	f001 fc1c 	bl	800a978 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3324      	adds	r3, #36	; 0x24
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fb93 	bl	800987c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009156:	6978      	ldr	r0, [r7, #20]
 8009158:	f7ff ff02 	bl	8008f60 <prvUnlockQueue>
    }
 800915c:	bf00      	nop
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009164:	b580      	push	{r7, lr}
 8009166:	b08c      	sub	sp, #48	; 0x30
 8009168:	af04      	add	r7, sp, #16
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	4613      	mov	r3, r2
 8009172:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4618      	mov	r0, r3
 800917a:	f001 fcef 	bl	800ab5c <pvPortMalloc>
 800917e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00e      	beq.n	80091a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009186:	2058      	movs	r0, #88	; 0x58
 8009188:	f001 fce8 	bl	800ab5c <pvPortMalloc>
 800918c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	631a      	str	r2, [r3, #48]	; 0x30
 800919a:	e005      	b.n	80091a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800919c:	6978      	ldr	r0, [r7, #20]
 800919e:	f001 fd97 	bl	800acd0 <vPortFree>
 80091a2:	e001      	b.n	80091a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d013      	beq.n	80091d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091ae:	88fa      	ldrh	r2, [r7, #6]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	9302      	str	r3, [sp, #8]
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f80e 	bl	80091e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80091ca:	69f8      	ldr	r0, [r7, #28]
 80091cc:	f000 f8a2 	bl	8009314 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80091d0:	2301      	movs	r3, #1
 80091d2:	61bb      	str	r3, [r7, #24]
 80091d4:	e002      	b.n	80091dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091d6:	f04f 33ff 	mov.w	r3, #4294967295
 80091da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80091dc:	69bb      	ldr	r3, [r7, #24]
    }
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b088      	sub	sp, #32
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
 80091f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	461a      	mov	r2, r3
 80091fe:	21a5      	movs	r1, #165	; 0xa5
 8009200:	f006 fbc0 	bl	800f984 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800920e:	3b01      	subs	r3, #1
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f023 0307 	bic.w	r3, r3, #7
 800921c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <prvInitialiseNewTask+0x58>
        __asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	617b      	str	r3, [r7, #20]
    }
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01f      	beq.n	8009284 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]
 8009248:	e012      	b.n	8009270 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	4413      	add	r3, r2
 8009250:	7819      	ldrb	r1, [r3, #0]
 8009252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	4413      	add	r3, r2
 8009258:	3334      	adds	r3, #52	; 0x34
 800925a:	460a      	mov	r2, r1
 800925c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	4413      	add	r3, r2
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d006      	beq.n	8009278 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	3301      	adds	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b09      	cmp	r3, #9
 8009274:	d9e9      	bls.n	800924a <prvInitialiseNewTask+0x64>
 8009276:	e000      	b.n	800927a <prvInitialiseNewTask+0x94>
            {
                break;
 8009278:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2200      	movs	r2, #0
 800927e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009282:	e003      	b.n	800928c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	2b04      	cmp	r3, #4
 8009290:	d901      	bls.n	8009296 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009292:	2304      	movs	r3, #4
 8009294:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800929a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092a0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	2200      	movs	r2, #0
 80092a6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	3304      	adds	r3, #4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff f9a1 	bl	80085f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	3318      	adds	r3, #24
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff f99c 	bl	80085f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	f1c3 0205 	rsb	r2, r3, #5
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	3350      	adds	r3, #80	; 0x50
 80092d6:	2204      	movs	r2, #4
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f006 fb52 	bl	800f984 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	3354      	adds	r3, #84	; 0x54
 80092e4:	2201      	movs	r2, #1
 80092e6:	2100      	movs	r1, #0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f006 fb4b 	bl	800f984 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	68f9      	ldr	r1, [r7, #12]
 80092f2:	69b8      	ldr	r0, [r7, #24]
 80092f4:	f001 f9e0 	bl	800a6b8 <pxPortInitialiseStack>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009308:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800930a:	bf00      	nop
 800930c:	3720      	adds	r7, #32
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800931c:	f001 fafc 	bl	800a918 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009320:	4b26      	ldr	r3, [pc, #152]	; (80093bc <prvAddNewTaskToReadyList+0xa8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3301      	adds	r3, #1
 8009326:	4a25      	ldr	r2, [pc, #148]	; (80093bc <prvAddNewTaskToReadyList+0xa8>)
 8009328:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800932a:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <prvAddNewTaskToReadyList+0xac>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d109      	bne.n	8009346 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009332:	4a23      	ldr	r2, [pc, #140]	; (80093c0 <prvAddNewTaskToReadyList+0xac>)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009338:	4b20      	ldr	r3, [pc, #128]	; (80093bc <prvAddNewTaskToReadyList+0xa8>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d110      	bne.n	8009362 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009340:	f000 fbc4 	bl	8009acc <prvInitialiseTaskLists>
 8009344:	e00d      	b.n	8009362 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009346:	4b1f      	ldr	r3, [pc, #124]	; (80093c4 <prvAddNewTaskToReadyList+0xb0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800934e:	4b1c      	ldr	r3, [pc, #112]	; (80093c0 <prvAddNewTaskToReadyList+0xac>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	429a      	cmp	r2, r3
 800935a:	d802      	bhi.n	8009362 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800935c:	4a18      	ldr	r2, [pc, #96]	; (80093c0 <prvAddNewTaskToReadyList+0xac>)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009362:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <prvAddNewTaskToReadyList+0xb4>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3301      	adds	r3, #1
 8009368:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <prvAddNewTaskToReadyList+0xb4>)
 800936a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800936c:	4b16      	ldr	r3, [pc, #88]	; (80093c8 <prvAddNewTaskToReadyList+0xb4>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	2201      	movs	r2, #1
 800937a:	409a      	lsls	r2, r3
 800937c:	4b13      	ldr	r3, [pc, #76]	; (80093cc <prvAddNewTaskToReadyList+0xb8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4313      	orrs	r3, r2
 8009382:	4a12      	ldr	r2, [pc, #72]	; (80093cc <prvAddNewTaskToReadyList+0xb8>)
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <prvAddNewTaskToReadyList+0xbc>)
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7ff f936 	bl	800860e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80093a2:	f001 fae9 	bl	800a978 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80093a6:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <prvAddNewTaskToReadyList+0xb0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093ae:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <prvAddNewTaskToReadyList+0xac>)
 80093b0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	200001ac 	.word	0x200001ac
 80093c0:	200000d4 	.word	0x200000d4
 80093c4:	200001b8 	.word	0x200001b8
 80093c8:	200001c8 	.word	0x200001c8
 80093cc:	200001b4 	.word	0x200001b4
 80093d0:	200000d8 	.word	0x200000d8

080093d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d017      	beq.n	8009416 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80093e6:	4b13      	ldr	r3, [pc, #76]	; (8009434 <vTaskDelay+0x60>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <vTaskDelay+0x30>
        __asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60bb      	str	r3, [r7, #8]
    }
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009404:	f000 f86c 	bl	80094e0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009408:	2100      	movs	r1, #0
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fe12 	bl	800a034 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009410:	f000 f874 	bl	80094fc <xTaskResumeAll>
 8009414:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d107      	bne.n	800942c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <vTaskDelay+0x64>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800942c:	bf00      	nop
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	200001d4 	.word	0x200001d4
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8009442:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <vTaskStartScheduler+0x88>)
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	2300      	movs	r3, #0
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	2300      	movs	r3, #0
 800944c:	2282      	movs	r2, #130	; 0x82
 800944e:	491e      	ldr	r1, [pc, #120]	; (80094c8 <vTaskStartScheduler+0x8c>)
 8009450:	481e      	ldr	r0, [pc, #120]	; (80094cc <vTaskStartScheduler+0x90>)
 8009452:	f7ff fe87 	bl	8009164 <xTaskCreate>
 8009456:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d102      	bne.n	8009464 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800945e:	f000 fe4f 	bl	800a100 <xTimerCreateTimerTask>
 8009462:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d116      	bne.n	8009498 <vTaskStartScheduler+0x5c>
        __asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	60bb      	str	r3, [r7, #8]
    }
 800947c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800947e:	4b14      	ldr	r3, [pc, #80]	; (80094d0 <vTaskStartScheduler+0x94>)
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009486:	4b13      	ldr	r3, [pc, #76]	; (80094d4 <vTaskStartScheduler+0x98>)
 8009488:	2201      	movs	r2, #1
 800948a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800948c:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <vTaskStartScheduler+0x9c>)
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009492:	f001 f99f 	bl	800a7d4 <xPortStartScheduler>
 8009496:	e00e      	b.n	80094b6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949e:	d10a      	bne.n	80094b6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	607b      	str	r3, [r7, #4]
    }
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80094b6:	4b09      	ldr	r3, [pc, #36]	; (80094dc <vTaskStartScheduler+0xa0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	200001d0 	.word	0x200001d0
 80094c8:	080108c8 	.word	0x080108c8
 80094cc:	08009aa9 	.word	0x08009aa9
 80094d0:	200001cc 	.word	0x200001cc
 80094d4:	200001b8 	.word	0x200001b8
 80094d8:	200001b0 	.word	0x200001b0
 80094dc:	20000000 	.word	0x20000000

080094e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80094e4:	4b04      	ldr	r3, [pc, #16]	; (80094f8 <vTaskSuspendAll+0x18>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3301      	adds	r3, #1
 80094ea:	4a03      	ldr	r2, [pc, #12]	; (80094f8 <vTaskSuspendAll+0x18>)
 80094ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80094ee:	bf00      	nop
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	200001d4 	.word	0x200001d4

080094fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800950a:	4b3b      	ldr	r3, [pc, #236]	; (80095f8 <xTaskResumeAll+0xfc>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10a      	bne.n	8009528 <xTaskResumeAll+0x2c>
        __asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	603b      	str	r3, [r7, #0]
    }
 8009524:	bf00      	nop
 8009526:	e7fe      	b.n	8009526 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009528:	f001 f9f6 	bl	800a918 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800952c:	4b32      	ldr	r3, [pc, #200]	; (80095f8 <xTaskResumeAll+0xfc>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	4a31      	ldr	r2, [pc, #196]	; (80095f8 <xTaskResumeAll+0xfc>)
 8009534:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009536:	4b30      	ldr	r3, [pc, #192]	; (80095f8 <xTaskResumeAll+0xfc>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d155      	bne.n	80095ea <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800953e:	4b2f      	ldr	r3, [pc, #188]	; (80095fc <xTaskResumeAll+0x100>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d051      	beq.n	80095ea <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009546:	e02e      	b.n	80095a6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009548:	4b2d      	ldr	r3, [pc, #180]	; (8009600 <xTaskResumeAll+0x104>)
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3318      	adds	r3, #24
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff f8b7 	bl	80086c8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3304      	adds	r3, #4
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff f8b2 	bl	80086c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	2201      	movs	r2, #1
 800956a:	409a      	lsls	r2, r3
 800956c:	4b25      	ldr	r3, [pc, #148]	; (8009604 <xTaskResumeAll+0x108>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4313      	orrs	r3, r2
 8009572:	4a24      	ldr	r2, [pc, #144]	; (8009604 <xTaskResumeAll+0x108>)
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4a21      	ldr	r2, [pc, #132]	; (8009608 <xTaskResumeAll+0x10c>)
 8009584:	441a      	add	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f7ff f83e 	bl	800860e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009596:	4b1d      	ldr	r3, [pc, #116]	; (800960c <xTaskResumeAll+0x110>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	429a      	cmp	r2, r3
 800959e:	d302      	bcc.n	80095a6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80095a0:	4b1b      	ldr	r3, [pc, #108]	; (8009610 <xTaskResumeAll+0x114>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095a6:	4b16      	ldr	r3, [pc, #88]	; (8009600 <xTaskResumeAll+0x104>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1cc      	bne.n	8009548 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80095b4:	f000 fb08 	bl	8009bc8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095b8:	4b16      	ldr	r3, [pc, #88]	; (8009614 <xTaskResumeAll+0x118>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80095c4:	f000 f844 	bl	8009650 <xTaskIncrementTick>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80095ce:	4b10      	ldr	r3, [pc, #64]	; (8009610 <xTaskResumeAll+0x114>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f1      	bne.n	80095c4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80095e0:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <xTaskResumeAll+0x118>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80095e6:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <xTaskResumeAll+0x114>)
 80095e8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80095ea:	f001 f9c5 	bl	800a978 <vPortExitCritical>

    return xAlreadyYielded;
 80095ee:	687b      	ldr	r3, [r7, #4]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	200001d4 	.word	0x200001d4
 80095fc:	200001ac 	.word	0x200001ac
 8009600:	2000016c 	.word	0x2000016c
 8009604:	200001b4 	.word	0x200001b4
 8009608:	200000d8 	.word	0x200000d8
 800960c:	200000d4 	.word	0x200000d4
 8009610:	200001c0 	.word	0x200001c0
 8009614:	200001bc 	.word	0x200001bc

08009618 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <xTaskGetTickCount+0x1c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009624:	687b      	ldr	r3, [r7, #4]
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	200001b0 	.word	0x200001b0

08009638 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800963c:	4b03      	ldr	r3, [pc, #12]	; (800964c <uxTaskGetNumberOfTasks+0x14>)
 800963e:	681b      	ldr	r3, [r3, #0]
}
 8009640:	4618      	mov	r0, r3
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	200001ac 	.word	0x200001ac

08009650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800965a:	4b3f      	ldr	r3, [pc, #252]	; (8009758 <xTaskIncrementTick+0x108>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d16f      	bne.n	8009742 <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009662:	4b3e      	ldr	r3, [pc, #248]	; (800975c <xTaskIncrementTick+0x10c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800966a:	4a3c      	ldr	r2, [pc, #240]	; (800975c <xTaskIncrementTick+0x10c>)
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d120      	bne.n	80096b8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8009676:	4b3a      	ldr	r3, [pc, #232]	; (8009760 <xTaskIncrementTick+0x110>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <xTaskIncrementTick+0x46>
        __asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	603b      	str	r3, [r7, #0]
    }
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <xTaskIncrementTick+0x44>
 8009696:	4b32      	ldr	r3, [pc, #200]	; (8009760 <xTaskIncrementTick+0x110>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60fb      	str	r3, [r7, #12]
 800969c:	4b31      	ldr	r3, [pc, #196]	; (8009764 <xTaskIncrementTick+0x114>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a2f      	ldr	r2, [pc, #188]	; (8009760 <xTaskIncrementTick+0x110>)
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4a2f      	ldr	r2, [pc, #188]	; (8009764 <xTaskIncrementTick+0x114>)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	4b2f      	ldr	r3, [pc, #188]	; (8009768 <xTaskIncrementTick+0x118>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3301      	adds	r3, #1
 80096b0:	4a2d      	ldr	r2, [pc, #180]	; (8009768 <xTaskIncrementTick+0x118>)
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	f000 fa88 	bl	8009bc8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80096b8:	4b2c      	ldr	r3, [pc, #176]	; (800976c <xTaskIncrementTick+0x11c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d344      	bcc.n	800974c <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096c2:	4b27      	ldr	r3, [pc, #156]	; (8009760 <xTaskIncrementTick+0x110>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096cc:	4b27      	ldr	r3, [pc, #156]	; (800976c <xTaskIncrementTick+0x11c>)
 80096ce:	f04f 32ff 	mov.w	r2, #4294967295
 80096d2:	601a      	str	r2, [r3, #0]
                    break;
 80096d4:	e03a      	b.n	800974c <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d6:	4b22      	ldr	r3, [pc, #136]	; (8009760 <xTaskIncrementTick+0x110>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d203      	bcs.n	80096f6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80096ee:	4a1f      	ldr	r2, [pc, #124]	; (800976c <xTaskIncrementTick+0x11c>)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096f4:	e02a      	b.n	800974c <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	3304      	adds	r3, #4
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe ffe4 	bl	80086c8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009704:	2b00      	cmp	r3, #0
 8009706:	d004      	beq.n	8009712 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3318      	adds	r3, #24
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe ffdb 	bl	80086c8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	2201      	movs	r2, #1
 8009718:	409a      	lsls	r2, r3
 800971a:	4b15      	ldr	r3, [pc, #84]	; (8009770 <xTaskIncrementTick+0x120>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4313      	orrs	r3, r2
 8009720:	4a13      	ldr	r2, [pc, #76]	; (8009770 <xTaskIncrementTick+0x120>)
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4a10      	ldr	r2, [pc, #64]	; (8009774 <xTaskIncrementTick+0x124>)
 8009732:	441a      	add	r2, r3
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	3304      	adds	r3, #4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe ff67 	bl	800860e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009740:	e7bf      	b.n	80096c2 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009742:	4b0d      	ldr	r3, [pc, #52]	; (8009778 <xTaskIncrementTick+0x128>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3301      	adds	r3, #1
 8009748:	4a0b      	ldr	r2, [pc, #44]	; (8009778 <xTaskIncrementTick+0x128>)
 800974a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800974c:	697b      	ldr	r3, [r7, #20]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	200001d4 	.word	0x200001d4
 800975c:	200001b0 	.word	0x200001b0
 8009760:	20000164 	.word	0x20000164
 8009764:	20000168 	.word	0x20000168
 8009768:	200001c4 	.word	0x200001c4
 800976c:	200001cc 	.word	0x200001cc
 8009770:	200001b4 	.word	0x200001b4
 8009774:	200000d8 	.word	0x200000d8
 8009778:	200001bc 	.word	0x200001bc

0800977c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009782:	4b27      	ldr	r3, [pc, #156]	; (8009820 <vTaskSwitchContext+0xa4>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800978a:	4b26      	ldr	r3, [pc, #152]	; (8009824 <vTaskSwitchContext+0xa8>)
 800978c:	2201      	movs	r2, #1
 800978e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8009790:	e03f      	b.n	8009812 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8009792:	4b24      	ldr	r3, [pc, #144]	; (8009824 <vTaskSwitchContext+0xa8>)
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009798:	4b23      	ldr	r3, [pc, #140]	; (8009828 <vTaskSwitchContext+0xac>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	fab3 f383 	clz	r3, r3
 80097a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	f1c3 031f 	rsb	r3, r3, #31
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	491f      	ldr	r1, [pc, #124]	; (800982c <vTaskSwitchContext+0xb0>)
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10a      	bne.n	80097d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
    }
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <vTaskSwitchContext+0x5a>
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4a12      	ldr	r2, [pc, #72]	; (800982c <vTaskSwitchContext+0xb0>)
 80097e4:	4413      	add	r3, r2
 80097e6:	613b      	str	r3, [r7, #16]
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	605a      	str	r2, [r3, #4]
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3308      	adds	r3, #8
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d104      	bne.n	8009808 <vTaskSwitchContext+0x8c>
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	605a      	str	r2, [r3, #4]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	4a08      	ldr	r2, [pc, #32]	; (8009830 <vTaskSwitchContext+0xb4>)
 8009810:	6013      	str	r3, [r2, #0]
}
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200001d4 	.word	0x200001d4
 8009824:	200001c0 	.word	0x200001c0
 8009828:	200001b4 	.word	0x200001b4
 800982c:	200000d8 	.word	0x200000d8
 8009830:	200000d4 	.word	0x200000d4

08009834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	60fb      	str	r3, [r7, #12]
    }
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800985a:	4b07      	ldr	r3, [pc, #28]	; (8009878 <vTaskPlaceOnEventList+0x44>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3318      	adds	r3, #24
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7fe fef7 	bl	8008656 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009868:	2101      	movs	r1, #1
 800986a:	6838      	ldr	r0, [r7, #0]
 800986c:	f000 fbe2 	bl	800a034 <prvAddCurrentTaskToDelayedList>
}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	200000d4 	.word	0x200000d4

0800987c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	617b      	str	r3, [r7, #20]
    }
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098a4:	4b0a      	ldr	r3, [pc, #40]	; (80098d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3318      	adds	r3, #24
 80098aa:	4619      	mov	r1, r3
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f7fe feae 	bl	800860e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
 80098bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	68b8      	ldr	r0, [r7, #8]
 80098c2:	f000 fbb7 	bl	800a034 <prvAddCurrentTaskToDelayedList>
    }
 80098c6:	bf00      	nop
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	200000d4 	.word	0x200000d4

080098d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	60fb      	str	r3, [r7, #12]
    }
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3318      	adds	r3, #24
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe fedf 	bl	80086c8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800990a:	4b1d      	ldr	r3, [pc, #116]	; (8009980 <xTaskRemoveFromEventList+0xac>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d11c      	bne.n	800994c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	3304      	adds	r3, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fed6 	bl	80086c8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	2201      	movs	r2, #1
 8009922:	409a      	lsls	r2, r3
 8009924:	4b17      	ldr	r3, [pc, #92]	; (8009984 <xTaskRemoveFromEventList+0xb0>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4313      	orrs	r3, r2
 800992a:	4a16      	ldr	r2, [pc, #88]	; (8009984 <xTaskRemoveFromEventList+0xb0>)
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4a13      	ldr	r2, [pc, #76]	; (8009988 <xTaskRemoveFromEventList+0xb4>)
 800993c:	441a      	add	r2, r3
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	3304      	adds	r3, #4
 8009942:	4619      	mov	r1, r3
 8009944:	4610      	mov	r0, r2
 8009946:	f7fe fe62 	bl	800860e <vListInsertEnd>
 800994a:	e005      	b.n	8009958 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	3318      	adds	r3, #24
 8009950:	4619      	mov	r1, r3
 8009952:	480e      	ldr	r0, [pc, #56]	; (800998c <xTaskRemoveFromEventList+0xb8>)
 8009954:	f7fe fe5b 	bl	800860e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <xTaskRemoveFromEventList+0xbc>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	429a      	cmp	r2, r3
 8009964:	d905      	bls.n	8009972 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009966:	2301      	movs	r3, #1
 8009968:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800996a:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <xTaskRemoveFromEventList+0xc0>)
 800996c:	2201      	movs	r2, #1
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	e001      	b.n	8009976 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8009972:	2300      	movs	r3, #0
 8009974:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8009976:	697b      	ldr	r3, [r7, #20]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	200001d4 	.word	0x200001d4
 8009984:	200001b4 	.word	0x200001b4
 8009988:	200000d8 	.word	0x200000d8
 800998c:	2000016c 	.word	0x2000016c
 8009990:	200000d4 	.word	0x200000d4
 8009994:	200001c0 	.word	0x200001c0

08009998 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <vTaskInternalSetTimeOutState+0x24>)
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80099a8:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <vTaskInternalSetTimeOutState+0x28>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	605a      	str	r2, [r3, #4]
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	200001c4 	.word	0x200001c4
 80099c0:	200001b0 	.word	0x200001b0

080099c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	613b      	str	r3, [r7, #16]
    }
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
    }
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8009a06:	f000 ff87 	bl	800a918 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009a0a:	4b1f      	ldr	r3, [pc, #124]	; (8009a88 <xTaskCheckForTimeOut+0xc4>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	69ba      	ldr	r2, [r7, #24]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a22:	d102      	bne.n	8009a2a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	e026      	b.n	8009a78 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	4b17      	ldr	r3, [pc, #92]	; (8009a8c <xTaskCheckForTimeOut+0xc8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d00a      	beq.n	8009a4c <xTaskCheckForTimeOut+0x88>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d305      	bcc.n	8009a4c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	e015      	b.n	8009a78 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d20b      	bcs.n	8009a6e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	1ad2      	subs	r2, r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff ff98 	bl	8009998 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	61fb      	str	r3, [r7, #28]
 8009a6c:	e004      	b.n	8009a78 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009a78:	f000 ff7e 	bl	800a978 <vPortExitCritical>

    return xReturn;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3720      	adds	r7, #32
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	200001b0 	.word	0x200001b0
 8009a8c:	200001c4 	.word	0x200001c4

08009a90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009a94:	4b03      	ldr	r3, [pc, #12]	; (8009aa4 <vTaskMissedYield+0x14>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
}
 8009a9a:	bf00      	nop
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr
 8009aa4:	200001c0 	.word	0x200001c0

08009aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009ab0:	f000 f84c 	bl	8009b4c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8009ab4:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <prvIdleTask+0x20>)
 8009ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009ac4:	e7f4      	b.n	8009ab0 <prvIdleTask+0x8>
 8009ac6:	bf00      	nop
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	607b      	str	r3, [r7, #4]
 8009ad6:	e00c      	b.n	8009af2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4a12      	ldr	r2, [pc, #72]	; (8009b2c <prvInitialiseTaskLists+0x60>)
 8009ae4:	4413      	add	r3, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fd64 	bl	80085b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3301      	adds	r3, #1
 8009af0:	607b      	str	r3, [r7, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	d9ef      	bls.n	8009ad8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009af8:	480d      	ldr	r0, [pc, #52]	; (8009b30 <prvInitialiseTaskLists+0x64>)
 8009afa:	f7fe fd5b 	bl	80085b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009afe:	480d      	ldr	r0, [pc, #52]	; (8009b34 <prvInitialiseTaskLists+0x68>)
 8009b00:	f7fe fd58 	bl	80085b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009b04:	480c      	ldr	r0, [pc, #48]	; (8009b38 <prvInitialiseTaskLists+0x6c>)
 8009b06:	f7fe fd55 	bl	80085b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8009b0a:	480c      	ldr	r0, [pc, #48]	; (8009b3c <prvInitialiseTaskLists+0x70>)
 8009b0c:	f7fe fd52 	bl	80085b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8009b10:	480b      	ldr	r0, [pc, #44]	; (8009b40 <prvInitialiseTaskLists+0x74>)
 8009b12:	f7fe fd4f 	bl	80085b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009b16:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <prvInitialiseTaskLists+0x78>)
 8009b18:	4a05      	ldr	r2, [pc, #20]	; (8009b30 <prvInitialiseTaskLists+0x64>)
 8009b1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <prvInitialiseTaskLists+0x7c>)
 8009b1e:	4a05      	ldr	r2, [pc, #20]	; (8009b34 <prvInitialiseTaskLists+0x68>)
 8009b20:	601a      	str	r2, [r3, #0]
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	200000d8 	.word	0x200000d8
 8009b30:	2000013c 	.word	0x2000013c
 8009b34:	20000150 	.word	0x20000150
 8009b38:	2000016c 	.word	0x2000016c
 8009b3c:	20000180 	.word	0x20000180
 8009b40:	20000198 	.word	0x20000198
 8009b44:	20000164 	.word	0x20000164
 8009b48:	20000168 	.word	0x20000168

08009b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b52:	e019      	b.n	8009b88 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8009b54:	f000 fee0 	bl	800a918 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b58:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <prvCheckTasksWaitingTermination+0x50>)
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3304      	adds	r3, #4
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe fdaf 	bl	80086c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <prvCheckTasksWaitingTermination+0x54>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	4a0b      	ldr	r2, [pc, #44]	; (8009ba0 <prvCheckTasksWaitingTermination+0x54>)
 8009b72:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8009b74:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <prvCheckTasksWaitingTermination+0x58>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	4a0a      	ldr	r2, [pc, #40]	; (8009ba4 <prvCheckTasksWaitingTermination+0x58>)
 8009b7c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8009b7e:	f000 fefb 	bl	800a978 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f810 	bl	8009ba8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b88:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <prvCheckTasksWaitingTermination+0x58>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e1      	bne.n	8009b54 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000180 	.word	0x20000180
 8009ba0:	200001ac 	.word	0x200001ac
 8009ba4:	20000194 	.word	0x20000194

08009ba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 f88b 	bl	800acd0 <vPortFree>
                vPortFree( pxTCB );
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f888 	bl	800acd0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <prvResetNextTaskUnblockTime+0x30>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d104      	bne.n	8009be0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <prvResetNextTaskUnblockTime+0x34>)
 8009bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bdc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009bde:	e005      	b.n	8009bec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <prvResetNextTaskUnblockTime+0x30>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a04      	ldr	r2, [pc, #16]	; (8009bfc <prvResetNextTaskUnblockTime+0x34>)
 8009bea:	6013      	str	r3, [r2, #0]
}
 8009bec:	bf00      	nop
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000164 	.word	0x20000164
 8009bfc:	200001cc 	.word	0x200001cc

08009c00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <xTaskGetSchedulerState+0x34>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	e008      	b.n	8009c26 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <xTaskGetSchedulerState+0x38>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	e001      	b.n	8009c26 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009c22:	2300      	movs	r3, #0
 8009c24:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009c26:	687b      	ldr	r3, [r7, #4]
    }
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	200001b8 	.word	0x200001b8
 8009c38:	200001d4 	.word	0x200001d4

08009c3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d063      	beq.n	8009d1a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009c52:	4b34      	ldr	r3, [pc, #208]	; (8009d24 <xTaskPriorityDisinherit+0xe8>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d00a      	beq.n	8009c72 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	60fb      	str	r3, [r7, #12]
    }
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10a      	bne.n	8009c90 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	60bb      	str	r3, [r7, #8]
    }
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c94:	1e5a      	subs	r2, r3, #1
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d039      	beq.n	8009d1a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d135      	bne.n	8009d1a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe fd08 	bl	80086c8 <uxListRemove>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc8:	43da      	mvns	r2, r3
 8009cca:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <xTaskPriorityDisinherit+0xec>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <xTaskPriorityDisinherit+0xec>)
 8009cd2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce0:	f1c3 0205 	rsb	r2, r3, #5
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	2201      	movs	r2, #1
 8009cee:	409a      	lsls	r2, r3
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <xTaskPriorityDisinherit+0xec>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	4a0c      	ldr	r2, [pc, #48]	; (8009d28 <xTaskPriorityDisinherit+0xec>)
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <xTaskPriorityDisinherit+0xf0>)
 8009d08:	441a      	add	r2, r3
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f7fe fc7c 	bl	800860e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009d16:	2301      	movs	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009d1a:	697b      	ldr	r3, [r7, #20]
    }
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	200000d4 	.word	0x200000d4
 8009d28:	200001b4 	.word	0x200001b4
 8009d2c:	200000d8 	.word	0x200000d8

08009d30 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00a      	beq.n	8009d5a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	613b      	str	r3, [r7, #16]
    }
 8009d56:	bf00      	nop
 8009d58:	e7fe      	b.n	8009d58 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8009d5a:	f000 fddd 	bl	800a918 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8009d5e:	4b32      	ldr	r3, [pc, #200]	; (8009e28 <xTaskGenericNotifyWait+0xf8>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4413      	add	r3, r2
 8009d66:	3354      	adds	r3, #84	; 0x54
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d022      	beq.n	8009db6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8009d70:	4b2d      	ldr	r3, [pc, #180]	; (8009e28 <xTaskGenericNotifyWait+0xf8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	3214      	adds	r2, #20
 8009d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	43d2      	mvns	r2, r2
 8009d80:	4011      	ands	r1, r2
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	3214      	adds	r2, #20
 8009d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8009d8a:	4b27      	ldr	r3, [pc, #156]	; (8009e28 <xTaskGenericNotifyWait+0xf8>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4413      	add	r3, r2
 8009d92:	3354      	adds	r3, #84	; 0x54
 8009d94:	2201      	movs	r2, #1
 8009d96:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00b      	beq.n	8009db6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d9e:	2101      	movs	r1, #1
 8009da0:	6a38      	ldr	r0, [r7, #32]
 8009da2:	f000 f947 	bl	800a034 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8009da6:	4b21      	ldr	r3, [pc, #132]	; (8009e2c <xTaskGenericNotifyWait+0xfc>)
 8009da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009db6:	f000 fddf 	bl	800a978 <vPortExitCritical>

        taskENTER_CRITICAL();
 8009dba:	f000 fdad 	bl	800a918 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d007      	beq.n	8009dd4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8009dc4:	4b18      	ldr	r3, [pc, #96]	; (8009e28 <xTaskGenericNotifyWait+0xf8>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	3214      	adds	r2, #20
 8009dcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8009dd4:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <xTaskGenericNotifyWait+0xf8>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	3354      	adds	r3, #84	; 0x54
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d002      	beq.n	8009dec <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e00e      	b.n	8009e0a <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8009dec:	4b0e      	ldr	r3, [pc, #56]	; (8009e28 <xTaskGenericNotifyWait+0xf8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	3214      	adds	r2, #20
 8009df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	43d2      	mvns	r2, r2
 8009dfc:	4011      	ands	r1, r2
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	3214      	adds	r2, #20
 8009e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8009e0a:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <xTaskGenericNotifyWait+0xf8>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	3354      	adds	r3, #84	; 0x54
 8009e14:	2200      	movs	r2, #0
 8009e16:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8009e18:	f000 fdae 	bl	800a978 <vPortExitCritical>

        return xReturn;
 8009e1c:	697b      	ldr	r3, [r7, #20]
    }
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3718      	adds	r7, #24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	200000d4 	.word	0x200000d4
 8009e2c:	e000ed04 	.word	0xe000ed04

08009e30 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b090      	sub	sp, #64	; 0x40
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e7a:	f000 fe2f 	bl	800aadc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8009e82:	f3ef 8211 	mrs	r2, BASEPRI
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	627a      	str	r2, [r7, #36]	; 0x24
 8009e98:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e9c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8009e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d006      	beq.n	8009eb2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	3214      	adds	r2, #20
 8009eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eb0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3354      	adds	r3, #84	; 0x54
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	3354      	adds	r3, #84	; 0x54
 8009ec8:	2202      	movs	r2, #2
 8009eca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d83b      	bhi.n	8009f4a <xTaskGenericNotifyFromISR+0x11a>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <xTaskGenericNotifyFromISR+0xa8>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f69 	.word	0x08009f69
 8009edc:	08009eed 	.word	0x08009eed
 8009ee0:	08009f09 	.word	0x08009f09
 8009ee4:	08009f21 	.word	0x08009f21
 8009ee8:	08009f2f 	.word	0x08009f2f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	3214      	adds	r2, #20
 8009ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	ea42 0103 	orr.w	r1, r2, r3
 8009efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	3214      	adds	r2, #20
 8009f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009f06:	e032      	b.n	8009f6e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	3214      	adds	r2, #20
 8009f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f12:	1c59      	adds	r1, r3, #1
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	3214      	adds	r2, #20
 8009f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009f1e:	e026      	b.n	8009f6e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	3214      	adds	r2, #20
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009f2c:	e01f      	b.n	8009f6e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d006      	beq.n	8009f44 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	3214      	adds	r2, #20
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8009f42:	e014      	b.n	8009f6e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8009f48:	e011      	b.n	8009f6e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8009f4a:	4b33      	ldr	r3, [pc, #204]	; (800a018 <xTaskGenericNotifyFromISR+0x1e8>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00c      	beq.n	8009f6c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	61fb      	str	r3, [r7, #28]
    }
 8009f64:	bf00      	nop
 8009f66:	e7fe      	b.n	8009f66 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8009f68:	bf00      	nop
 8009f6a:	e000      	b.n	8009f6e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8009f6c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d145      	bne.n	800a002 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	61bb      	str	r3, [r7, #24]
    }
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f94:	4b21      	ldr	r3, [pc, #132]	; (800a01c <xTaskGenericNotifyFromISR+0x1ec>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11c      	bne.n	8009fd6 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fe fb91 	bl	80086c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	2201      	movs	r2, #1
 8009fac:	409a      	lsls	r2, r3
 8009fae:	4b1c      	ldr	r3, [pc, #112]	; (800a020 <xTaskGenericNotifyFromISR+0x1f0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	4a1a      	ldr	r2, [pc, #104]	; (800a020 <xTaskGenericNotifyFromISR+0x1f0>)
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4a17      	ldr	r2, [pc, #92]	; (800a024 <xTaskGenericNotifyFromISR+0x1f4>)
 8009fc6:	441a      	add	r2, r3
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	3304      	adds	r3, #4
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	f7fe fb1d 	bl	800860e <vListInsertEnd>
 8009fd4:	e005      	b.n	8009fe2 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	3318      	adds	r3, #24
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4812      	ldr	r0, [pc, #72]	; (800a028 <xTaskGenericNotifyFromISR+0x1f8>)
 8009fde:	f7fe fb16 	bl	800860e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe6:	4b11      	ldr	r3, [pc, #68]	; (800a02c <xTaskGenericNotifyFromISR+0x1fc>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d908      	bls.n	800a002 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8009ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8009ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <xTaskGenericNotifyFromISR+0x200>)
 8009ffe:	2201      	movs	r2, #1
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a004:	617b      	str	r3, [r7, #20]
        __asm volatile
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f383 8811 	msr	BASEPRI, r3
    }
 800a00c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800a00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800a010:	4618      	mov	r0, r3
 800a012:	3740      	adds	r7, #64	; 0x40
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200001b0 	.word	0x200001b0
 800a01c:	200001d4 	.word	0x200001d4
 800a020:	200001b4 	.word	0x200001b4
 800a024:	200000d8 	.word	0x200000d8
 800a028:	2000016c 	.word	0x2000016c
 800a02c:	200000d4 	.word	0x200000d4
 800a030:	200001c0 	.word	0x200001c0

0800a034 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a03e:	4b29      	ldr	r3, [pc, #164]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a044:	4b28      	ldr	r3, [pc, #160]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3304      	adds	r3, #4
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fb3c 	bl	80086c8 <uxListRemove>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10b      	bne.n	800a06e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	2201      	movs	r2, #1
 800a05e:	fa02 f303 	lsl.w	r3, r2, r3
 800a062:	43da      	mvns	r2, r3
 800a064:	4b21      	ldr	r3, [pc, #132]	; (800a0ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4013      	ands	r3, r2
 800a06a:	4a20      	ldr	r2, [pc, #128]	; (800a0ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800a06c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a074:	d10a      	bne.n	800a08c <prvAddCurrentTaskToDelayedList+0x58>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d007      	beq.n	800a08c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a07c:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3304      	adds	r3, #4
 800a082:	4619      	mov	r1, r3
 800a084:	481a      	ldr	r0, [pc, #104]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a086:	f7fe fac2 	bl	800860e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a08a:	e026      	b.n	800a0da <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4413      	add	r3, r2
 800a092:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a094:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d209      	bcs.n	800a0b8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a4:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7fe fad0 	bl	8008656 <vListInsert>
}
 800a0b6:	e010      	b.n	800a0da <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0b8:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7fe fac6 	bl	8008656 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d202      	bcs.n	800a0da <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800a0d4:	4a09      	ldr	r2, [pc, #36]	; (800a0fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	6013      	str	r3, [r2, #0]
}
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200001b0 	.word	0x200001b0
 800a0e8:	200000d4 	.word	0x200000d4
 800a0ec:	200001b4 	.word	0x200001b4
 800a0f0:	20000198 	.word	0x20000198
 800a0f4:	20000168 	.word	0x20000168
 800a0f8:	20000164 	.word	0x20000164
 800a0fc:	200001cc 	.word	0x200001cc

0800a100 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a106:	2300      	movs	r3, #0
 800a108:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a10a:	f000 fa9f 	bl	800a64c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a10e:	4b11      	ldr	r3, [pc, #68]	; (800a154 <xTimerCreateTimerTask+0x54>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800a116:	4b10      	ldr	r3, [pc, #64]	; (800a158 <xTimerCreateTimerTask+0x58>)
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	2302      	movs	r3, #2
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	2300      	movs	r3, #0
 800a120:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a124:	490d      	ldr	r1, [pc, #52]	; (800a15c <xTimerCreateTimerTask+0x5c>)
 800a126:	480e      	ldr	r0, [pc, #56]	; (800a160 <xTimerCreateTimerTask+0x60>)
 800a128:	f7ff f81c 	bl	8009164 <xTaskCreate>
 800a12c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	603b      	str	r3, [r7, #0]
    }
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a14a:	687b      	ldr	r3, [r7, #4]
    }
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000208 	.word	0x20000208
 800a158:	2000020c 	.word	0x2000020c
 800a15c:	080108d0 	.word	0x080108d0
 800a160:	0800a2b9 	.word	0x0800a2b9

0800a164 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800a164:	b580      	push	{r7, lr}
 800a166:	b088      	sub	sp, #32
 800a168:	af02      	add	r7, sp, #8
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a172:	202c      	movs	r0, #44	; 0x2c
 800a174:	f000 fcf2 	bl	800ab5c <pvPortMalloc>
 800a178:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00d      	beq.n	800a19c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f805 	bl	800a1a6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800a19c:	697b      	ldr	r3, [r7, #20]
        }
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10a      	bne.n	800a1d0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	617b      	str	r3, [r7, #20]
    }
 800a1cc:	bf00      	nop
 800a1ce:	e7fe      	b.n	800a1ce <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800a1d0:	f000 fa3c 	bl	800a64c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	6a3a      	ldr	r2, [r7, #32]
 800a1ea:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe f9ff 	bl	80085f4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d008      	beq.n	800a20e <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a202:	f043 0304 	orr.w	r3, r3, #4
 800a206:	b2da      	uxtb	r2, r3
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800a20e:	bf00      	nop
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a222:	e008      	b.n	800a236 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	4413      	add	r3, r2
 800a22c:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	699a      	ldr	r2, [r3, #24]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	18d1      	adds	r1, r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f8dc 	bl	800a400 <prvInsertTimerInActiveList>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1ea      	bne.n	800a224 <prvReloadTimer+0xe>
        }
    }
 800a24e:	bf00      	nop
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a262:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <prvProcessExpiredTimer+0x5c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3304      	adds	r3, #4
 800a270:	4618      	mov	r0, r3
 800a272:	f7fe fa29 	bl	80086c8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff ffc4 	bl	800a216 <prvReloadTimer>
 800a28e:	e008      	b.n	800a2a2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a296:	f023 0301 	bic.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	4798      	blx	r3
    }
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20000200 	.word	0x20000200

0800a2b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2c0:	f107 0308 	add.w	r3, r7, #8
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 f857 	bl	800a378 <prvGetNextExpireTime>
 800a2ca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 f803 	bl	800a2dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a2d6:	f000 f8d5 	bl	800a484 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2da:	e7f1      	b.n	800a2c0 <prvTimerTask+0x8>

0800a2dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a2e6:	f7ff f8fb 	bl	80094e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2ea:	f107 0308 	add.w	r3, r7, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 f866 	bl	800a3c0 <prvSampleTimeNow>
 800a2f4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d130      	bne.n	800a35e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <prvProcessTimerOrBlockTask+0x3c>
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	429a      	cmp	r2, r3
 800a308:	d806      	bhi.n	800a318 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a30a:	f7ff f8f7 	bl	80094fc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a30e:	68f9      	ldr	r1, [r7, #12]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff ffa1 	bl	800a258 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a316:	e024      	b.n	800a362 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d008      	beq.n	800a330 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a31e:	4b13      	ldr	r3, [pc, #76]	; (800a36c <prvProcessTimerOrBlockTask+0x90>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <prvProcessTimerOrBlockTask+0x50>
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <prvProcessTimerOrBlockTask+0x52>
 800a32c:	2300      	movs	r3, #0
 800a32e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a330:	4b0f      	ldr	r3, [pc, #60]	; (800a370 <prvProcessTimerOrBlockTask+0x94>)
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	4619      	mov	r1, r3
 800a33e:	f7fe fedd 	bl	80090fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a342:	f7ff f8db 	bl	80094fc <xTaskResumeAll>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10a      	bne.n	800a362 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <prvProcessTimerOrBlockTask+0x98>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	f3bf 8f6f 	isb	sy
    }
 800a35c:	e001      	b.n	800a362 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a35e:	f7ff f8cd 	bl	80094fc <xTaskResumeAll>
    }
 800a362:	bf00      	nop
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20000204 	.word	0x20000204
 800a370:	20000208 	.word	0x20000208
 800a374:	e000ed04 	.word	0xe000ed04

0800a378 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a380:	4b0e      	ldr	r3, [pc, #56]	; (800a3bc <prvGetNextExpireTime+0x44>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <prvGetNextExpireTime+0x16>
 800a38a:	2201      	movs	r2, #1
 800a38c:	e000      	b.n	800a390 <prvGetNextExpireTime+0x18>
 800a38e:	2200      	movs	r2, #0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d105      	bne.n	800a3a8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a39c:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <prvGetNextExpireTime+0x44>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	60fb      	str	r3, [r7, #12]
 800a3a6:	e001      	b.n	800a3ac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
    }
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	20000200 	.word	0x20000200

0800a3c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a3c8:	f7ff f926 	bl	8009618 <xTaskGetTickCount>
 800a3cc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <prvSampleTimeNow+0x3c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d205      	bcs.n	800a3e4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a3d8:	f000 f912 	bl	800a600 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	e002      	b.n	800a3ea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a3ea:	4a04      	ldr	r2, [pc, #16]	; (800a3fc <prvSampleTimeNow+0x3c>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
    }
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000210 	.word	0x20000210

0800a400 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	429a      	cmp	r2, r3
 800a424:	d812      	bhi.n	800a44c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	1ad2      	subs	r2, r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	429a      	cmp	r2, r3
 800a432:	d302      	bcc.n	800a43a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a434:	2301      	movs	r3, #1
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	e01b      	b.n	800a472 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a43a:	4b10      	ldr	r3, [pc, #64]	; (800a47c <prvInsertTimerInActiveList+0x7c>)
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3304      	adds	r3, #4
 800a442:	4619      	mov	r1, r3
 800a444:	4610      	mov	r0, r2
 800a446:	f7fe f906 	bl	8008656 <vListInsert>
 800a44a:	e012      	b.n	800a472 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d206      	bcs.n	800a462 <prvInsertTimerInActiveList+0x62>
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d302      	bcc.n	800a462 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	e007      	b.n	800a472 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <prvInsertTimerInActiveList+0x80>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3304      	adds	r3, #4
 800a46a:	4619      	mov	r1, r3
 800a46c:	4610      	mov	r0, r2
 800a46e:	f7fe f8f2 	bl	8008656 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a472:	697b      	ldr	r3, [r7, #20]
    }
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	20000204 	.word	0x20000204
 800a480:	20000200 	.word	0x20000200

0800a484 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a48a:	e0a6      	b.n	800a5da <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f2c0 80a2 	blt.w	800a5d8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe f90f 	bl	80086c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4aa:	1d3b      	adds	r3, r7, #4
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff ff87 	bl	800a3c0 <prvSampleTimeNow>
 800a4b2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	2b08      	cmp	r3, #8
 800a4ba:	f200 808e 	bhi.w	800a5da <prvProcessReceivedCommands+0x156>
 800a4be:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <prvProcessReceivedCommands+0x40>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4e9 	.word	0x0800a4e9
 800a4cc:	0800a551 	.word	0x0800a551
 800a4d0:	0800a565 	.word	0x0800a565
 800a4d4:	0800a5af 	.word	0x0800a5af
 800a4d8:	0800a4e9 	.word	0x0800a4e9
 800a4dc:	0800a4e9 	.word	0x0800a4e9
 800a4e0:	0800a551 	.word	0x0800a551
 800a4e4:	0800a565 	.word	0x0800a565
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ee:	f043 0301 	orr.w	r3, r3, #1
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	18d1      	adds	r1, r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	69ba      	ldr	r2, [r7, #24]
 800a506:	69f8      	ldr	r0, [r7, #28]
 800a508:	f7ff ff7a 	bl	800a400 <prvInsertTimerInActiveList>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d063      	beq.n	800a5da <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d009      	beq.n	800a534 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	4413      	add	r3, r2
 800a528:	69ba      	ldr	r2, [r7, #24]
 800a52a:	4619      	mov	r1, r3
 800a52c:	69f8      	ldr	r0, [r7, #28]
 800a52e:	f7ff fe72 	bl	800a216 <prvReloadTimer>
 800a532:	e008      	b.n	800a546 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a53a:	f023 0301 	bic.w	r3, r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	69f8      	ldr	r0, [r7, #28]
 800a54c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800a54e:	e044      	b.n	800a5da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a556:	f023 0301 	bic.w	r3, r3, #1
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800a562:	e03a      	b.n	800a5da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a56a:	f043 0301 	orr.w	r3, r3, #1
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <prvProcessReceivedCommands+0x116>
        __asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	617b      	str	r3, [r7, #20]
    }
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	18d1      	adds	r1, r2, r3
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	69ba      	ldr	r2, [r7, #24]
 800a5a6:	69f8      	ldr	r0, [r7, #28]
 800a5a8:	f7ff ff2a 	bl	800a400 <prvInsertTimerInActiveList>
                        break;
 800a5ac:	e015      	b.n	800a5da <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800a5bc:	69f8      	ldr	r0, [r7, #28]
 800a5be:	f000 fb87 	bl	800acd0 <vPortFree>
 800a5c2:	e00a      	b.n	800a5da <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ca:	f023 0301 	bic.w	r3, r3, #1
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a5d6:	e000      	b.n	800a5da <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800a5d8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5da:	4b08      	ldr	r3, [pc, #32]	; (800a5fc <prvProcessReceivedCommands+0x178>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f107 0108 	add.w	r1, r7, #8
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fe fb57 	bl	8008c98 <xQueueReceive>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f47f af4d 	bne.w	800a48c <prvProcessReceivedCommands+0x8>
        }
    }
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20000208 	.word	0x20000208

0800a600 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a606:	e009      	b.n	800a61c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a608:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <prvSwitchTimerLists+0x44>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a612:	f04f 31ff 	mov.w	r1, #4294967295
 800a616:	6838      	ldr	r0, [r7, #0]
 800a618:	f7ff fe1e 	bl	800a258 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a61c:	4b09      	ldr	r3, [pc, #36]	; (800a644 <prvSwitchTimerLists+0x44>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f0      	bne.n	800a608 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a626:	4b07      	ldr	r3, [pc, #28]	; (800a644 <prvSwitchTimerLists+0x44>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <prvSwitchTimerLists+0x48>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a04      	ldr	r2, [pc, #16]	; (800a644 <prvSwitchTimerLists+0x44>)
 800a632:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a634:	4a04      	ldr	r2, [pc, #16]	; (800a648 <prvSwitchTimerLists+0x48>)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6013      	str	r3, [r2, #0]
    }
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000200 	.word	0x20000200
 800a648:	20000204 	.word	0x20000204

0800a64c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a650:	f000 f962 	bl	800a918 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a654:	4b12      	ldr	r3, [pc, #72]	; (800a6a0 <prvCheckForValidListAndQueue+0x54>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d11d      	bne.n	800a698 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a65c:	4811      	ldr	r0, [pc, #68]	; (800a6a4 <prvCheckForValidListAndQueue+0x58>)
 800a65e:	f7fd ffa9 	bl	80085b4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a662:	4811      	ldr	r0, [pc, #68]	; (800a6a8 <prvCheckForValidListAndQueue+0x5c>)
 800a664:	f7fd ffa6 	bl	80085b4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a668:	4b10      	ldr	r3, [pc, #64]	; (800a6ac <prvCheckForValidListAndQueue+0x60>)
 800a66a:	4a0e      	ldr	r2, [pc, #56]	; (800a6a4 <prvCheckForValidListAndQueue+0x58>)
 800a66c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a66e:	4b10      	ldr	r3, [pc, #64]	; (800a6b0 <prvCheckForValidListAndQueue+0x64>)
 800a670:	4a0d      	ldr	r2, [pc, #52]	; (800a6a8 <prvCheckForValidListAndQueue+0x5c>)
 800a672:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a674:	2200      	movs	r2, #0
 800a676:	210c      	movs	r1, #12
 800a678:	200a      	movs	r0, #10
 800a67a:	f7fe f8d1 	bl	8008820 <xQueueGenericCreate>
 800a67e:	4603      	mov	r3, r0
 800a680:	4a07      	ldr	r2, [pc, #28]	; (800a6a0 <prvCheckForValidListAndQueue+0x54>)
 800a682:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800a684:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <prvCheckForValidListAndQueue+0x54>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d005      	beq.n	800a698 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a68c:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <prvCheckForValidListAndQueue+0x54>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4908      	ldr	r1, [pc, #32]	; (800a6b4 <prvCheckForValidListAndQueue+0x68>)
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fce4 	bl	8009060 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a698:	f000 f96e 	bl	800a978 <vPortExitCritical>
    }
 800a69c:	bf00      	nop
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20000208 	.word	0x20000208
 800a6a4:	200001d8 	.word	0x200001d8
 800a6a8:	200001ec 	.word	0x200001ec
 800a6ac:	20000200 	.word	0x20000200
 800a6b0:	20000204 	.word	0x20000204
 800a6b4:	080108d8 	.word	0x080108d8

0800a6b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3b04      	subs	r3, #4
 800a6c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3b04      	subs	r3, #4
 800a6d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f023 0201 	bic.w	r2, r3, #1
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3b04      	subs	r3, #4
 800a6e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a6e8:	4a0c      	ldr	r2, [pc, #48]	; (800a71c <pxPortInitialiseStack+0x64>)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3b14      	subs	r3, #20
 800a6f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3b04      	subs	r3, #4
 800a6fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f06f 0202 	mvn.w	r2, #2
 800a706:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3b20      	subs	r3, #32
 800a70c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a70e:	68fb      	ldr	r3, [r7, #12]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	0800a721 	.word	0x0800a721

0800a720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <prvTaskExitError+0x54>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a732:	d00a      	beq.n	800a74a <prvTaskExitError+0x2a>
        __asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60fb      	str	r3, [r7, #12]
    }
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <prvTaskExitError+0x28>
        __asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	60bb      	str	r3, [r7, #8]
    }
 800a75c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a75e:	bf00      	nop
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0fc      	beq.n	800a760 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a766:	bf00      	nop
 800a768:	bf00      	nop
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	20000004 	.word	0x20000004
	...

0800a780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a780:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <pxCurrentTCBConst2>)
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	6808      	ldr	r0, [r1, #0]
 800a786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	f380 8809 	msr	PSP, r0
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8811 	msr	BASEPRI, r0
 800a79a:	4770      	bx	lr
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst2>:
 800a7a0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a7a8:	4808      	ldr	r0, [pc, #32]	; (800a7cc <prvPortStartFirstTask+0x24>)
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	6800      	ldr	r0, [r0, #0]
 800a7ae:	f380 8808 	msr	MSP, r0
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8814 	msr	CONTROL, r0
 800a7ba:	b662      	cpsie	i
 800a7bc:	b661      	cpsie	f
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	df00      	svc	0
 800a7c8:	bf00      	nop
 800a7ca:	0000      	.short	0x0000
 800a7cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop

0800a7d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7da:	4b46      	ldr	r3, [pc, #280]	; (800a8f4 <xPortStartScheduler+0x120>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a46      	ldr	r2, [pc, #280]	; (800a8f8 <xPortStartScheduler+0x124>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d10a      	bne.n	800a7fa <xPortStartScheduler+0x26>
        __asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	613b      	str	r3, [r7, #16]
    }
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7fa:	4b3e      	ldr	r3, [pc, #248]	; (800a8f4 <xPortStartScheduler+0x120>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a3f      	ldr	r2, [pc, #252]	; (800a8fc <xPortStartScheduler+0x128>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d10a      	bne.n	800a81a <xPortStartScheduler+0x46>
        __asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	60fb      	str	r3, [r7, #12]
    }
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a81a:	4b39      	ldr	r3, [pc, #228]	; (800a900 <xPortStartScheduler+0x12c>)
 800a81c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	22ff      	movs	r2, #255	; 0xff
 800a82a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	4b31      	ldr	r3, [pc, #196]	; (800a904 <xPortStartScheduler+0x130>)
 800a840:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a842:	4b31      	ldr	r3, [pc, #196]	; (800a908 <xPortStartScheduler+0x134>)
 800a844:	2207      	movs	r2, #7
 800a846:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a848:	e009      	b.n	800a85e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800a84a:	4b2f      	ldr	r3, [pc, #188]	; (800a908 <xPortStartScheduler+0x134>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3b01      	subs	r3, #1
 800a850:	4a2d      	ldr	r2, [pc, #180]	; (800a908 <xPortStartScheduler+0x134>)
 800a852:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a866:	2b80      	cmp	r3, #128	; 0x80
 800a868:	d0ef      	beq.n	800a84a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a86a:	4b27      	ldr	r3, [pc, #156]	; (800a908 <xPortStartScheduler+0x134>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f1c3 0307 	rsb	r3, r3, #7
 800a872:	2b04      	cmp	r3, #4
 800a874:	d00a      	beq.n	800a88c <xPortStartScheduler+0xb8>
        __asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	60bb      	str	r3, [r7, #8]
    }
 800a888:	bf00      	nop
 800a88a:	e7fe      	b.n	800a88a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a88c:	4b1e      	ldr	r3, [pc, #120]	; (800a908 <xPortStartScheduler+0x134>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	021b      	lsls	r3, r3, #8
 800a892:	4a1d      	ldr	r2, [pc, #116]	; (800a908 <xPortStartScheduler+0x134>)
 800a894:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a896:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <xPortStartScheduler+0x134>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a89e:	4a1a      	ldr	r2, [pc, #104]	; (800a908 <xPortStartScheduler+0x134>)
 800a8a0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a8aa:	4b18      	ldr	r3, [pc, #96]	; (800a90c <xPortStartScheduler+0x138>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a17      	ldr	r2, [pc, #92]	; (800a90c <xPortStartScheduler+0x138>)
 800a8b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a8b6:	4b15      	ldr	r3, [pc, #84]	; (800a90c <xPortStartScheduler+0x138>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a14      	ldr	r2, [pc, #80]	; (800a90c <xPortStartScheduler+0x138>)
 800a8bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a8c2:	f000 f8db 	bl	800aa7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a8c6:	4b12      	ldr	r3, [pc, #72]	; (800a910 <xPortStartScheduler+0x13c>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800a8cc:	f000 f8fa 	bl	800aac4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8d0:	4b10      	ldr	r3, [pc, #64]	; (800a914 <xPortStartScheduler+0x140>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a0f      	ldr	r2, [pc, #60]	; (800a914 <xPortStartScheduler+0x140>)
 800a8d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a8dc:	f7ff ff64 	bl	800a7a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a8e0:	f7fe ff4c 	bl	800977c <vTaskSwitchContext>
    prvTaskExitError();
 800a8e4:	f7ff ff1c 	bl	800a720 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	e000ed00 	.word	0xe000ed00
 800a8f8:	410fc271 	.word	0x410fc271
 800a8fc:	410fc270 	.word	0x410fc270
 800a900:	e000e400 	.word	0xe000e400
 800a904:	20000214 	.word	0x20000214
 800a908:	20000218 	.word	0x20000218
 800a90c:	e000ed20 	.word	0xe000ed20
 800a910:	20000004 	.word	0x20000004
 800a914:	e000ef34 	.word	0xe000ef34

0800a918 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
        __asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	607b      	str	r3, [r7, #4]
    }
 800a930:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a932:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <vPortEnterCritical+0x58>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3301      	adds	r3, #1
 800a938:	4a0d      	ldr	r2, [pc, #52]	; (800a970 <vPortEnterCritical+0x58>)
 800a93a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a93c:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <vPortEnterCritical+0x58>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d10f      	bne.n	800a964 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a944:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <vPortEnterCritical+0x5c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <vPortEnterCritical+0x4c>
        __asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	603b      	str	r3, [r7, #0]
    }
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <vPortEnterCritical+0x4a>
    }
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	20000004 	.word	0x20000004
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a97e:	4b12      	ldr	r3, [pc, #72]	; (800a9c8 <vPortExitCritical+0x50>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10a      	bne.n	800a99c <vPortExitCritical+0x24>
        __asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	607b      	str	r3, [r7, #4]
    }
 800a998:	bf00      	nop
 800a99a:	e7fe      	b.n	800a99a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <vPortExitCritical+0x50>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	4a09      	ldr	r2, [pc, #36]	; (800a9c8 <vPortExitCritical+0x50>)
 800a9a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a9a6:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <vPortExitCritical+0x50>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d105      	bne.n	800a9ba <vPortExitCritical+0x42>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	f383 8811 	msr	BASEPRI, r3
    }
 800a9b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20000004 	.word	0x20000004
 800a9cc:	00000000 	.word	0x00000000

0800a9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800a9d0:	f3ef 8009 	mrs	r0, PSP
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <pxCurrentTCBConst>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	f01e 0f10 	tst.w	lr, #16
 800a9e0:	bf08      	it	eq
 800a9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9f4:	f380 8811 	msr	BASEPRI, r0
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f7fe febc 	bl	800977c <vTaskSwitchContext>
 800aa04:	f04f 0000 	mov.w	r0, #0
 800aa08:	f380 8811 	msr	BASEPRI, r0
 800aa0c:	bc09      	pop	{r0, r3}
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6808      	ldr	r0, [r1, #0]
 800aa12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa16:	f01e 0f10 	tst.w	lr, #16
 800aa1a:	bf08      	it	eq
 800aa1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa20:	f380 8809 	msr	PSP, r0
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst>:
 800aa30:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
        __asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
    }
 800aa50:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800aa52:	f7fe fdfd 	bl	8009650 <xTaskIncrementTick>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <SysTick_Handler+0x40>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	2300      	movs	r3, #0
 800aa66:	603b      	str	r3, [r7, #0]
        __asm volatile
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	f383 8811 	msr	BASEPRI, r3
    }
 800aa6e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	e000ed04 	.word	0xe000ed04

0800aa7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa80:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <vPortSetupTimerInterrupt+0x34>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa86:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <vPortSetupTimerInterrupt+0x38>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa8c:	4b0a      	ldr	r3, [pc, #40]	; (800aab8 <vPortSetupTimerInterrupt+0x3c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a0a      	ldr	r2, [pc, #40]	; (800aabc <vPortSetupTimerInterrupt+0x40>)
 800aa92:	fba2 2303 	umull	r2, r3, r2, r3
 800aa96:	099b      	lsrs	r3, r3, #6
 800aa98:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <vPortSetupTimerInterrupt+0x44>)
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa9e:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <vPortSetupTimerInterrupt+0x34>)
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	601a      	str	r2, [r3, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	e000e010 	.word	0xe000e010
 800aab4:	e000e018 	.word	0xe000e018
 800aab8:	20000008 	.word	0x20000008
 800aabc:	10624dd3 	.word	0x10624dd3
 800aac0:	e000e014 	.word	0xe000e014

0800aac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800aac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aad4 <vPortEnableVFP+0x10>
 800aac8:	6801      	ldr	r1, [r0, #0]
 800aaca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aace:	6001      	str	r1, [r0, #0]
 800aad0:	4770      	bx	lr
 800aad2:	0000      	.short	0x0000
 800aad4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop

0800aadc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800aae2:	f3ef 8305 	mrs	r3, IPSR
 800aae6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b0f      	cmp	r3, #15
 800aaec:	d914      	bls.n	800ab18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaee:	4a17      	ldr	r2, [pc, #92]	; (800ab4c <vPortValidateInterruptPriority+0x70>)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aaf8:	4b15      	ldr	r3, [pc, #84]	; (800ab50 <vPortValidateInterruptPriority+0x74>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	7afa      	ldrb	r2, [r7, #11]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d20a      	bcs.n	800ab18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	607b      	str	r3, [r7, #4]
    }
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab18:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <vPortValidateInterruptPriority+0x78>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab20:	4b0d      	ldr	r3, [pc, #52]	; (800ab58 <vPortValidateInterruptPriority+0x7c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d90a      	bls.n	800ab3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	603b      	str	r3, [r7, #0]
    }
 800ab3a:	bf00      	nop
 800ab3c:	e7fe      	b.n	800ab3c <vPortValidateInterruptPriority+0x60>
    }
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	e000e3f0 	.word	0xe000e3f0
 800ab50:	20000214 	.word	0x20000214
 800ab54:	e000ed0c 	.word	0xe000ed0c
 800ab58:	20000218 	.word	0x20000218

0800ab5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08a      	sub	sp, #40	; 0x28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ab68:	f7fe fcba 	bl	80094e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ab6c:	4b53      	ldr	r3, [pc, #332]	; (800acbc <pvPortMalloc+0x160>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ab74:	f000 f908 	bl	800ad88 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d012      	beq.n	800aba4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ab7e:	2208      	movs	r2, #8
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	3308      	adds	r3, #8
 800ab8a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	43db      	mvns	r3, r3
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d804      	bhi.n	800aba0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	607b      	str	r3, [r7, #4]
 800ab9e:	e001      	b.n	800aba4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	db70      	blt.n	800ac8c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d06d      	beq.n	800ac8c <pvPortMalloc+0x130>
 800abb0:	4b43      	ldr	r3, [pc, #268]	; (800acc0 <pvPortMalloc+0x164>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d868      	bhi.n	800ac8c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800abba:	4b42      	ldr	r3, [pc, #264]	; (800acc4 <pvPortMalloc+0x168>)
 800abbc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800abbe:	4b41      	ldr	r3, [pc, #260]	; (800acc4 <pvPortMalloc+0x168>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abc4:	e004      	b.n	800abd0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d903      	bls.n	800abe2 <pvPortMalloc+0x86>
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1f1      	bne.n	800abc6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800abe2:	4b36      	ldr	r3, [pc, #216]	; (800acbc <pvPortMalloc+0x160>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe8:	429a      	cmp	r2, r3
 800abea:	d04f      	beq.n	800ac8c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2208      	movs	r2, #8
 800abf2:	4413      	add	r3, r2
 800abf4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	1ad2      	subs	r2, r2, r3
 800ac06:	2308      	movs	r3, #8
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d91f      	bls.n	800ac4e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4413      	add	r3, r2
 800ac14:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <pvPortMalloc+0xda>
        __asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	613b      	str	r3, [r7, #16]
    }
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac48:	6978      	ldr	r0, [r7, #20]
 800ac4a:	f000 f8f9 	bl	800ae40 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac4e:	4b1c      	ldr	r3, [pc, #112]	; (800acc0 <pvPortMalloc+0x164>)
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	4a19      	ldr	r2, [pc, #100]	; (800acc0 <pvPortMalloc+0x164>)
 800ac5a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac5c:	4b18      	ldr	r3, [pc, #96]	; (800acc0 <pvPortMalloc+0x164>)
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	4b19      	ldr	r3, [pc, #100]	; (800acc8 <pvPortMalloc+0x16c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d203      	bcs.n	800ac70 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac68:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <pvPortMalloc+0x164>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a16      	ldr	r2, [pc, #88]	; (800acc8 <pvPortMalloc+0x16c>)
 800ac6e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ac82:	4b12      	ldr	r3, [pc, #72]	; (800accc <pvPortMalloc+0x170>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	4a10      	ldr	r2, [pc, #64]	; (800accc <pvPortMalloc+0x170>)
 800ac8a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ac8c:	f7fe fc36 	bl	80094fc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <pvPortMalloc+0x154>
        __asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	60fb      	str	r3, [r7, #12]
    }
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <pvPortMalloc+0x152>
    return pvReturn;
 800acb0:	69fb      	ldr	r3, [r7, #28]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3728      	adds	r7, #40	; 0x28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20019224 	.word	0x20019224
 800acc0:	20019228 	.word	0x20019228
 800acc4:	2001921c 	.word	0x2001921c
 800acc8:	2001922c 	.word	0x2001922c
 800accc:	20019230 	.word	0x20019230

0800acd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d049      	beq.n	800ad76 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ace2:	2308      	movs	r3, #8
 800ace4:	425b      	negs	r3, r3
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	4413      	add	r3, r2
 800acea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	db0a      	blt.n	800ad0e <vPortFree+0x3e>
        __asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60fb      	str	r3, [r7, #12]
    }
 800ad0a:	bf00      	nop
 800ad0c:	e7fe      	b.n	800ad0c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <vPortFree+0x5c>
        __asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60bb      	str	r3, [r7, #8]
    }
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	0fdb      	lsrs	r3, r3, #31
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01c      	beq.n	800ad76 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d118      	bne.n	800ad76 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800ad50:	f7fe fbc6 	bl	80094e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <vPortFree+0xb0>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <vPortFree+0xb0>)
 800ad60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad62:	6938      	ldr	r0, [r7, #16]
 800ad64:	f000 f86c 	bl	800ae40 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ad68:	4b06      	ldr	r3, [pc, #24]	; (800ad84 <vPortFree+0xb4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	4a05      	ldr	r2, [pc, #20]	; (800ad84 <vPortFree+0xb4>)
 800ad70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ad72:	f7fe fbc3 	bl	80094fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ad76:	bf00      	nop
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20019228 	.word	0x20019228
 800ad84:	20019234 	.word	0x20019234

0800ad88 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad8e:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800ad92:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800ad94:	4b25      	ldr	r3, [pc, #148]	; (800ae2c <prvHeapInit+0xa4>)
 800ad96:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f003 0307 	and.w	r3, r3, #7
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00c      	beq.n	800adbc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3307      	adds	r3, #7
 800ada6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f023 0307 	bic.w	r3, r3, #7
 800adae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	4a1d      	ldr	r2, [pc, #116]	; (800ae2c <prvHeapInit+0xa4>)
 800adb8:	4413      	add	r3, r2
 800adba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adc0:	4a1b      	ldr	r2, [pc, #108]	; (800ae30 <prvHeapInit+0xa8>)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800adc6:	4b1a      	ldr	r3, [pc, #104]	; (800ae30 <prvHeapInit+0xa8>)
 800adc8:	2200      	movs	r2, #0
 800adca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	4413      	add	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800add4:	2208      	movs	r2, #8
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f023 0307 	bic.w	r3, r3, #7
 800ade2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4a13      	ldr	r2, [pc, #76]	; (800ae34 <prvHeapInit+0xac>)
 800ade8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800adea:	4b12      	ldr	r3, [pc, #72]	; (800ae34 <prvHeapInit+0xac>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2200      	movs	r2, #0
 800adf0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800adf2:	4b10      	ldr	r3, [pc, #64]	; (800ae34 <prvHeapInit+0xac>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2200      	movs	r2, #0
 800adf8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	1ad2      	subs	r2, r2, r3
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae08:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <prvHeapInit+0xac>)
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4a08      	ldr	r2, [pc, #32]	; (800ae38 <prvHeapInit+0xb0>)
 800ae16:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	4a07      	ldr	r2, [pc, #28]	; (800ae3c <prvHeapInit+0xb4>)
 800ae1e:	6013      	str	r3, [r2, #0]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	2000021c 	.word	0x2000021c
 800ae30:	2001921c 	.word	0x2001921c
 800ae34:	20019224 	.word	0x20019224
 800ae38:	2001922c 	.word	0x2001922c
 800ae3c:	20019228 	.word	0x20019228

0800ae40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae48:	4b28      	ldr	r3, [pc, #160]	; (800aeec <prvInsertBlockIntoFreeList+0xac>)
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	e002      	b.n	800ae54 <prvInsertBlockIntoFreeList+0x14>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d8f7      	bhi.n	800ae4e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	4413      	add	r3, r2
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d108      	bne.n	800ae82 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	441a      	add	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	441a      	add	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d118      	bne.n	800aec8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <prvInsertBlockIntoFreeList+0xb0>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d00d      	beq.n	800aebe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	441a      	add	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e008      	b.n	800aed0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aebe:	4b0c      	ldr	r3, [pc, #48]	; (800aef0 <prvInsertBlockIntoFreeList+0xb0>)
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	e003      	b.n	800aed0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d002      	beq.n	800aede <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800aede:	bf00      	nop
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	2001921c 	.word	0x2001921c
 800aef0:	20019224 	.word	0x20019224

0800aef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08c      	sub	sp, #48	; 0x30
 800aef8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aefa:	f001 faed 	bl	800c4d8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aefe:	f000 f951 	bl	800b1a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800af02:	f000 fb6f 	bl	800b5e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800af06:	f000 f9cf 	bl	800b2a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800af0a:	f000 fa1d 	bl	800b348 <MX_TIM2_Init>
  MX_TIM3_Init();
 800af0e:	f000 fa6d 	bl	800b3ec <MX_TIM3_Init>
  MX_TIM4_Init();
 800af12:	f000 fabf 	bl	800b494 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800af16:	f000 fb11 	bl	800b53c <MX_USART2_UART_Init>
  MX_CRC_Init();
 800af1a:	f000 f9b1 	bl	800b280 <MX_CRC_Init>
  MX_USART3_UART_Init();
 800af1e:	f000 fb37 	bl	800b590 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800af22:	4882      	ldr	r0, [pc, #520]	; (800b12c <main+0x238>)
 800af24:	f002 fcdc 	bl	800d8e0 <HAL_TIM_Base_Start>


  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800af28:	2104      	movs	r1, #4
 800af2a:	4881      	ldr	r0, [pc, #516]	; (800b130 <main+0x23c>)
 800af2c:	f002 fe00 	bl	800db30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800af30:	2100      	movs	r1, #0
 800af32:	4880      	ldr	r0, [pc, #512]	; (800b134 <main+0x240>)
 800af34:	f002 fdfc 	bl	800db30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800af38:	2100      	movs	r1, #0
 800af3a:	487f      	ldr	r0, [pc, #508]	; (800b138 <main+0x244>)
 800af3c:	f002 fdf8 	bl	800db30 <HAL_TIM_IC_Start_IT>

  /*Start the task creations*/

  current_us=LeftUS;
 800af40:	4b7e      	ldr	r3, [pc, #504]	; (800b13c <main+0x248>)
 800af42:	2202      	movs	r2, #2
 800af44:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart3, &RxBuffer, 1);
 800af46:	2201      	movs	r2, #1
 800af48:	497d      	ldr	r1, [pc, #500]	; (800b140 <main+0x24c>)
 800af4a:	487e      	ldr	r0, [pc, #504]	; (800b144 <main+0x250>)
 800af4c:	f003 fdb7 	bl	800eabe <HAL_UART_Receive_IT>
  BaseType_t status;

  status=xTaskCreate(Trigger_US_left, "The left US", 250, NULL, 2, &handle_leftUS);
 800af50:	4b7d      	ldr	r3, [pc, #500]	; (800b148 <main+0x254>)
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	2302      	movs	r3, #2
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	22fa      	movs	r2, #250	; 0xfa
 800af5c:	497b      	ldr	r1, [pc, #492]	; (800b14c <main+0x258>)
 800af5e:	487c      	ldr	r0, [pc, #496]	; (800b150 <main+0x25c>)
 800af60:	f7fe f900 	bl	8009164 <xTaskCreate>
 800af64:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status==pdPASS);
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d00a      	beq.n	800af82 <main+0x8e>
        __asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	623b      	str	r3, [r7, #32]
    }
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <main+0x8c>

  status=xTaskCreate(Trigger_US_right, "The Right US", 250, NULL, 2, &handle_rightUS);
 800af82:	4b74      	ldr	r3, [pc, #464]	; (800b154 <main+0x260>)
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	2302      	movs	r3, #2
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2300      	movs	r3, #0
 800af8c:	22fa      	movs	r2, #250	; 0xfa
 800af8e:	4972      	ldr	r1, [pc, #456]	; (800b158 <main+0x264>)
 800af90:	4872      	ldr	r0, [pc, #456]	; (800b15c <main+0x268>)
 800af92:	f7fe f8e7 	bl	8009164 <xTaskCreate>
 800af96:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status==pdPASS);
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d00a      	beq.n	800afb4 <main+0xc0>
        __asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	61fb      	str	r3, [r7, #28]
    }
 800afb0:	bf00      	nop
 800afb2:	e7fe      	b.n	800afb2 <main+0xbe>

  status=xTaskCreate(Trigger_US_middle, "The Middle US", 250, NULL, 2, &handle_middleUS);
 800afb4:	4b6a      	ldr	r3, [pc, #424]	; (800b160 <main+0x26c>)
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	2302      	movs	r3, #2
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	2300      	movs	r3, #0
 800afbe:	22fa      	movs	r2, #250	; 0xfa
 800afc0:	4968      	ldr	r1, [pc, #416]	; (800b164 <main+0x270>)
 800afc2:	4869      	ldr	r0, [pc, #420]	; (800b168 <main+0x274>)
 800afc4:	f7fe f8ce 	bl	8009164 <xTaskCreate>
 800afc8:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status==pdPASS);
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d00a      	beq.n	800afe6 <main+0xf2>
        __asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	61bb      	str	r3, [r7, #24]
    }
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <main+0xf0>

   status=xTaskCreate(Handle_US_Reading, "Reading Handle", 200, NULL, 2, &handle_ReadingUS);
 800afe6:	4b61      	ldr	r3, [pc, #388]	; (800b16c <main+0x278>)
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	2302      	movs	r3, #2
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	2300      	movs	r3, #0
 800aff0:	22c8      	movs	r2, #200	; 0xc8
 800aff2:	495f      	ldr	r1, [pc, #380]	; (800b170 <main+0x27c>)
 800aff4:	485f      	ldr	r0, [pc, #380]	; (800b174 <main+0x280>)
 800aff6:	f7fe f8b5 	bl	8009164 <xTaskCreate>
 800affa:	6278      	str	r0, [r7, #36]	; 0x24
   configASSERT(status==pdPASS);
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	2b01      	cmp	r3, #1
 800b000:	d00a      	beq.n	800b018 <main+0x124>
        __asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	617b      	str	r3, [r7, #20]
    }
 800b014:	bf00      	nop
 800b016:	e7fe      	b.n	800b016 <main+0x122>

   status=xTaskCreate(Handle_UART_Reading, "UART Handle", 200, NULL, 3, &handle_ReadingUART);
 800b018:	4b57      	ldr	r3, [pc, #348]	; (800b178 <main+0x284>)
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	2303      	movs	r3, #3
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	2300      	movs	r3, #0
 800b022:	22c8      	movs	r2, #200	; 0xc8
 800b024:	4955      	ldr	r1, [pc, #340]	; (800b17c <main+0x288>)
 800b026:	4856      	ldr	r0, [pc, #344]	; (800b180 <main+0x28c>)
 800b028:	f7fe f89c 	bl	8009164 <xTaskCreate>
 800b02c:	6278      	str	r0, [r7, #36]	; 0x24
   configASSERT(status==pdPASS);
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	2b01      	cmp	r3, #1
 800b032:	d00a      	beq.n	800b04a <main+0x156>
        __asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	613b      	str	r3, [r7, #16]
    }
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <main+0x154>

   Queue_LeftReading=xQueueCreate(1,sizeof(uint64_t));
 800b04a:	2200      	movs	r2, #0
 800b04c:	2108      	movs	r1, #8
 800b04e:	2001      	movs	r0, #1
 800b050:	f7fd fbe6 	bl	8008820 <xQueueGenericCreate>
 800b054:	4603      	mov	r3, r0
 800b056:	4a4b      	ldr	r2, [pc, #300]	; (800b184 <main+0x290>)
 800b058:	6013      	str	r3, [r2, #0]
   configASSERT(Queue_LeftReading!=NULL);
 800b05a:	4b4a      	ldr	r3, [pc, #296]	; (800b184 <main+0x290>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <main+0x184>
        __asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	60fb      	str	r3, [r7, #12]
    }
 800b074:	bf00      	nop
 800b076:	e7fe      	b.n	800b076 <main+0x182>

   Queue_RightReading=xQueueCreate(1,sizeof(uint64_t));
 800b078:	2200      	movs	r2, #0
 800b07a:	2108      	movs	r1, #8
 800b07c:	2001      	movs	r0, #1
 800b07e:	f7fd fbcf 	bl	8008820 <xQueueGenericCreate>
 800b082:	4603      	mov	r3, r0
 800b084:	4a40      	ldr	r2, [pc, #256]	; (800b188 <main+0x294>)
 800b086:	6013      	str	r3, [r2, #0]
   configASSERT(Queue_RightReading!=NULL);
 800b088:	4b3f      	ldr	r3, [pc, #252]	; (800b188 <main+0x294>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10a      	bne.n	800b0a6 <main+0x1b2>
        __asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60bb      	str	r3, [r7, #8]
    }
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <main+0x1b0>

   Queue_MiddleReading=xQueueCreate(1,sizeof(uint64_t));
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	2108      	movs	r1, #8
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	f7fd fbb8 	bl	8008820 <xQueueGenericCreate>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	4a36      	ldr	r2, [pc, #216]	; (800b18c <main+0x298>)
 800b0b4:	6013      	str	r3, [r2, #0]
   configASSERT(Queue_MiddleReading!=NULL);
 800b0b6:	4b35      	ldr	r3, [pc, #212]	; (800b18c <main+0x298>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10a      	bne.n	800b0d4 <main+0x1e0>
        __asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
    }
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <main+0x1de>

   Queue_UARTStatus=xQueueCreate(1,sizeof(uint64_t));
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2108      	movs	r1, #8
 800b0d8:	2001      	movs	r0, #1
 800b0da:	f7fd fba1 	bl	8008820 <xQueueGenericCreate>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4a2b      	ldr	r2, [pc, #172]	; (800b190 <main+0x29c>)
 800b0e2:	6013      	str	r3, [r2, #0]
   configASSERT(Queue_UARTStatus!=NULL);
 800b0e4:	4b2a      	ldr	r3, [pc, #168]	; (800b190 <main+0x29c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10a      	bne.n	800b102 <main+0x20e>
        __asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	603b      	str	r3, [r7, #0]
    }
 800b0fe:	bf00      	nop
 800b100:	e7fe      	b.n	800b100 <main+0x20c>

   handle_software_timer=xTimerCreate("Motors Timer", pdMS_TO_TICKS(1000), pdFALSE, NULL, &SoftwareTimer_Callback);
 800b102:	4b24      	ldr	r3, [pc, #144]	; (800b194 <main+0x2a0>)
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	2300      	movs	r3, #0
 800b108:	2200      	movs	r2, #0
 800b10a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b10e:	4822      	ldr	r0, [pc, #136]	; (800b198 <main+0x2a4>)
 800b110:	f7ff f828 	bl	800a164 <xTimerCreate>
 800b114:	4603      	mov	r3, r0
 800b116:	4a21      	ldr	r2, [pc, #132]	; (800b19c <main+0x2a8>)
 800b118:	6013      	str	r3, [r2, #0]

   US_Sema=xSemaphoreCreateMutex();
 800b11a:	2001      	movs	r0, #1
 800b11c:	f7fd fc0b 	bl	8008936 <xQueueCreateMutex>
 800b120:	4603      	mov	r3, r0
 800b122:	4a1f      	ldr	r2, [pc, #124]	; (800b1a0 <main+0x2ac>)
 800b124:	6013      	str	r3, [r2, #0]


   vTaskStartScheduler();
 800b126:	f7fe f989 	bl	800943c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b12a:	e7fe      	b.n	800b12a <main+0x236>
 800b12c:	20019240 	.word	0x20019240
 800b130:	20019288 	.word	0x20019288
 800b134:	200192d0 	.word	0x200192d0
 800b138:	20019318 	.word	0x20019318
 800b13c:	200193e8 	.word	0x200193e8
 800b140:	20019418 	.word	0x20019418
 800b144:	200193a4 	.word	0x200193a4
 800b148:	200193ec 	.word	0x200193ec
 800b14c:	080108e0 	.word	0x080108e0
 800b150:	0800be9d 	.word	0x0800be9d
 800b154:	200193f0 	.word	0x200193f0
 800b158:	080108ec 	.word	0x080108ec
 800b15c:	0800bec1 	.word	0x0800bec1
 800b160:	200193f4 	.word	0x200193f4
 800b164:	080108fc 	.word	0x080108fc
 800b168:	0800bee5 	.word	0x0800bee5
 800b16c:	200193f8 	.word	0x200193f8
 800b170:	0801090c 	.word	0x0801090c
 800b174:	0800bf09 	.word	0x0800bf09
 800b178:	200193fc 	.word	0x200193fc
 800b17c:	0801091c 	.word	0x0801091c
 800b180:	0800c085 	.word	0x0800c085
 800b184:	20019404 	.word	0x20019404
 800b188:	20019408 	.word	0x20019408
 800b18c:	2001940c 	.word	0x2001940c
 800b190:	20019410 	.word	0x20019410
 800b194:	0800b6ed 	.word	0x0800b6ed
 800b198:	08010928 	.word	0x08010928
 800b19c:	20019414 	.word	0x20019414
 800b1a0:	20019400 	.word	0x20019400

0800b1a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b094      	sub	sp, #80	; 0x50
 800b1a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b1aa:	f107 031c 	add.w	r3, r7, #28
 800b1ae:	2234      	movs	r2, #52	; 0x34
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f004 fbe6 	bl	800f984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b1b8:	f107 0308 	add.w	r3, r7, #8
 800b1bc:	2200      	movs	r2, #0
 800b1be:	601a      	str	r2, [r3, #0]
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	609a      	str	r2, [r3, #8]
 800b1c4:	60da      	str	r2, [r3, #12]
 800b1c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	607b      	str	r3, [r7, #4]
 800b1cc:	4b2a      	ldr	r3, [pc, #168]	; (800b278 <SystemClock_Config+0xd4>)
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	4a29      	ldr	r2, [pc, #164]	; (800b278 <SystemClock_Config+0xd4>)
 800b1d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d6:	6413      	str	r3, [r2, #64]	; 0x40
 800b1d8:	4b27      	ldr	r3, [pc, #156]	; (800b278 <SystemClock_Config+0xd4>)
 800b1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1e0:	607b      	str	r3, [r7, #4]
 800b1e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	4b24      	ldr	r3, [pc, #144]	; (800b27c <SystemClock_Config+0xd8>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b1f0:	4a22      	ldr	r2, [pc, #136]	; (800b27c <SystemClock_Config+0xd8>)
 800b1f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	4b20      	ldr	r3, [pc, #128]	; (800b27c <SystemClock_Config+0xd8>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b200:	603b      	str	r3, [r7, #0]
 800b202:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b204:	2302      	movs	r3, #2
 800b206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b208:	2301      	movs	r3, #1
 800b20a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b20c:	2310      	movs	r3, #16
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b210:	2302      	movs	r3, #2
 800b212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b214:	2300      	movs	r3, #0
 800b216:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800b218:	2308      	movs	r3, #8
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800b21c:	2354      	movs	r3, #84	; 0x54
 800b21e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b220:	2302      	movs	r3, #2
 800b222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800b224:	2302      	movs	r3, #2
 800b226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b228:	2302      	movs	r3, #2
 800b22a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b22c:	f107 031c 	add.w	r3, r7, #28
 800b230:	4618      	mov	r0, r3
 800b232:	f002 f867 	bl	800d304 <HAL_RCC_OscConfig>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800b23c:	f000 fa72 	bl	800b724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b240:	230f      	movs	r3, #15
 800b242:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b244:	2302      	movs	r3, #2
 800b246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b248:	2300      	movs	r3, #0
 800b24a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b24c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b250:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b256:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b258:	f107 0308 	add.w	r3, r7, #8
 800b25c:	2102      	movs	r1, #2
 800b25e:	4618      	mov	r0, r3
 800b260:	f001 fcd4 	bl	800cc0c <HAL_RCC_ClockConfig>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800b26a:	f000 fa5b 	bl	800b724 <Error_Handler>
  }
}
 800b26e:	bf00      	nop
 800b270:	3750      	adds	r7, #80	; 0x50
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	40023800 	.word	0x40023800
 800b27c:	40007000 	.word	0x40007000

0800b280 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800b284:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <MX_CRC_Init+0x20>)
 800b286:	4a07      	ldr	r2, [pc, #28]	; (800b2a4 <MX_CRC_Init+0x24>)
 800b288:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800b28a:	4805      	ldr	r0, [pc, #20]	; (800b2a0 <MX_CRC_Init+0x20>)
 800b28c:	f001 fa48 	bl	800c720 <HAL_CRC_Init>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800b296:	f000 fa45 	bl	800b724 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800b29a:	bf00      	nop
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	20019238 	.word	0x20019238
 800b2a4:	40023000 	.word	0x40023000

0800b2a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b2ae:	f107 0308 	add.w	r3, r7, #8
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	605a      	str	r2, [r3, #4]
 800b2b8:	609a      	str	r2, [r3, #8]
 800b2ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2bc:	463b      	mov	r3, r7
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b2c4:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2c6:	4a1f      	ldr	r2, [pc, #124]	; (800b344 <MX_TIM1_Init+0x9c>)
 800b2c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800b2ca:	4b1d      	ldr	r3, [pc, #116]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2cc:	2253      	movs	r2, #83	; 0x53
 800b2ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2d0:	4b1b      	ldr	r3, [pc, #108]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 800b2d6:	4b1a      	ldr	r3, [pc, #104]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2de:	4b18      	ldr	r3, [pc, #96]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b2e4:	4b16      	ldr	r3, [pc, #88]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b2ea:	4b15      	ldr	r3, [pc, #84]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b2f0:	4813      	ldr	r0, [pc, #76]	; (800b340 <MX_TIM1_Init+0x98>)
 800b2f2:	f002 faa5 	bl	800d840 <HAL_TIM_Base_Init>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800b2fc:	f000 fa12 	bl	800b724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b306:	f107 0308 	add.w	r3, r7, #8
 800b30a:	4619      	mov	r1, r3
 800b30c:	480c      	ldr	r0, [pc, #48]	; (800b340 <MX_TIM1_Init+0x98>)
 800b30e:	f002 ff89 	bl	800e224 <HAL_TIM_ConfigClockSource>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800b318:	f000 fa04 	bl	800b724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b31c:	2300      	movs	r3, #0
 800b31e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b320:	2300      	movs	r3, #0
 800b322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b324:	463b      	mov	r3, r7
 800b326:	4619      	mov	r1, r3
 800b328:	4805      	ldr	r0, [pc, #20]	; (800b340 <MX_TIM1_Init+0x98>)
 800b32a:	f003 faeb 	bl	800e904 <HAL_TIMEx_MasterConfigSynchronization>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800b334:	f000 f9f6 	bl	800b724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800b338:	bf00      	nop
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20019240 	.word	0x20019240
 800b344:	40010000 	.word	0x40010000

0800b348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b34e:	f107 0310 	add.w	r3, r7, #16
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b358:	463b      	mov	r3, r7
 800b35a:	2200      	movs	r2, #0
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	605a      	str	r2, [r3, #4]
 800b360:	609a      	str	r2, [r3, #8]
 800b362:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b364:	4b20      	ldr	r3, [pc, #128]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b36a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800b36c:	4b1e      	ldr	r3, [pc, #120]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b36e:	2253      	movs	r2, #83	; 0x53
 800b370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b372:	4b1d      	ldr	r3, [pc, #116]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b374:	2200      	movs	r2, #0
 800b376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 800b378:	4b1b      	ldr	r3, [pc, #108]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b37a:	f04f 32ff 	mov.w	r2, #4294967295
 800b37e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b380:	4b19      	ldr	r3, [pc, #100]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b382:	2200      	movs	r2, #0
 800b384:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b386:	4b18      	ldr	r3, [pc, #96]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b388:	2200      	movs	r2, #0
 800b38a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800b38c:	4816      	ldr	r0, [pc, #88]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b38e:	f002 fb7f 	bl	800da90 <HAL_TIM_IC_Init>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d001      	beq.n	800b39c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800b398:	f000 f9c4 	bl	800b724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b39c:	2300      	movs	r3, #0
 800b39e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b3a4:	f107 0310 	add.w	r3, r7, #16
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	480f      	ldr	r0, [pc, #60]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b3ac:	f003 faaa 	bl	800e904 <HAL_TIMEx_MasterConfigSynchronization>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b3b6:	f000 f9b5 	bl	800b724 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800b3ba:	230a      	movs	r3, #10
 800b3bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b3ca:	463b      	mov	r3, r7
 800b3cc:	2204      	movs	r2, #4
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4805      	ldr	r0, [pc, #20]	; (800b3e8 <MX_TIM2_Init+0xa0>)
 800b3d2:	f002 fe8b 	bl	800e0ec <HAL_TIM_IC_ConfigChannel>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800b3dc:	f000 f9a2 	bl	800b724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b3e0:	bf00      	nop
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20019288 	.word	0x20019288

0800b3ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b3f2:	f107 0310 	add.w	r3, r7, #16
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b3fc:	463b      	mov	r3, r7
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	605a      	str	r2, [r3, #4]
 800b404:	609a      	str	r2, [r3, #8]
 800b406:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b408:	4b20      	ldr	r3, [pc, #128]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b40a:	4a21      	ldr	r2, [pc, #132]	; (800b490 <MX_TIM3_Init+0xa4>)
 800b40c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800b40e:	4b1f      	ldr	r3, [pc, #124]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b410:	2253      	movs	r2, #83	; 0x53
 800b412:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b414:	4b1d      	ldr	r3, [pc, #116]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b416:	2200      	movs	r2, #0
 800b418:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 800b41a:	4b1c      	ldr	r3, [pc, #112]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b41c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b422:	4b1a      	ldr	r3, [pc, #104]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b424:	2200      	movs	r2, #0
 800b426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b428:	4b18      	ldr	r3, [pc, #96]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800b42e:	4817      	ldr	r0, [pc, #92]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b430:	f002 fb2e 	bl	800da90 <HAL_TIM_IC_Init>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800b43a:	f000 f973 	bl	800b724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b43e:	2300      	movs	r3, #0
 800b440:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b446:	f107 0310 	add.w	r3, r7, #16
 800b44a:	4619      	mov	r1, r3
 800b44c:	480f      	ldr	r0, [pc, #60]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b44e:	f003 fa59 	bl	800e904 <HAL_TIMEx_MasterConfigSynchronization>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b458:	f000 f964 	bl	800b724 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800b45c:	230a      	movs	r3, #10
 800b45e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b460:	2301      	movs	r3, #1
 800b462:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b464:	2300      	movs	r3, #0
 800b466:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b46c:	463b      	mov	r3, r7
 800b46e:	2200      	movs	r2, #0
 800b470:	4619      	mov	r1, r3
 800b472:	4806      	ldr	r0, [pc, #24]	; (800b48c <MX_TIM3_Init+0xa0>)
 800b474:	f002 fe3a 	bl	800e0ec <HAL_TIM_IC_ConfigChannel>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800b47e:	f000 f951 	bl	800b724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b482:	bf00      	nop
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	200192d0 	.word	0x200192d0
 800b490:	40000400 	.word	0x40000400

0800b494 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b49a:	f107 0310 	add.w	r3, r7, #16
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b4a4:	463b      	mov	r3, r7
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	605a      	str	r2, [r3, #4]
 800b4ac:	609a      	str	r2, [r3, #8]
 800b4ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b4b0:	4b20      	ldr	r3, [pc, #128]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4b2:	4a21      	ldr	r2, [pc, #132]	; (800b538 <MX_TIM4_Init+0xa4>)
 800b4b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800b4b6:	4b1f      	ldr	r3, [pc, #124]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4b8:	2253      	movs	r2, #83	; 0x53
 800b4ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4bc:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800b4c2:	4b1c      	ldr	r3, [pc, #112]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4ca:	4b1a      	ldr	r3, [pc, #104]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4d0:	4b18      	ldr	r3, [pc, #96]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800b4d6:	4817      	ldr	r0, [pc, #92]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4d8:	f002 fada 	bl	800da90 <HAL_TIM_IC_Init>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800b4e2:	f000 f91f 	bl	800b724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b4ee:	f107 0310 	add.w	r3, r7, #16
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	480f      	ldr	r0, [pc, #60]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b4f6:	f003 fa05 	bl	800e904 <HAL_TIMEx_MasterConfigSynchronization>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800b500:	f000 f910 	bl	800b724 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800b504:	230a      	movs	r3, #10
 800b506:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b508:	2301      	movs	r3, #1
 800b50a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b50c:	2300      	movs	r3, #0
 800b50e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b514:	463b      	mov	r3, r7
 800b516:	2200      	movs	r2, #0
 800b518:	4619      	mov	r1, r3
 800b51a:	4806      	ldr	r0, [pc, #24]	; (800b534 <MX_TIM4_Init+0xa0>)
 800b51c:	f002 fde6 	bl	800e0ec <HAL_TIM_IC_ConfigChannel>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800b526:	f000 f8fd 	bl	800b724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b52a:	bf00      	nop
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20019318 	.word	0x20019318
 800b538:	40000800 	.word	0x40000800

0800b53c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b540:	4b11      	ldr	r3, [pc, #68]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b542:	4a12      	ldr	r2, [pc, #72]	; (800b58c <MX_USART2_UART_Init+0x50>)
 800b544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b546:	4b10      	ldr	r3, [pc, #64]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b54c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b54e:	4b0e      	ldr	r3, [pc, #56]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b550:	2200      	movs	r2, #0
 800b552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b554:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b556:	2200      	movs	r2, #0
 800b558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b55a:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b560:	4b09      	ldr	r3, [pc, #36]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b562:	220c      	movs	r2, #12
 800b564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b566:	4b08      	ldr	r3, [pc, #32]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b568:	2200      	movs	r2, #0
 800b56a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b56c:	4b06      	ldr	r3, [pc, #24]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b56e:	2200      	movs	r2, #0
 800b570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b572:	4805      	ldr	r0, [pc, #20]	; (800b588 <MX_USART2_UART_Init+0x4c>)
 800b574:	f003 fa56 	bl	800ea24 <HAL_UART_Init>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b57e:	f000 f8d1 	bl	800b724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b582:	bf00      	nop
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20019360 	.word	0x20019360
 800b58c:	40004400 	.word	0x40004400

0800b590 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b594:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b596:	4a12      	ldr	r2, [pc, #72]	; (800b5e0 <MX_USART3_UART_Init+0x50>)
 800b598:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800b59a:	4b10      	ldr	r3, [pc, #64]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b59c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b5a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b5a2:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b5a8:	4b0c      	ldr	r3, [pc, #48]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b5ae:	4b0b      	ldr	r3, [pc, #44]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b5b4:	4b09      	ldr	r3, [pc, #36]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b5b6:	220c      	movs	r2, #12
 800b5b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b5ba:	4b08      	ldr	r3, [pc, #32]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b5c0:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b5c6:	4805      	ldr	r0, [pc, #20]	; (800b5dc <MX_USART3_UART_Init+0x4c>)
 800b5c8:	f003 fa2c 	bl	800ea24 <HAL_UART_Init>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800b5d2:	f000 f8a7 	bl	800b724 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b5d6:	bf00      	nop
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200193a4 	.word	0x200193a4
 800b5e0:	40004800 	.word	0x40004800

0800b5e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08a      	sub	sp, #40	; 0x28
 800b5e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5ea:	f107 0314 	add.w	r3, r7, #20
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	605a      	str	r2, [r3, #4]
 800b5f4:	609a      	str	r2, [r3, #8]
 800b5f6:	60da      	str	r2, [r3, #12]
 800b5f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	613b      	str	r3, [r7, #16]
 800b5fe:	4b38      	ldr	r3, [pc, #224]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b602:	4a37      	ldr	r2, [pc, #220]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b604:	f043 0304 	orr.w	r3, r3, #4
 800b608:	6313      	str	r3, [r2, #48]	; 0x30
 800b60a:	4b35      	ldr	r3, [pc, #212]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60e:	f003 0304 	and.w	r3, r3, #4
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	4b31      	ldr	r3, [pc, #196]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b61e:	4a30      	ldr	r2, [pc, #192]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b624:	6313      	str	r3, [r2, #48]	; 0x30
 800b626:	4b2e      	ldr	r3, [pc, #184]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b632:	2300      	movs	r3, #0
 800b634:	60bb      	str	r3, [r7, #8]
 800b636:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63a:	4a29      	ldr	r2, [pc, #164]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b63c:	f043 0301 	orr.w	r3, r3, #1
 800b640:	6313      	str	r3, [r2, #48]	; 0x30
 800b642:	4b27      	ldr	r3, [pc, #156]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	60bb      	str	r3, [r7, #8]
 800b64c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b64e:	2300      	movs	r3, #0
 800b650:	607b      	str	r3, [r7, #4]
 800b652:	4b23      	ldr	r3, [pc, #140]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b656:	4a22      	ldr	r2, [pc, #136]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b658:	f043 0302 	orr.w	r3, r3, #2
 800b65c:	6313      	str	r3, [r2, #48]	; 0x30
 800b65e:	4b20      	ldr	r3, [pc, #128]	; (800b6e0 <MX_GPIO_Init+0xfc>)
 800b660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b662:	f003 0302 	and.w	r3, r3, #2
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800b66a:	2200      	movs	r2, #0
 800b66c:	f640 310f 	movw	r1, #2831	; 0xb0f
 800b670:	481c      	ldr	r0, [pc, #112]	; (800b6e4 <MX_GPIO_Init+0x100>)
 800b672:	f001 fa97 	bl	800cba4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800b676:	2200      	movs	r2, #0
 800b678:	2120      	movs	r1, #32
 800b67a:	481b      	ldr	r0, [pc, #108]	; (800b6e8 <MX_GPIO_Init+0x104>)
 800b67c:	f001 fa92 	bl	800cba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800b680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b686:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800b68a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800b690:	f107 0314 	add.w	r3, r7, #20
 800b694:	4619      	mov	r1, r3
 800b696:	4813      	ldr	r0, [pc, #76]	; (800b6e4 <MX_GPIO_Init+0x100>)
 800b698:	f001 f8f0 	bl	800c87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800b69c:	f640 330f 	movw	r3, #2831	; 0xb0f
 800b6a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6ae:	f107 0314 	add.w	r3, r7, #20
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	480b      	ldr	r0, [pc, #44]	; (800b6e4 <MX_GPIO_Init+0x100>)
 800b6b6:	f001 f8e1 	bl	800c87c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800b6ca:	f107 0314 	add.w	r3, r7, #20
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4805      	ldr	r0, [pc, #20]	; (800b6e8 <MX_GPIO_Init+0x104>)
 800b6d2:	f001 f8d3 	bl	800c87c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b6d6:	bf00      	nop
 800b6d8:	3728      	adds	r7, #40	; 0x28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	40020800 	.word	0x40020800
 800b6e8:	40020000 	.word	0x40020000

0800b6ec <SoftwareTimer_Callback>:

/* USER CODE BEGIN 4 */
void SoftwareTimer_Callback(TimerHandle_t xTimer){
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	Move_Forward();
 800b6f4:	f000 f81c 	bl	800b730 <Move_Forward>
}
 800b6f8:	bf00      	nop
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a04      	ldr	r2, [pc, #16]	; (800b720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d101      	bne.n	800b716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b712:	f000 ff03 	bl	800c51c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b716:	bf00      	nop
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	40001000 	.word	0x40001000

0800b724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b728:	b672      	cpsid	i
}
 800b72a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b72c:	e7fe      	b.n	800b72c <Error_Handler+0x8>
	...

0800b730 <Move_Forward>:
 *      Author: moham
 */
#include "motors.h"


void Move_Forward(void){
 800b730:	b580      	push	{r7, lr}
 800b732:	af00      	add	r7, sp, #0
	  /* Setting Direction of Pins to Move Car Forward */
		/* Right */
	HAL_GPIO_WritePin(MOTORS_PORT, RIGHT_PIN_1,SET);
 800b734:	2201      	movs	r2, #1
 800b736:	2101      	movs	r1, #1
 800b738:	480e      	ldr	r0, [pc, #56]	; (800b774 <Move_Forward+0x44>)
 800b73a:	f001 fa33 	bl	800cba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTORS_PORT, RIGHT_PIN_1,RESET);
 800b73e:	2200      	movs	r2, #0
 800b740:	2101      	movs	r1, #1
 800b742:	480c      	ldr	r0, [pc, #48]	; (800b774 <Move_Forward+0x44>)
 800b744:	f001 fa2e 	bl	800cba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTORS_PORT, RIGHT_EN_PIN,SET);
 800b748:	2201      	movs	r2, #1
 800b74a:	2104      	movs	r1, #4
 800b74c:	4809      	ldr	r0, [pc, #36]	; (800b774 <Move_Forward+0x44>)
 800b74e:	f001 fa29 	bl	800cba4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTORS_PORT, LEFT_PIN_1,SET);
 800b752:	2201      	movs	r2, #1
 800b754:	2108      	movs	r1, #8
 800b756:	4807      	ldr	r0, [pc, #28]	; (800b774 <Move_Forward+0x44>)
 800b758:	f001 fa24 	bl	800cba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTORS_PORT, LEFT_PIN_2,RESET);
 800b75c:	2200      	movs	r2, #0
 800b75e:	2110      	movs	r1, #16
 800b760:	4804      	ldr	r0, [pc, #16]	; (800b774 <Move_Forward+0x44>)
 800b762:	f001 fa1f 	bl	800cba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTORS_PORT, LEFT_EN_PIN,SET);
 800b766:	2201      	movs	r2, #1
 800b768:	2120      	movs	r1, #32
 800b76a:	4802      	ldr	r0, [pc, #8]	; (800b774 <Move_Forward+0x44>)
 800b76c:	f001 fa1a 	bl	800cba4 <HAL_GPIO_WritePin>
}
 800b770:	bf00      	nop
 800b772:	bd80      	pop	{r7, pc}
 800b774:	40020800 	.word	0x40020800

0800b778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b77e:	2300      	movs	r3, #0
 800b780:	607b      	str	r3, [r7, #4]
 800b782:	4b10      	ldr	r3, [pc, #64]	; (800b7c4 <HAL_MspInit+0x4c>)
 800b784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b786:	4a0f      	ldr	r2, [pc, #60]	; (800b7c4 <HAL_MspInit+0x4c>)
 800b788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b78c:	6453      	str	r3, [r2, #68]	; 0x44
 800b78e:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <HAL_MspInit+0x4c>)
 800b790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b796:	607b      	str	r3, [r7, #4]
 800b798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b79a:	2300      	movs	r3, #0
 800b79c:	603b      	str	r3, [r7, #0]
 800b79e:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <HAL_MspInit+0x4c>)
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a2:	4a08      	ldr	r2, [pc, #32]	; (800b7c4 <HAL_MspInit+0x4c>)
 800b7a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b7aa:	4b06      	ldr	r3, [pc, #24]	; (800b7c4 <HAL_MspInit+0x4c>)
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b7b6:	bf00      	nop
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	40023800 	.word	0x40023800

0800b7c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a0b      	ldr	r2, [pc, #44]	; (800b804 <HAL_CRC_MspInit+0x3c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d10d      	bne.n	800b7f6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <HAL_CRC_MspInit+0x40>)
 800b7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e2:	4a09      	ldr	r2, [pc, #36]	; (800b808 <HAL_CRC_MspInit+0x40>)
 800b7e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b7ea:	4b07      	ldr	r3, [pc, #28]	; (800b808 <HAL_CRC_MspInit+0x40>)
 800b7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800b7f6:	bf00      	nop
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	40023000 	.word	0x40023000
 800b808:	40023800 	.word	0x40023800

0800b80c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a0b      	ldr	r2, [pc, #44]	; (800b848 <HAL_TIM_Base_MspInit+0x3c>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d10d      	bne.n	800b83a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]
 800b822:	4b0a      	ldr	r3, [pc, #40]	; (800b84c <HAL_TIM_Base_MspInit+0x40>)
 800b824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b826:	4a09      	ldr	r2, [pc, #36]	; (800b84c <HAL_TIM_Base_MspInit+0x40>)
 800b828:	f043 0301 	orr.w	r3, r3, #1
 800b82c:	6453      	str	r3, [r2, #68]	; 0x44
 800b82e:	4b07      	ldr	r3, [pc, #28]	; (800b84c <HAL_TIM_Base_MspInit+0x40>)
 800b830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b832:	f003 0301 	and.w	r3, r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	40010000 	.word	0x40010000
 800b84c:	40023800 	.word	0x40023800

0800b850 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08e      	sub	sp, #56	; 0x38
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b85c:	2200      	movs	r2, #0
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	605a      	str	r2, [r3, #4]
 800b862:	609a      	str	r2, [r3, #8]
 800b864:	60da      	str	r2, [r3, #12]
 800b866:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b870:	d134      	bne.n	800b8dc <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b872:	2300      	movs	r3, #0
 800b874:	623b      	str	r3, [r7, #32]
 800b876:	4b55      	ldr	r3, [pc, #340]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87a:	4a54      	ldr	r2, [pc, #336]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b87c:	f043 0301 	orr.w	r3, r3, #1
 800b880:	6413      	str	r3, [r2, #64]	; 0x40
 800b882:	4b52      	ldr	r3, [pc, #328]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	623b      	str	r3, [r7, #32]
 800b88c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b88e:	2300      	movs	r3, #0
 800b890:	61fb      	str	r3, [r7, #28]
 800b892:	4b4e      	ldr	r3, [pc, #312]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b896:	4a4d      	ldr	r2, [pc, #308]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b898:	f043 0301 	orr.w	r3, r3, #1
 800b89c:	6313      	str	r3, [r2, #48]	; 0x30
 800b89e:	4b4b      	ldr	r3, [pc, #300]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	61fb      	str	r3, [r7, #28]
 800b8a8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b8ae:	2312      	movs	r3, #18
 800b8b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4842      	ldr	r0, [pc, #264]	; (800b9d0 <HAL_TIM_IC_MspInit+0x180>)
 800b8c6:	f000 ffd9 	bl	800c87c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2106      	movs	r1, #6
 800b8ce:	201c      	movs	r0, #28
 800b8d0:	f000 fefc 	bl	800c6cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b8d4:	201c      	movs	r0, #28
 800b8d6:	f000 ff15 	bl	800c704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800b8da:	e072      	b.n	800b9c2 <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM3)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a3c      	ldr	r2, [pc, #240]	; (800b9d4 <HAL_TIM_IC_MspInit+0x184>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d134      	bne.n	800b950 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	61bb      	str	r3, [r7, #24]
 800b8ea:	4b38      	ldr	r3, [pc, #224]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ee:	4a37      	ldr	r2, [pc, #220]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b8f0:	f043 0302 	orr.w	r3, r3, #2
 800b8f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b8f6:	4b35      	ldr	r3, [pc, #212]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	f003 0302 	and.w	r3, r3, #2
 800b8fe:	61bb      	str	r3, [r7, #24]
 800b900:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b902:	2300      	movs	r3, #0
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	4b31      	ldr	r3, [pc, #196]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	4a30      	ldr	r2, [pc, #192]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b90c:	f043 0301 	orr.w	r3, r3, #1
 800b910:	6313      	str	r3, [r2, #48]	; 0x30
 800b912:	4b2e      	ldr	r3, [pc, #184]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	617b      	str	r3, [r7, #20]
 800b91c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b91e:	2340      	movs	r3, #64	; 0x40
 800b920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b922:	2312      	movs	r3, #18
 800b924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b926:	2300      	movs	r3, #0
 800b928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b92a:	2303      	movs	r3, #3
 800b92c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b92e:	2302      	movs	r3, #2
 800b930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b936:	4619      	mov	r1, r3
 800b938:	4825      	ldr	r0, [pc, #148]	; (800b9d0 <HAL_TIM_IC_MspInit+0x180>)
 800b93a:	f000 ff9f 	bl	800c87c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800b93e:	2200      	movs	r2, #0
 800b940:	2106      	movs	r1, #6
 800b942:	201d      	movs	r0, #29
 800b944:	f000 fec2 	bl	800c6cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b948:	201d      	movs	r0, #29
 800b94a:	f000 fedb 	bl	800c704 <HAL_NVIC_EnableIRQ>
}
 800b94e:	e038      	b.n	800b9c2 <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM4)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a20      	ldr	r2, [pc, #128]	; (800b9d8 <HAL_TIM_IC_MspInit+0x188>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d133      	bne.n	800b9c2 <HAL_TIM_IC_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b95a:	2300      	movs	r3, #0
 800b95c:	613b      	str	r3, [r7, #16]
 800b95e:	4b1b      	ldr	r3, [pc, #108]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	4a1a      	ldr	r2, [pc, #104]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b964:	f043 0304 	orr.w	r3, r3, #4
 800b968:	6413      	str	r3, [r2, #64]	; 0x40
 800b96a:	4b18      	ldr	r3, [pc, #96]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	613b      	str	r3, [r7, #16]
 800b974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	4b14      	ldr	r3, [pc, #80]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97e:	4a13      	ldr	r2, [pc, #76]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b980:	f043 0302 	orr.w	r3, r3, #2
 800b984:	6313      	str	r3, [r2, #48]	; 0x30
 800b986:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <HAL_TIM_IC_MspInit+0x17c>)
 800b988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b992:	2340      	movs	r3, #64	; 0x40
 800b994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b996:	2312      	movs	r3, #18
 800b998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b9a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	480b      	ldr	r0, [pc, #44]	; (800b9dc <HAL_TIM_IC_MspInit+0x18c>)
 800b9ae:	f000 ff65 	bl	800c87c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2106      	movs	r1, #6
 800b9b6:	201e      	movs	r0, #30
 800b9b8:	f000 fe88 	bl	800c6cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b9bc:	201e      	movs	r0, #30
 800b9be:	f000 fea1 	bl	800c704 <HAL_NVIC_EnableIRQ>
}
 800b9c2:	bf00      	nop
 800b9c4:	3738      	adds	r7, #56	; 0x38
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	40023800 	.word	0x40023800
 800b9d0:	40020000 	.word	0x40020000
 800b9d4:	40000400 	.word	0x40000400
 800b9d8:	40000800 	.word	0x40000800
 800b9dc:	40020400 	.word	0x40020400

0800b9e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08c      	sub	sp, #48	; 0x30
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9e8:	f107 031c 	add.w	r3, r7, #28
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	605a      	str	r2, [r3, #4]
 800b9f2:	609a      	str	r2, [r3, #8]
 800b9f4:	60da      	str	r2, [r3, #12]
 800b9f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a49      	ldr	r2, [pc, #292]	; (800bb24 <HAL_UART_MspInit+0x144>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d134      	bne.n	800ba6c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ba02:	2300      	movs	r3, #0
 800ba04:	61bb      	str	r3, [r7, #24]
 800ba06:	4b48      	ldr	r3, [pc, #288]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0a:	4a47      	ldr	r2, [pc, #284]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba10:	6413      	str	r3, [r2, #64]	; 0x40
 800ba12:	4b45      	ldr	r3, [pc, #276]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba1a:	61bb      	str	r3, [r7, #24]
 800ba1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	4b41      	ldr	r3, [pc, #260]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba26:	4a40      	ldr	r2, [pc, #256]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba28:	f043 0301 	orr.w	r3, r3, #1
 800ba2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ba2e:	4b3e      	ldr	r3, [pc, #248]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba32:	f003 0301 	and.w	r3, r3, #1
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba46:	2303      	movs	r3, #3
 800ba48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ba4a:	2307      	movs	r3, #7
 800ba4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba4e:	f107 031c 	add.w	r3, r7, #28
 800ba52:	4619      	mov	r1, r3
 800ba54:	4835      	ldr	r0, [pc, #212]	; (800bb2c <HAL_UART_MspInit+0x14c>)
 800ba56:	f000 ff11 	bl	800c87c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2106      	movs	r1, #6
 800ba5e:	2026      	movs	r0, #38	; 0x26
 800ba60:	f000 fe34 	bl	800c6cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ba64:	2026      	movs	r0, #38	; 0x26
 800ba66:	f000 fe4d 	bl	800c704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800ba6a:	e057      	b.n	800bb1c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a2f      	ldr	r2, [pc, #188]	; (800bb30 <HAL_UART_MspInit+0x150>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d152      	bne.n	800bb1c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ba76:	2300      	movs	r3, #0
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	4b2b      	ldr	r3, [pc, #172]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	4a2a      	ldr	r2, [pc, #168]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba84:	6413      	str	r3, [r2, #64]	; 0x40
 800ba86:	4b28      	ldr	r3, [pc, #160]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba8e:	613b      	str	r3, [r7, #16]
 800ba90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	4b24      	ldr	r3, [pc, #144]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9a:	4a23      	ldr	r2, [pc, #140]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800ba9c:	f043 0304 	orr.w	r3, r3, #4
 800baa0:	6313      	str	r3, [r2, #48]	; 0x30
 800baa2:	4b21      	ldr	r3, [pc, #132]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800baa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa6:	f003 0304 	and.w	r3, r3, #4
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800baae:	2300      	movs	r3, #0
 800bab0:	60bb      	str	r3, [r7, #8]
 800bab2:	4b1d      	ldr	r3, [pc, #116]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	4a1c      	ldr	r2, [pc, #112]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800bab8:	f043 0302 	orr.w	r3, r3, #2
 800babc:	6313      	str	r3, [r2, #48]	; 0x30
 800babe:	4b1a      	ldr	r3, [pc, #104]	; (800bb28 <HAL_UART_MspInit+0x148>)
 800bac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	60bb      	str	r3, [r7, #8]
 800bac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800baca:	2320      	movs	r3, #32
 800bacc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bace:	2302      	movs	r3, #2
 800bad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bad2:	2300      	movs	r3, #0
 800bad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bad6:	2303      	movs	r3, #3
 800bad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bada:	2307      	movs	r3, #7
 800badc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bade:	f107 031c 	add.w	r3, r7, #28
 800bae2:	4619      	mov	r1, r3
 800bae4:	4813      	ldr	r0, [pc, #76]	; (800bb34 <HAL_UART_MspInit+0x154>)
 800bae6:	f000 fec9 	bl	800c87c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800baea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baf0:	2302      	movs	r3, #2
 800baf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baf4:	2300      	movs	r3, #0
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baf8:	2303      	movs	r3, #3
 800bafa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bafc:	2307      	movs	r3, #7
 800bafe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb00:	f107 031c 	add.w	r3, r7, #28
 800bb04:	4619      	mov	r1, r3
 800bb06:	480c      	ldr	r0, [pc, #48]	; (800bb38 <HAL_UART_MspInit+0x158>)
 800bb08:	f000 feb8 	bl	800c87c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2106      	movs	r1, #6
 800bb10:	2027      	movs	r0, #39	; 0x27
 800bb12:	f000 fddb 	bl	800c6cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800bb16:	2027      	movs	r0, #39	; 0x27
 800bb18:	f000 fdf4 	bl	800c704 <HAL_NVIC_EnableIRQ>
}
 800bb1c:	bf00      	nop
 800bb1e:	3730      	adds	r7, #48	; 0x30
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	40004400 	.word	0x40004400
 800bb28:	40023800 	.word	0x40023800
 800bb2c:	40020000 	.word	0x40020000
 800bb30:	40004800 	.word	0x40004800
 800bb34:	40020800 	.word	0x40020800
 800bb38:	40020400 	.word	0x40020400

0800bb3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08e      	sub	sp, #56	; 0x38
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800bb44:	2300      	movs	r3, #0
 800bb46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	4b33      	ldr	r3, [pc, #204]	; (800bc20 <HAL_InitTick+0xe4>)
 800bb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb54:	4a32      	ldr	r2, [pc, #200]	; (800bc20 <HAL_InitTick+0xe4>)
 800bb56:	f043 0310 	orr.w	r3, r3, #16
 800bb5a:	6413      	str	r3, [r2, #64]	; 0x40
 800bb5c:	4b30      	ldr	r3, [pc, #192]	; (800bc20 <HAL_InitTick+0xe4>)
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	f003 0310 	and.w	r3, r3, #16
 800bb64:	60fb      	str	r3, [r7, #12]
 800bb66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bb68:	f107 0210 	add.w	r2, r7, #16
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4611      	mov	r1, r2
 800bb72:	4618      	mov	r0, r3
 800bb74:	f001 f964 	bl	800ce40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800bb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d103      	bne.n	800bb8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800bb82:	f001 f935 	bl	800cdf0 <HAL_RCC_GetPCLK1Freq>
 800bb86:	6378      	str	r0, [r7, #52]	; 0x34
 800bb88:	e004      	b.n	800bb94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800bb8a:	f001 f931 	bl	800cdf0 <HAL_RCC_GetPCLK1Freq>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800bb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb96:	4a23      	ldr	r2, [pc, #140]	; (800bc24 <HAL_InitTick+0xe8>)
 800bb98:	fba2 2303 	umull	r2, r3, r2, r3
 800bb9c:	0c9b      	lsrs	r3, r3, #18
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800bba2:	4b21      	ldr	r3, [pc, #132]	; (800bc28 <HAL_InitTick+0xec>)
 800bba4:	4a21      	ldr	r2, [pc, #132]	; (800bc2c <HAL_InitTick+0xf0>)
 800bba6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800bba8:	4b1f      	ldr	r3, [pc, #124]	; (800bc28 <HAL_InitTick+0xec>)
 800bbaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bbae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800bbb0:	4a1d      	ldr	r2, [pc, #116]	; (800bc28 <HAL_InitTick+0xec>)
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800bbb6:	4b1c      	ldr	r3, [pc, #112]	; (800bc28 <HAL_InitTick+0xec>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bbbc:	4b1a      	ldr	r3, [pc, #104]	; (800bc28 <HAL_InitTick+0xec>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <HAL_InitTick+0xec>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800bbc8:	4817      	ldr	r0, [pc, #92]	; (800bc28 <HAL_InitTick+0xec>)
 800bbca:	f001 fe39 	bl	800d840 <HAL_TIM_Base_Init>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800bbd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d11b      	bne.n	800bc14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800bbdc:	4812      	ldr	r0, [pc, #72]	; (800bc28 <HAL_InitTick+0xec>)
 800bbde:	f001 fee7 	bl	800d9b0 <HAL_TIM_Base_Start_IT>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800bbe8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d111      	bne.n	800bc14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bbf0:	2036      	movs	r0, #54	; 0x36
 800bbf2:	f000 fd87 	bl	800c704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b0f      	cmp	r3, #15
 800bbfa:	d808      	bhi.n	800bc0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	2036      	movs	r0, #54	; 0x36
 800bc02:	f000 fd63 	bl	800c6cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bc06:	4a0a      	ldr	r2, [pc, #40]	; (800bc30 <HAL_InitTick+0xf4>)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	e002      	b.n	800bc14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800bc14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3738      	adds	r7, #56	; 0x38
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	40023800 	.word	0x40023800
 800bc24:	431bde83 	.word	0x431bde83
 800bc28:	2001941c 	.word	0x2001941c
 800bc2c:	40001000 	.word	0x40001000
 800bc30:	2000000c 	.word	0x2000000c

0800bc34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bc34:	b480      	push	{r7}
 800bc36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800bc38:	e7fe      	b.n	800bc38 <NMI_Handler+0x4>

0800bc3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bc3e:	e7fe      	b.n	800bc3e <HardFault_Handler+0x4>

0800bc40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bc40:	b480      	push	{r7}
 800bc42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bc44:	e7fe      	b.n	800bc44 <MemManage_Handler+0x4>

0800bc46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bc46:	b480      	push	{r7}
 800bc48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bc4a:	e7fe      	b.n	800bc4a <BusFault_Handler+0x4>

0800bc4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bc50:	e7fe      	b.n	800bc50 <UsageFault_Handler+0x4>

0800bc52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bc52:	b480      	push	{r7}
 800bc54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bc56:	bf00      	nop
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800bc64:	4802      	ldr	r0, [pc, #8]	; (800bc70 <TIM2_IRQHandler+0x10>)
 800bc66:	f002 f939 	bl	800dedc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800bc6a:	bf00      	nop
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20019288 	.word	0x20019288

0800bc74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800bc78:	4802      	ldr	r0, [pc, #8]	; (800bc84 <TIM3_IRQHandler+0x10>)
 800bc7a:	f002 f92f 	bl	800dedc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800bc7e:	bf00      	nop
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	200192d0 	.word	0x200192d0

0800bc88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800bc8c:	4802      	ldr	r0, [pc, #8]	; (800bc98 <TIM4_IRQHandler+0x10>)
 800bc8e:	f002 f925 	bl	800dedc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800bc92:	bf00      	nop
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20019318 	.word	0x20019318

0800bc9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800bca0:	4802      	ldr	r0, [pc, #8]	; (800bcac <USART2_IRQHandler+0x10>)
 800bca2:	f002 ff3d 	bl	800eb20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800bca6:	bf00      	nop
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	20019360 	.word	0x20019360

0800bcb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800bcb4:	4802      	ldr	r0, [pc, #8]	; (800bcc0 <USART3_IRQHandler+0x10>)
 800bcb6:	f002 ff33 	bl	800eb20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800bcba:	bf00      	nop
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	200193a4 	.word	0x200193a4

0800bcc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800bcc8:	4802      	ldr	r0, [pc, #8]	; (800bcd4 <TIM6_DAC_IRQHandler+0x10>)
 800bcca:	f002 f907 	bl	800dedc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800bcce:	bf00      	nop
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	2001941c 	.word	0x2001941c

0800bcd8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800bce2:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <ITM_SendChar+0x48>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a0e      	ldr	r2, [pc, #56]	; (800bd20 <ITM_SendChar+0x48>)
 800bce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800bcee:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <ITM_SendChar+0x4c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a0c      	ldr	r2, [pc, #48]	; (800bd24 <ITM_SendChar+0x4c>)
 800bcf4:	f043 0301 	orr.w	r3, r3, #1
 800bcf8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800bcfa:	bf00      	nop
 800bcfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d0f8      	beq.n	800bcfc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800bd0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	6013      	str	r3, [r2, #0]
}
 800bd12:	bf00      	nop
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	e000edfc 	.word	0xe000edfc
 800bd24:	e0000e00 	.word	0xe0000e00

0800bd28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd34:	2300      	movs	r3, #0
 800bd36:	617b      	str	r3, [r7, #20]
 800bd38:	e00a      	b.n	800bd50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800bd3a:	f3af 8000 	nop.w
 800bd3e:	4601      	mov	r1, r0
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	60ba      	str	r2, [r7, #8]
 800bd46:	b2ca      	uxtb	r2, r1
 800bd48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	dbf0      	blt.n	800bd3a <_read+0x12>
  }

  return len;
 800bd58:	687b      	ldr	r3, [r7, #4]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b086      	sub	sp, #24
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	60f8      	str	r0, [r7, #12]
 800bd6a:	60b9      	str	r1, [r7, #8]
 800bd6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd6e:	2300      	movs	r3, #0
 800bd70:	617b      	str	r3, [r7, #20]
 800bd72:	e009      	b.n	800bd88 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	60ba      	str	r2, [r7, #8]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff ffab 	bl	800bcd8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	3301      	adds	r3, #1
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	697a      	ldr	r2, [r7, #20]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	dbf1      	blt.n	800bd74 <_write+0x12>
  }
  return len;
 800bd90:	687b      	ldr	r3, [r7, #4]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <_close>:

int _close(int file)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bda2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bdc2:	605a      	str	r2, [r3, #4]
  return 0;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <_isatty>:

int _isatty(int file)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b083      	sub	sp, #12
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bdda:	2301      	movs	r3, #1
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
	...

0800be04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800be0c:	4a14      	ldr	r2, [pc, #80]	; (800be60 <_sbrk+0x5c>)
 800be0e:	4b15      	ldr	r3, [pc, #84]	; (800be64 <_sbrk+0x60>)
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800be18:	4b13      	ldr	r3, [pc, #76]	; (800be68 <_sbrk+0x64>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d102      	bne.n	800be26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800be20:	4b11      	ldr	r3, [pc, #68]	; (800be68 <_sbrk+0x64>)
 800be22:	4a12      	ldr	r2, [pc, #72]	; (800be6c <_sbrk+0x68>)
 800be24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800be26:	4b10      	ldr	r3, [pc, #64]	; (800be68 <_sbrk+0x64>)
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4413      	add	r3, r2
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	429a      	cmp	r2, r3
 800be32:	d207      	bcs.n	800be44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800be34:	f003 fd6e 	bl	800f914 <__errno>
 800be38:	4603      	mov	r3, r0
 800be3a:	220c      	movs	r2, #12
 800be3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800be3e:	f04f 33ff 	mov.w	r3, #4294967295
 800be42:	e009      	b.n	800be58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800be44:	4b08      	ldr	r3, [pc, #32]	; (800be68 <_sbrk+0x64>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800be4a:	4b07      	ldr	r3, [pc, #28]	; (800be68 <_sbrk+0x64>)
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4413      	add	r3, r2
 800be52:	4a05      	ldr	r2, [pc, #20]	; (800be68 <_sbrk+0x64>)
 800be54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800be56:	68fb      	ldr	r3, [r7, #12]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20020000 	.word	0x20020000
 800be64:	00000400 	.word	0x00000400
 800be68:	20019464 	.word	0x20019464
 800be6c:	200194d0 	.word	0x200194d0

0800be70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800be70:	b480      	push	{r7}
 800be72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800be74:	4b07      	ldr	r3, [pc, #28]	; (800be94 <SystemInit+0x24>)
 800be76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be7a:	4a06      	ldr	r2, [pc, #24]	; (800be94 <SystemInit+0x24>)
 800be7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800be84:	4b03      	ldr	r3, [pc, #12]	; (800be94 <SystemInit+0x24>)
 800be86:	4a04      	ldr	r2, [pc, #16]	; (800be98 <SystemInit+0x28>)
 800be88:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800be8a:	bf00      	nop
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	e000ed00 	.word	0xe000ed00
 800be98:	08008000 	.word	0x08008000

0800be9c <Trigger_US_left>:

uint8_t msg[]="Hello there \n";



void Trigger_US_left(void *para){
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]

	while(1){

		/*This function will set the trigger pin high for 10
		microseconds to trigger the ULTRASONIC sensor*/
		Trigger_UltraSonic(TRIG_PORT, &htim1, TRIG_LEFT_PIN);
 800bea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bea8:	4903      	ldr	r1, [pc, #12]	; (800beb8 <Trigger_US_left+0x1c>)
 800beaa:	4804      	ldr	r0, [pc, #16]	; (800bebc <Trigger_US_left+0x20>)
 800beac:	f000 fac8 	bl	800c440 <Trigger_UltraSonic>

		/*This task will be delayed for 500 MS */
		vTaskDelay(pdMS_TO_TICKS(200));
 800beb0:	20c8      	movs	r0, #200	; 0xc8
 800beb2:	f7fd fa8f 	bl	80093d4 <vTaskDelay>
		Trigger_UltraSonic(TRIG_PORT, &htim1, TRIG_LEFT_PIN);
 800beb6:	e7f5      	b.n	800bea4 <Trigger_US_left+0x8>
 800beb8:	20019240 	.word	0x20019240
 800bebc:	40020800 	.word	0x40020800

0800bec0 <Trigger_US_right>:
		}

}

void Trigger_US_right(void *para){
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]

	while(1){

		/*This function will set the trigger pin high for 10
		microseconds to trigger the ULTRASONIC sensor*/
		Trigger_UltraSonic(TRIG_PORT, &htim1, TRIG_RIGHT_PIN);
 800bec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800becc:	4903      	ldr	r1, [pc, #12]	; (800bedc <Trigger_US_right+0x1c>)
 800bece:	4804      	ldr	r0, [pc, #16]	; (800bee0 <Trigger_US_right+0x20>)
 800bed0:	f000 fab6 	bl	800c440 <Trigger_UltraSonic>

		/*This task will be delayed for 500 MS */
		vTaskDelay(pdMS_TO_TICKS(200));
 800bed4:	20c8      	movs	r0, #200	; 0xc8
 800bed6:	f7fd fa7d 	bl	80093d4 <vTaskDelay>
		Trigger_UltraSonic(TRIG_PORT, &htim1, TRIG_RIGHT_PIN);
 800beda:	e7f5      	b.n	800bec8 <Trigger_US_right+0x8>
 800bedc:	20019240 	.word	0x20019240
 800bee0:	40020800 	.word	0x40020800

0800bee4 <Trigger_US_middle>:
		}

}

void Trigger_US_middle(void *para){
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]

	while(1){

		/*This function will set the trigger pin high for 10
		microseconds to trigger the ULTRASONIC sensor*/
		Trigger_UltraSonic(TRIG_PORT, &htim1, TRIG_MIDDLE_PIN);
 800beec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bef0:	4903      	ldr	r1, [pc, #12]	; (800bf00 <Trigger_US_middle+0x1c>)
 800bef2:	4804      	ldr	r0, [pc, #16]	; (800bf04 <Trigger_US_middle+0x20>)
 800bef4:	f000 faa4 	bl	800c440 <Trigger_UltraSonic>

		/*This task will be delayed for 500 MS */
		vTaskDelay(pdMS_TO_TICKS(200));
 800bef8:	20c8      	movs	r0, #200	; 0xc8
 800befa:	f7fd fa6b 	bl	80093d4 <vTaskDelay>
		Trigger_UltraSonic(TRIG_PORT, &htim1, TRIG_MIDDLE_PIN);
 800befe:	e7f5      	b.n	800beec <Trigger_US_middle+0x8>
 800bf00:	20019240 	.word	0x20019240
 800bf04:	40020800 	.word	0x40020800

0800bf08 <Handle_US_Reading>:
	}
}

void Handle_US_Reading(void *para){
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	6078      	str	r0, [r7, #4]

	while(1){

		/*This line is sending this task to the blocked state
		until it gets notified from the ISR of the ICU*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800bf10:	f04f 33ff 	mov.w	r3, #4294967295
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	2300      	movs	r3, #0
 800bf18:	2200      	movs	r2, #0
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f7fd ff07 	bl	8009d30 <xTaskGenericNotifyWait>
        __asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	60fb      	str	r3, [r7, #12]
    }
 800bf34:	bf00      	nop

		taskDISABLE_INTERRUPTS();

		/*checking which ULTRASONIC started the trigger */
		switch(current_us){
 800bf36:	4b42      	ldr	r3, [pc, #264]	; (800c040 <Handle_US_Reading+0x138>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d006      	beq.n	800bf4c <Handle_US_Reading+0x44>
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	dc77      	bgt.n	800c032 <Handle_US_Reading+0x12a>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d04e      	beq.n	800bfe4 <Handle_US_Reading+0xdc>
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d026      	beq.n	800bf98 <Handle_US_Reading+0x90>
 800bf4a:	e072      	b.n	800c032 <Handle_US_Reading+0x12a>
			case LeftUS:
			/*Receiving the data from the queue (ONLY THE ISR is sending data to the queue)*/
				/*the data is the time taken by the US Waves to bounce from the obstacle x2*/
			xQueueReceive(Queue_LeftReading, &ICU_READL, portMAX_DELAY);
 800bf4c:	4b3d      	ldr	r3, [pc, #244]	; (800c044 <Handle_US_Reading+0x13c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f04f 32ff 	mov.w	r2, #4294967295
 800bf54:	493c      	ldr	r1, [pc, #240]	; (800c048 <Handle_US_Reading+0x140>)
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fc fe9e 	bl	8008c98 <xQueueReceive>

			/*Calculating the distance */
			distanceL=(ICU_READL/2)/29;
 800bf5c:	4b3a      	ldr	r3, [pc, #232]	; (800c048 <Handle_US_Reading+0x140>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a3a      	ldr	r2, [pc, #232]	; (800c04c <Handle_US_Reading+0x144>)
 800bf62:	fb82 1203 	smull	r1, r2, r2, r3
 800bf66:	441a      	add	r2, r3
 800bf68:	1152      	asrs	r2, r2, #5
 800bf6a:	17db      	asrs	r3, r3, #31
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	4a38      	ldr	r2, [pc, #224]	; (800c050 <Handle_US_Reading+0x148>)
 800bf70:	6013      	str	r3, [r2, #0]
			prevL=distanceL;
 800bf72:	4b37      	ldr	r3, [pc, #220]	; (800c050 <Handle_US_Reading+0x148>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a37      	ldr	r2, [pc, #220]	; (800c054 <Handle_US_Reading+0x14c>)
 800bf78:	6013      	str	r3, [r2, #0]
			printf("Left : %d\n",distanceL);
 800bf7a:	4b35      	ldr	r3, [pc, #212]	; (800c050 <Handle_US_Reading+0x148>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4835      	ldr	r0, [pc, #212]	; (800c058 <Handle_US_Reading+0x150>)
 800bf82:	f003 fd07 	bl	800f994 <iprintf>
			if(distanceL < 9){
 800bf86:	4b32      	ldr	r3, [pc, #200]	; (800c050 <Handle_US_Reading+0x148>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b08      	cmp	r3, #8
 800bf8c:	dc4c      	bgt.n	800c028 <Handle_US_Reading+0x120>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800bf8e:	2104      	movs	r1, #4
 800bf90:	4832      	ldr	r0, [pc, #200]	; (800c05c <Handle_US_Reading+0x154>)
 800bf92:	f000 fe20 	bl	800cbd6 <HAL_GPIO_TogglePin>

			}
			else{
				//Do nothing
			}
				break;
 800bf96:	e047      	b.n	800c028 <Handle_US_Reading+0x120>

			/*SAME Here but for the RIGHT US*/
			case RightUS:
				xQueueReceive(Queue_RightReading, &ICU_READR, portMAX_DELAY);
 800bf98:	4b31      	ldr	r3, [pc, #196]	; (800c060 <Handle_US_Reading+0x158>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa0:	4930      	ldr	r1, [pc, #192]	; (800c064 <Handle_US_Reading+0x15c>)
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fc fe78 	bl	8008c98 <xQueueReceive>

				distanceR=(ICU_READR/2)/29;
 800bfa8:	4b2e      	ldr	r3, [pc, #184]	; (800c064 <Handle_US_Reading+0x15c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a27      	ldr	r2, [pc, #156]	; (800c04c <Handle_US_Reading+0x144>)
 800bfae:	fb82 1203 	smull	r1, r2, r2, r3
 800bfb2:	441a      	add	r2, r3
 800bfb4:	1152      	asrs	r2, r2, #5
 800bfb6:	17db      	asrs	r3, r3, #31
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	4a2b      	ldr	r2, [pc, #172]	; (800c068 <Handle_US_Reading+0x160>)
 800bfbc:	6013      	str	r3, [r2, #0]
				prevR=distanceR;
 800bfbe:	4b2a      	ldr	r3, [pc, #168]	; (800c068 <Handle_US_Reading+0x160>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a2a      	ldr	r2, [pc, #168]	; (800c06c <Handle_US_Reading+0x164>)
 800bfc4:	6013      	str	r3, [r2, #0]
				printf("Right : %d\n",distanceR);
 800bfc6:	4b28      	ldr	r3, [pc, #160]	; (800c068 <Handle_US_Reading+0x160>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4828      	ldr	r0, [pc, #160]	; (800c070 <Handle_US_Reading+0x168>)
 800bfce:	f003 fce1 	bl	800f994 <iprintf>
					if(distanceR < 9){
 800bfd2:	4b25      	ldr	r3, [pc, #148]	; (800c068 <Handle_US_Reading+0x160>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b08      	cmp	r3, #8
 800bfd8:	dc28      	bgt.n	800c02c <Handle_US_Reading+0x124>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800bfda:	2108      	movs	r1, #8
 800bfdc:	481f      	ldr	r0, [pc, #124]	; (800c05c <Handle_US_Reading+0x154>)
 800bfde:	f000 fdfa 	bl	800cbd6 <HAL_GPIO_TogglePin>
						//xTimerStart(handle_software_timer,0);
					}
					else{
						//Do nothing
					}
				break;
 800bfe2:	e023      	b.n	800c02c <Handle_US_Reading+0x124>

			case MiddleUS:

				xQueueReceive(Queue_MiddleReading, &ICU_READM, portMAX_DELAY);
 800bfe4:	4b23      	ldr	r3, [pc, #140]	; (800c074 <Handle_US_Reading+0x16c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfec:	4922      	ldr	r1, [pc, #136]	; (800c078 <Handle_US_Reading+0x170>)
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fc fe52 	bl	8008c98 <xQueueReceive>

				distanceM=(ICU_READM/2)/29;
 800bff4:	4b20      	ldr	r3, [pc, #128]	; (800c078 <Handle_US_Reading+0x170>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a14      	ldr	r2, [pc, #80]	; (800c04c <Handle_US_Reading+0x144>)
 800bffa:	fb82 1203 	smull	r1, r2, r2, r3
 800bffe:	441a      	add	r2, r3
 800c000:	1152      	asrs	r2, r2, #5
 800c002:	17db      	asrs	r3, r3, #31
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	4a1d      	ldr	r2, [pc, #116]	; (800c07c <Handle_US_Reading+0x174>)
 800c008:	6013      	str	r3, [r2, #0]

				printf("Middle : %d\n",distanceM);
 800c00a:	4b1c      	ldr	r3, [pc, #112]	; (800c07c <Handle_US_Reading+0x174>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4619      	mov	r1, r3
 800c010:	481b      	ldr	r0, [pc, #108]	; (800c080 <Handle_US_Reading+0x178>)
 800c012:	f003 fcbf 	bl	800f994 <iprintf>
					if(distanceM < 9){
 800c016:	4b19      	ldr	r3, [pc, #100]	; (800c07c <Handle_US_Reading+0x174>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b08      	cmp	r3, #8
 800c01c:	dc08      	bgt.n	800c030 <Handle_US_Reading+0x128>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800c01e:	2102      	movs	r1, #2
 800c020:	480e      	ldr	r0, [pc, #56]	; (800c05c <Handle_US_Reading+0x154>)
 800c022:	f000 fdd8 	bl	800cbd6 <HAL_GPIO_TogglePin>
						}
					}
					else{
						/*Do nothing*/
					}
					break;
 800c026:	e003      	b.n	800c030 <Handle_US_Reading+0x128>
				break;
 800c028:	bf00      	nop
 800c02a:	e002      	b.n	800c032 <Handle_US_Reading+0x12a>
				break;
 800c02c:	bf00      	nop
 800c02e:	e000      	b.n	800c032 <Handle_US_Reading+0x12a>
					break;
 800c030:	bf00      	nop
 800c032:	2300      	movs	r3, #0
 800c034:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	f383 8811 	msr	BASEPRI, r3
    }
 800c03c:	bf00      	nop
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800c03e:	e767      	b.n	800bf10 <Handle_US_Reading+0x8>
 800c040:	200193e8 	.word	0x200193e8
 800c044:	20019404 	.word	0x20019404
 800c048:	20019468 	.word	0x20019468
 800c04c:	8d3dcb09 	.word	0x8d3dcb09
 800c050:	2001946c 	.word	0x2001946c
 800c054:	20019470 	.word	0x20019470
 800c058:	08010938 	.word	0x08010938
 800c05c:	40020800 	.word	0x40020800
 800c060:	20019408 	.word	0x20019408
 800c064:	20019474 	.word	0x20019474
 800c068:	20019478 	.word	0x20019478
 800c06c:	2001947c 	.word	0x2001947c
 800c070:	08010944 	.word	0x08010944
 800c074:	2001940c 	.word	0x2001940c
 800c078:	20019480 	.word	0x20019480
 800c07c:	20019484 	.word	0x20019484
 800c080:	08010950 	.word	0x08010950

0800c084 <Handle_UART_Reading>:
		}

}


void Handle_UART_Reading(void *param){
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
uint8_t state;
	while(1){
		xQueueReceive(Queue_UARTStatus, (void*)&state, portMAX_DELAY);
 800c08c:	4b46      	ldr	r3, [pc, #280]	; (800c1a8 <Handle_UART_Reading+0x124>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f107 010f 	add.w	r1, r7, #15
 800c094:	f04f 32ff 	mov.w	r2, #4294967295
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fc fdfd 	bl	8008c98 <xQueueReceive>

		switch(state){
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	2b6b      	cmp	r3, #107	; 0x6b
 800c0a2:	dc53      	bgt.n	800c14c <Handle_UART_Reading+0xc8>
 800c0a4:	2b46      	cmp	r3, #70	; 0x46
 800c0a6:	dbf1      	blt.n	800c08c <Handle_UART_Reading+0x8>
 800c0a8:	3b46      	subs	r3, #70	; 0x46
 800c0aa:	2b25      	cmp	r3, #37	; 0x25
 800c0ac:	d8ee      	bhi.n	800c08c <Handle_UART_Reading+0x8>
 800c0ae:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <Handle_UART_Reading+0x30>)
 800c0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b4:	0800c167 	.word	0x0800c167
 800c0b8:	0800c08d 	.word	0x0800c08d
 800c0bc:	0800c08d 	.word	0x0800c08d
 800c0c0:	0800c08d 	.word	0x0800c08d
 800c0c4:	0800c08d 	.word	0x0800c08d
 800c0c8:	0800c08d 	.word	0x0800c08d
 800c0cc:	0800c153 	.word	0x0800c153
 800c0d0:	0800c08d 	.word	0x0800c08d
 800c0d4:	0800c08d 	.word	0x0800c08d
 800c0d8:	0800c08d 	.word	0x0800c08d
 800c0dc:	0800c08d 	.word	0x0800c08d
 800c0e0:	0800c08d 	.word	0x0800c08d
 800c0e4:	0800c15d 	.word	0x0800c15d
 800c0e8:	0800c08d 	.word	0x0800c08d
 800c0ec:	0800c08d 	.word	0x0800c08d
 800c0f0:	0800c08d 	.word	0x0800c08d
 800c0f4:	0800c08d 	.word	0x0800c08d
 800c0f8:	0800c171 	.word	0x0800c171
 800c0fc:	0800c08d 	.word	0x0800c08d
 800c100:	0800c08d 	.word	0x0800c08d
 800c104:	0800c08d 	.word	0x0800c08d
 800c108:	0800c08d 	.word	0x0800c08d
 800c10c:	0800c08d 	.word	0x0800c08d
 800c110:	0800c08d 	.word	0x0800c08d
 800c114:	0800c08d 	.word	0x0800c08d
 800c118:	0800c08d 	.word	0x0800c08d
 800c11c:	0800c08d 	.word	0x0800c08d
 800c120:	0800c08d 	.word	0x0800c08d
 800c124:	0800c08d 	.word	0x0800c08d
 800c128:	0800c08d 	.word	0x0800c08d
 800c12c:	0800c08d 	.word	0x0800c08d
 800c130:	0800c08d 	.word	0x0800c08d
 800c134:	0800c08d 	.word	0x0800c08d
 800c138:	0800c08d 	.word	0x0800c08d
 800c13c:	0800c08d 	.word	0x0800c08d
 800c140:	0800c08d 	.word	0x0800c08d
 800c144:	0800c08d 	.word	0x0800c08d
 800c148:	0800c08d 	.word	0x0800c08d
 800c14c:	2b77      	cmp	r3, #119	; 0x77
 800c14e:	d01c      	beq.n	800c18a <Handle_UART_Reading+0x106>
 800c150:	e028      	b.n	800c1a4 <Handle_UART_Reading+0x120>

		case 'L':
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800c152:	2102      	movs	r1, #2
 800c154:	4815      	ldr	r0, [pc, #84]	; (800c1ac <Handle_UART_Reading+0x128>)
 800c156:	f000 fd3e 	bl	800cbd6 <HAL_GPIO_TogglePin>
			//Move_Forward();
			break;
 800c15a:	e023      	b.n	800c1a4 <Handle_UART_Reading+0x120>

		case 'R':
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800c15c:	2104      	movs	r1, #4
 800c15e:	4813      	ldr	r0, [pc, #76]	; (800c1ac <Handle_UART_Reading+0x128>)
 800c160:	f000 fd39 	bl	800cbd6 <HAL_GPIO_TogglePin>
			//Move_Right();
			break;
 800c164:	e01e      	b.n	800c1a4 <Handle_UART_Reading+0x120>

		case 'F':
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800c166:	2108      	movs	r1, #8
 800c168:	4810      	ldr	r0, [pc, #64]	; (800c1ac <Handle_UART_Reading+0x128>)
 800c16a:	f000 fd34 	bl	800cbd6 <HAL_GPIO_TogglePin>
			//Move_Left();
			break;
 800c16e:	e019      	b.n	800c1a4 <Handle_UART_Reading+0x120>

		case 'W':
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_2);
 800c170:	2104      	movs	r1, #4
 800c172:	480f      	ldr	r0, [pc, #60]	; (800c1b0 <Handle_UART_Reading+0x12c>)
 800c174:	f001 fe04 	bl	800dd80 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 800c178:	2100      	movs	r1, #0
 800c17a:	480e      	ldr	r0, [pc, #56]	; (800c1b4 <Handle_UART_Reading+0x130>)
 800c17c:	f001 fe00 	bl	800dd80 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800c180:	2100      	movs	r1, #0
 800c182:	480d      	ldr	r0, [pc, #52]	; (800c1b8 <Handle_UART_Reading+0x134>)
 800c184:	f001 fdfc 	bl	800dd80 <HAL_TIM_IC_Stop_IT>
			break;
 800c188:	e00c      	b.n	800c1a4 <Handle_UART_Reading+0x120>

		case 'w':
			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800c18a:	2104      	movs	r1, #4
 800c18c:	4808      	ldr	r0, [pc, #32]	; (800c1b0 <Handle_UART_Reading+0x12c>)
 800c18e:	f001 fccf 	bl	800db30 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800c192:	2100      	movs	r1, #0
 800c194:	4807      	ldr	r0, [pc, #28]	; (800c1b4 <Handle_UART_Reading+0x130>)
 800c196:	f001 fccb 	bl	800db30 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800c19a:	2100      	movs	r1, #0
 800c19c:	4806      	ldr	r0, [pc, #24]	; (800c1b8 <Handle_UART_Reading+0x134>)
 800c19e:	f001 fcc7 	bl	800db30 <HAL_TIM_IC_Start_IT>
			break;
 800c1a2:	bf00      	nop
		xQueueReceive(Queue_UARTStatus, (void*)&state, portMAX_DELAY);
 800c1a4:	e772      	b.n	800c08c <Handle_UART_Reading+0x8>
 800c1a6:	bf00      	nop
 800c1a8:	20019410 	.word	0x20019410
 800c1ac:	40020800 	.word	0x40020800
 800c1b0:	20019288 	.word	0x20019288
 800c1b4:	200192d0 	.word	0x200192d0
 800c1b8:	20019318 	.word	0x20019318

0800c1bc <HAL_TIM_IC_CaptureCallback>:
}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	6078      	str	r0, [r7, #4]



	/*First if condition is checking which timer
	caused the input capture unit to interrupt*/
	if(htim->Instance==TIM2){
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1cc:	d14d      	bne.n	800c26a <HAL_TIM_IC_CaptureCallback+0xae>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2){
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	7f1b      	ldrb	r3, [r3, #28]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	f040 80f0 	bne.w	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
			if(counterL==0)
 800c1d8:	4b79      	ldr	r3, [pc, #484]	; (800c3c0 <HAL_TIM_IC_CaptureCallback+0x204>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10b      	bne.n	800c1f8 <HAL_TIM_IC_CaptureCallback+0x3c>
			{
				/*Getting the timer counter at which the RISING edge happened at the ICU Pin*/
				first_readL= __HAL_TIM_GET_COMPARE(htim , TIM_CHANNEL_2);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e6:	4a77      	ldr	r2, [pc, #476]	; (800c3c4 <HAL_TIM_IC_CaptureCallback+0x208>)
 800c1e8:	6013      	str	r3, [r2, #0]
				counterL++;
 800c1ea:	4b75      	ldr	r3, [pc, #468]	; (800c3c0 <HAL_TIM_IC_CaptureCallback+0x204>)
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	4b73      	ldr	r3, [pc, #460]	; (800c3c0 <HAL_TIM_IC_CaptureCallback+0x204>)
 800c1f4:	701a      	strb	r2, [r3, #0]
				xTaskNotifyFromISR(handle_ReadingUS,0,eNoAction,NULL);
			}

		}
	}
}
 800c1f6:	e0df      	b.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
			else if(counterL==1)
 800c1f8:	4b71      	ldr	r3, [pc, #452]	; (800c3c0 <HAL_TIM_IC_CaptureCallback+0x204>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	f040 80db 	bne.w	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
				second_readL= __HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_2);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c208:	4a6f      	ldr	r2, [pc, #444]	; (800c3c8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800c20a:	6013      	str	r3, [r2, #0]
				counterL=0;
 800c20c:	4b6c      	ldr	r3, [pc, #432]	; (800c3c0 <HAL_TIM_IC_CaptureCallback+0x204>)
 800c20e:	2200      	movs	r2, #0
 800c210:	701a      	strb	r2, [r3, #0]
				if(second_readL>=first_readL){
 800c212:	4b6d      	ldr	r3, [pc, #436]	; (800c3c8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4b6b      	ldr	r3, [pc, #428]	; (800c3c4 <HAL_TIM_IC_CaptureCallback+0x208>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d307      	bcc.n	800c22e <HAL_TIM_IC_CaptureCallback+0x72>
					readingL=second_readL-first_readL;
 800c21e:	4b6a      	ldr	r3, [pc, #424]	; (800c3c8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4b68      	ldr	r3, [pc, #416]	; (800c3c4 <HAL_TIM_IC_CaptureCallback+0x208>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	4a68      	ldr	r2, [pc, #416]	; (800c3cc <HAL_TIM_IC_CaptureCallback+0x210>)
 800c22a:	6013      	str	r3, [r2, #0]
 800c22c:	e007      	b.n	800c23e <HAL_TIM_IC_CaptureCallback+0x82>
					readingL=(0xFFFFFFFF-second_readL)+first_readL;
 800c22e:	4b65      	ldr	r3, [pc, #404]	; (800c3c4 <HAL_TIM_IC_CaptureCallback+0x208>)
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b65      	ldr	r3, [pc, #404]	; (800c3c8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	3b01      	subs	r3, #1
 800c23a:	4a64      	ldr	r2, [pc, #400]	; (800c3cc <HAL_TIM_IC_CaptureCallback+0x210>)
 800c23c:	6013      	str	r3, [r2, #0]
				current_us=LeftUS;
 800c23e:	4b64      	ldr	r3, [pc, #400]	; (800c3d0 <HAL_TIM_IC_CaptureCallback+0x214>)
 800c240:	2202      	movs	r2, #2
 800c242:	701a      	strb	r2, [r3, #0]
				xQueueSendFromISR(Queue_LeftReading,(void*)&readingL,NULL);
 800c244:	4b63      	ldr	r3, [pc, #396]	; (800c3d4 <HAL_TIM_IC_CaptureCallback+0x218>)
 800c246:	6818      	ldr	r0, [r3, #0]
 800c248:	2300      	movs	r3, #0
 800c24a:	2200      	movs	r2, #0
 800c24c:	495f      	ldr	r1, [pc, #380]	; (800c3cc <HAL_TIM_IC_CaptureCallback+0x210>)
 800c24e:	f7fc fc71 	bl	8008b34 <xQueueGenericSendFromISR>
				xTaskNotifyFromISR(handle_ReadingUS,0,eNoAction,NULL);
 800c252:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	2300      	movs	r3, #0
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	2300      	movs	r3, #0
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	2300      	movs	r3, #0
 800c260:	2200      	movs	r2, #0
 800c262:	2100      	movs	r1, #0
 800c264:	f7fd fde4 	bl	8009e30 <xTaskGenericNotifyFromISR>
}
 800c268:	e0a6      	b.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
	else if(htim->Instance ==TIM3){
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a5b      	ldr	r2, [pc, #364]	; (800c3dc <HAL_TIM_IC_CaptureCallback+0x220>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d14f      	bne.n	800c314 <HAL_TIM_IC_CaptureCallback+0x158>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	7f1b      	ldrb	r3, [r3, #28]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	f040 809d 	bne.w	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
			if(counterR==0)
 800c27e:	4b58      	ldr	r3, [pc, #352]	; (800c3e0 <HAL_TIM_IC_CaptureCallback+0x224>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <HAL_TIM_IC_CaptureCallback+0xe2>
				first_readR= __HAL_TIM_GET_COMPARE(htim , TIM_CHANNEL_1);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28c:	4a55      	ldr	r2, [pc, #340]	; (800c3e4 <HAL_TIM_IC_CaptureCallback+0x228>)
 800c28e:	6013      	str	r3, [r2, #0]
				counterR++;
 800c290:	4b53      	ldr	r3, [pc, #332]	; (800c3e0 <HAL_TIM_IC_CaptureCallback+0x224>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	3301      	adds	r3, #1
 800c296:	b2da      	uxtb	r2, r3
 800c298:	4b51      	ldr	r3, [pc, #324]	; (800c3e0 <HAL_TIM_IC_CaptureCallback+0x224>)
 800c29a:	701a      	strb	r2, [r3, #0]
}
 800c29c:	e08c      	b.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
			else if(counterR==1)
 800c29e:	4b50      	ldr	r3, [pc, #320]	; (800c3e0 <HAL_TIM_IC_CaptureCallback+0x224>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	f040 8088 	bne.w	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
				second_readR= __HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ae:	4a4e      	ldr	r2, [pc, #312]	; (800c3e8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800c2b0:	6013      	str	r3, [r2, #0]
				counterR=0;
 800c2b2:	4b4b      	ldr	r3, [pc, #300]	; (800c3e0 <HAL_TIM_IC_CaptureCallback+0x224>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	701a      	strb	r2, [r3, #0]
				if(second_readR>=first_readR){
 800c2b8:	4b4b      	ldr	r3, [pc, #300]	; (800c3e8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	4b49      	ldr	r3, [pc, #292]	; (800c3e4 <HAL_TIM_IC_CaptureCallback+0x228>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d307      	bcc.n	800c2d4 <HAL_TIM_IC_CaptureCallback+0x118>
					readingR=second_readR-first_readR;
 800c2c4:	4b48      	ldr	r3, [pc, #288]	; (800c3e8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	4b46      	ldr	r3, [pc, #280]	; (800c3e4 <HAL_TIM_IC_CaptureCallback+0x228>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	4a47      	ldr	r2, [pc, #284]	; (800c3ec <HAL_TIM_IC_CaptureCallback+0x230>)
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	e009      	b.n	800c2e8 <HAL_TIM_IC_CaptureCallback+0x12c>
					readingR=(0xFFFF-second_readR)+first_readR;
 800c2d4:	4b43      	ldr	r3, [pc, #268]	; (800c3e4 <HAL_TIM_IC_CaptureCallback+0x228>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	4b43      	ldr	r3, [pc, #268]	; (800c3e8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c2e2:	33ff      	adds	r3, #255	; 0xff
 800c2e4:	4a41      	ldr	r2, [pc, #260]	; (800c3ec <HAL_TIM_IC_CaptureCallback+0x230>)
 800c2e6:	6013      	str	r3, [r2, #0]
				current_us=RightUS;
 800c2e8:	4b39      	ldr	r3, [pc, #228]	; (800c3d0 <HAL_TIM_IC_CaptureCallback+0x214>)
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	701a      	strb	r2, [r3, #0]
				xQueueSendFromISR(Queue_RightReading,(void*)&readingR,NULL);
 800c2ee:	4b40      	ldr	r3, [pc, #256]	; (800c3f0 <HAL_TIM_IC_CaptureCallback+0x234>)
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	493d      	ldr	r1, [pc, #244]	; (800c3ec <HAL_TIM_IC_CaptureCallback+0x230>)
 800c2f8:	f7fc fc1c 	bl	8008b34 <xQueueGenericSendFromISR>
				xTaskNotifyFromISR(handle_ReadingUS,0,eNoAction,NULL);
 800c2fc:	4b36      	ldr	r3, [pc, #216]	; (800c3d8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800c2fe:	6818      	ldr	r0, [r3, #0]
 800c300:	2300      	movs	r3, #0
 800c302:	9301      	str	r3, [sp, #4]
 800c304:	2300      	movs	r3, #0
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	2300      	movs	r3, #0
 800c30a:	2200      	movs	r2, #0
 800c30c:	2100      	movs	r1, #0
 800c30e:	f7fd fd8f 	bl	8009e30 <xTaskGenericNotifyFromISR>
}
 800c312:	e051      	b.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
	else if(htim->Instance==TIM4){
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a36      	ldr	r2, [pc, #216]	; (800c3f4 <HAL_TIM_IC_CaptureCallback+0x238>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d14c      	bne.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	7f1b      	ldrb	r3, [r3, #28]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d148      	bne.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
			if(counterM==0)
 800c326:	4b34      	ldr	r3, [pc, #208]	; (800c3f8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10b      	bne.n	800c346 <HAL_TIM_IC_CaptureCallback+0x18a>
				first_readM= __HAL_TIM_GET_COMPARE(htim , TIM_CHANNEL_1);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c334:	4a31      	ldr	r2, [pc, #196]	; (800c3fc <HAL_TIM_IC_CaptureCallback+0x240>)
 800c336:	6013      	str	r3, [r2, #0]
				counterM++;
 800c338:	4b2f      	ldr	r3, [pc, #188]	; (800c3f8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	3301      	adds	r3, #1
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	4b2d      	ldr	r3, [pc, #180]	; (800c3f8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800c342:	701a      	strb	r2, [r3, #0]
}
 800c344:	e038      	b.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
			else if(counterM==1)
 800c346:	4b2c      	ldr	r3, [pc, #176]	; (800c3f8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d134      	bne.n	800c3b8 <HAL_TIM_IC_CaptureCallback+0x1fc>
				second_readM= __HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c354:	4a2a      	ldr	r2, [pc, #168]	; (800c400 <HAL_TIM_IC_CaptureCallback+0x244>)
 800c356:	6013      	str	r3, [r2, #0]
				counterM=0;
 800c358:	4b27      	ldr	r3, [pc, #156]	; (800c3f8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
				if(second_readM>=first_readM){
 800c35e:	4b28      	ldr	r3, [pc, #160]	; (800c400 <HAL_TIM_IC_CaptureCallback+0x244>)
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	4b26      	ldr	r3, [pc, #152]	; (800c3fc <HAL_TIM_IC_CaptureCallback+0x240>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	429a      	cmp	r2, r3
 800c368:	d307      	bcc.n	800c37a <HAL_TIM_IC_CaptureCallback+0x1be>
					readingM=second_readM-first_readM;
 800c36a:	4b25      	ldr	r3, [pc, #148]	; (800c400 <HAL_TIM_IC_CaptureCallback+0x244>)
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	4b23      	ldr	r3, [pc, #140]	; (800c3fc <HAL_TIM_IC_CaptureCallback+0x240>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	4a23      	ldr	r2, [pc, #140]	; (800c404 <HAL_TIM_IC_CaptureCallback+0x248>)
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	e009      	b.n	800c38e <HAL_TIM_IC_CaptureCallback+0x1d2>
					readingM=(0xFFFF-second_readM)+first_readM;
 800c37a:	4b20      	ldr	r3, [pc, #128]	; (800c3fc <HAL_TIM_IC_CaptureCallback+0x240>)
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	4b20      	ldr	r3, [pc, #128]	; (800c400 <HAL_TIM_IC_CaptureCallback+0x244>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c388:	33ff      	adds	r3, #255	; 0xff
 800c38a:	4a1e      	ldr	r2, [pc, #120]	; (800c404 <HAL_TIM_IC_CaptureCallback+0x248>)
 800c38c:	6013      	str	r3, [r2, #0]
				current_us=MiddleUS;
 800c38e:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <HAL_TIM_IC_CaptureCallback+0x214>)
 800c390:	2200      	movs	r2, #0
 800c392:	701a      	strb	r2, [r3, #0]
				xQueueSendFromISR(Queue_MiddleReading,(void*)&readingM,NULL);
 800c394:	4b1c      	ldr	r3, [pc, #112]	; (800c408 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	2300      	movs	r3, #0
 800c39a:	2200      	movs	r2, #0
 800c39c:	4919      	ldr	r1, [pc, #100]	; (800c404 <HAL_TIM_IC_CaptureCallback+0x248>)
 800c39e:	f7fc fbc9 	bl	8008b34 <xQueueGenericSendFromISR>
				xTaskNotifyFromISR(handle_ReadingUS,0,eNoAction,NULL);
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	; (800c3d8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	f7fd fd3c 	bl	8009e30 <xTaskGenericNotifyFromISR>
}
 800c3b8:	bf00      	nop
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	20019488 	.word	0x20019488
 800c3c4:	2001948c 	.word	0x2001948c
 800c3c8:	20019490 	.word	0x20019490
 800c3cc:	20019494 	.word	0x20019494
 800c3d0:	200193e8 	.word	0x200193e8
 800c3d4:	20019404 	.word	0x20019404
 800c3d8:	200193f8 	.word	0x200193f8
 800c3dc:	40000400 	.word	0x40000400
 800c3e0:	20019498 	.word	0x20019498
 800c3e4:	2001949c 	.word	0x2001949c
 800c3e8:	200194a0 	.word	0x200194a0
 800c3ec:	200194a4 	.word	0x200194a4
 800c3f0:	20019408 	.word	0x20019408
 800c3f4:	40000800 	.word	0x40000800
 800c3f8:	200194a8 	.word	0x200194a8
 800c3fc:	200194ac 	.word	0x200194ac
 800c400:	200194b0 	.word	0x200194b0
 800c404:	200194b4 	.word	0x200194b4
 800c408:	2001940c 	.word	0x2001940c

0800c40c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]

	xQueueSendFromISR(Queue_UARTStatus,(void*)&RxBuffer,NULL);
 800c414:	4b07      	ldr	r3, [pc, #28]	; (800c434 <HAL_UART_RxCpltCallback+0x28>)
 800c416:	6818      	ldr	r0, [r3, #0]
 800c418:	2300      	movs	r3, #0
 800c41a:	2200      	movs	r2, #0
 800c41c:	4906      	ldr	r1, [pc, #24]	; (800c438 <HAL_UART_RxCpltCallback+0x2c>)
 800c41e:	f7fc fb89 	bl	8008b34 <xQueueGenericSendFromISR>

	HAL_UART_Receive_IT(&huart3, &RxBuffer, 1);
 800c422:	2201      	movs	r2, #1
 800c424:	4904      	ldr	r1, [pc, #16]	; (800c438 <HAL_UART_RxCpltCallback+0x2c>)
 800c426:	4805      	ldr	r0, [pc, #20]	; (800c43c <HAL_UART_RxCpltCallback+0x30>)
 800c428:	f002 fb49 	bl	800eabe <HAL_UART_Receive_IT>
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20019410 	.word	0x20019410
 800c438:	20019418 	.word	0x20019418
 800c43c:	200193a4 	.word	0x200193a4

0800c440 <Trigger_UltraSonic>:
 *      Author: moham
 */

#include "ultrasonic.h"

void Trigger_UltraSonic(GPIO_TypeDef *pGPIOx , TIM_HandleTypeDef *pHTIMx ,uint16_t PinNumber){
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	4613      	mov	r3, r2
 800c44c:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(pGPIOx, PinNumber, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800c44e:	88fb      	ldrh	r3, [r7, #6]
 800c450:	2201      	movs	r2, #1
 800c452:	4619      	mov	r1, r3
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 fba5 	bl	800cba4 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(pHTIMx, 0);
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2200      	movs	r2, #0
 800c460:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER (pHTIMx) < 10);  // wait for 10 us
 800c462:	bf00      	nop
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	2b09      	cmp	r3, #9
 800c46c:	d9fa      	bls.n	800c464 <Trigger_UltraSonic+0x24>

	HAL_GPIO_WritePin(pGPIOx, PinNumber, GPIO_PIN_RESET);  // pull the TRIG pin low
 800c46e:	88fb      	ldrh	r3, [r7, #6]
 800c470:	2200      	movs	r2, #0
 800c472:	4619      	mov	r1, r3
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f000 fb95 	bl	800cba4 <HAL_GPIO_WritePin>

}
 800c47a:	bf00      	nop
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c484:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c4bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c488:	480d      	ldr	r0, [pc, #52]	; (800c4c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800c48a:	490e      	ldr	r1, [pc, #56]	; (800c4c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800c48c:	4a0e      	ldr	r2, [pc, #56]	; (800c4c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800c48e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c490:	e002      	b.n	800c498 <LoopCopyDataInit>

0800c492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c496:	3304      	adds	r3, #4

0800c498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c49a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c49c:	d3f9      	bcc.n	800c492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c49e:	4a0b      	ldr	r2, [pc, #44]	; (800c4cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800c4a0:	4c0b      	ldr	r4, [pc, #44]	; (800c4d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800c4a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c4a4:	e001      	b.n	800c4aa <LoopFillZerobss>

0800c4a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c4a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c4a8:	3204      	adds	r2, #4

0800c4aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c4aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c4ac:	d3fb      	bcc.n	800c4a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800c4ae:	f7ff fcdf 	bl	800be70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c4b2:	f003 fa35 	bl	800f920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c4b6:	f7fe fd1d 	bl	800aef4 <main>
  bx  lr    
 800c4ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c4bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c4c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c4c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800c4c8:	08010a20 	.word	0x08010a20
  ldr r2, =_sbss
 800c4cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800c4d0:	200194cc 	.word	0x200194cc

0800c4d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c4d4:	e7fe      	b.n	800c4d4 <ADC_IRQHandler>
	...

0800c4d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c4dc:	4b0e      	ldr	r3, [pc, #56]	; (800c518 <HAL_Init+0x40>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a0d      	ldr	r2, [pc, #52]	; (800c518 <HAL_Init+0x40>)
 800c4e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c4e8:	4b0b      	ldr	r3, [pc, #44]	; (800c518 <HAL_Init+0x40>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a0a      	ldr	r2, [pc, #40]	; (800c518 <HAL_Init+0x40>)
 800c4ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c4f4:	4b08      	ldr	r3, [pc, #32]	; (800c518 <HAL_Init+0x40>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a07      	ldr	r2, [pc, #28]	; (800c518 <HAL_Init+0x40>)
 800c4fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c500:	2003      	movs	r0, #3
 800c502:	f000 f8d8 	bl	800c6b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c506:	200f      	movs	r0, #15
 800c508:	f7ff fb18 	bl	800bb3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c50c:	f7ff f934 	bl	800b778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	40023c00 	.word	0x40023c00

0800c51c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c51c:	b480      	push	{r7}
 800c51e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c520:	4b06      	ldr	r3, [pc, #24]	; (800c53c <HAL_IncTick+0x20>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	461a      	mov	r2, r3
 800c526:	4b06      	ldr	r3, [pc, #24]	; (800c540 <HAL_IncTick+0x24>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4413      	add	r3, r2
 800c52c:	4a04      	ldr	r2, [pc, #16]	; (800c540 <HAL_IncTick+0x24>)
 800c52e:	6013      	str	r3, [r2, #0]
}
 800c530:	bf00      	nop
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	20000010 	.word	0x20000010
 800c540:	200194b8 	.word	0x200194b8

0800c544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c544:	b480      	push	{r7}
 800c546:	af00      	add	r7, sp, #0
  return uwTick;
 800c548:	4b03      	ldr	r3, [pc, #12]	; (800c558 <HAL_GetTick+0x14>)
 800c54a:	681b      	ldr	r3, [r3, #0]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	200194b8 	.word	0x200194b8

0800c55c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c56c:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <__NVIC_SetPriorityGrouping+0x44>)
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c578:	4013      	ands	r3, r2
 800c57a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c58c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c58e:	4a04      	ldr	r2, [pc, #16]	; (800c5a0 <__NVIC_SetPriorityGrouping+0x44>)
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	60d3      	str	r3, [r2, #12]
}
 800c594:	bf00      	nop
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	e000ed00 	.word	0xe000ed00

0800c5a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c5a8:	4b04      	ldr	r3, [pc, #16]	; (800c5bc <__NVIC_GetPriorityGrouping+0x18>)
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	0a1b      	lsrs	r3, r3, #8
 800c5ae:	f003 0307 	and.w	r3, r3, #7
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	e000ed00 	.word	0xe000ed00

0800c5c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	db0b      	blt.n	800c5ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c5d2:	79fb      	ldrb	r3, [r7, #7]
 800c5d4:	f003 021f 	and.w	r2, r3, #31
 800c5d8:	4907      	ldr	r1, [pc, #28]	; (800c5f8 <__NVIC_EnableIRQ+0x38>)
 800c5da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5de:	095b      	lsrs	r3, r3, #5
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	fa00 f202 	lsl.w	r2, r0, r2
 800c5e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c5ea:	bf00      	nop
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	e000e100 	.word	0xe000e100

0800c5fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	6039      	str	r1, [r7, #0]
 800c606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	db0a      	blt.n	800c626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	b2da      	uxtb	r2, r3
 800c614:	490c      	ldr	r1, [pc, #48]	; (800c648 <__NVIC_SetPriority+0x4c>)
 800c616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c61a:	0112      	lsls	r2, r2, #4
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	440b      	add	r3, r1
 800c620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c624:	e00a      	b.n	800c63c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	4908      	ldr	r1, [pc, #32]	; (800c64c <__NVIC_SetPriority+0x50>)
 800c62c:	79fb      	ldrb	r3, [r7, #7]
 800c62e:	f003 030f 	and.w	r3, r3, #15
 800c632:	3b04      	subs	r3, #4
 800c634:	0112      	lsls	r2, r2, #4
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	440b      	add	r3, r1
 800c63a:	761a      	strb	r2, [r3, #24]
}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	e000e100 	.word	0xe000e100
 800c64c:	e000ed00 	.word	0xe000ed00

0800c650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c650:	b480      	push	{r7}
 800c652:	b089      	sub	sp, #36	; 0x24
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	f1c3 0307 	rsb	r3, r3, #7
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	bf28      	it	cs
 800c66e:	2304      	movcs	r3, #4
 800c670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	3304      	adds	r3, #4
 800c676:	2b06      	cmp	r3, #6
 800c678:	d902      	bls.n	800c680 <NVIC_EncodePriority+0x30>
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	3b03      	subs	r3, #3
 800c67e:	e000      	b.n	800c682 <NVIC_EncodePriority+0x32>
 800c680:	2300      	movs	r3, #0
 800c682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	fa02 f303 	lsl.w	r3, r2, r3
 800c68e:	43da      	mvns	r2, r3
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	401a      	ands	r2, r3
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c698:	f04f 31ff 	mov.w	r1, #4294967295
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	fa01 f303 	lsl.w	r3, r1, r3
 800c6a2:	43d9      	mvns	r1, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6a8:	4313      	orrs	r3, r2
         );
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3724      	adds	r7, #36	; 0x24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff ff4c 	bl	800c55c <__NVIC_SetPriorityGrouping>
}
 800c6c4:	bf00      	nop
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c6de:	f7ff ff61 	bl	800c5a4 <__NVIC_GetPriorityGrouping>
 800c6e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	68b9      	ldr	r1, [r7, #8]
 800c6e8:	6978      	ldr	r0, [r7, #20]
 800c6ea:	f7ff ffb1 	bl	800c650 <NVIC_EncodePriority>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff ff80 	bl	800c5fc <__NVIC_SetPriority>
}
 800c6fc:	bf00      	nop
 800c6fe:	3718      	adds	r7, #24
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	4603      	mov	r3, r0
 800c70c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c70e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff ff54 	bl	800c5c0 <__NVIC_EnableIRQ>
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d101      	bne.n	800c732 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e00e      	b.n	800c750 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	795b      	ldrb	r3, [r3, #5]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d105      	bne.n	800c748 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff f840 	bl	800b7c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c764:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c766:	f7ff feed 	bl	800c544 <HAL_GetTick>
 800c76a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c772:	b2db      	uxtb	r3, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d008      	beq.n	800c78a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2280      	movs	r2, #128	; 0x80
 800c77c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e052      	b.n	800c830 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f022 0216 	bic.w	r2, r2, #22
 800c798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	695a      	ldr	r2, [r3, #20]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d103      	bne.n	800c7ba <HAL_DMA_Abort+0x62>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d007      	beq.n	800c7ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f022 0208 	bic.w	r2, r2, #8
 800c7c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f022 0201 	bic.w	r2, r2, #1
 800c7d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c7da:	e013      	b.n	800c804 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c7dc:	f7ff feb2 	bl	800c544 <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	2b05      	cmp	r3, #5
 800c7e8:	d90c      	bls.n	800c804 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2220      	movs	r2, #32
 800c7ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2203      	movs	r2, #3
 800c7f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800c800:	2303      	movs	r3, #3
 800c802:	e015      	b.n	800c830 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e4      	bne.n	800c7dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c816:	223f      	movs	r2, #63	; 0x3f
 800c818:	409a      	lsls	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d004      	beq.n	800c856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2280      	movs	r2, #128	; 0x80
 800c850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	e00c      	b.n	800c870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2205      	movs	r2, #5
 800c85a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f022 0201 	bic.w	r2, r2, #1
 800c86c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b089      	sub	sp, #36	; 0x24
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c886:	2300      	movs	r3, #0
 800c888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c88e:	2300      	movs	r3, #0
 800c890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c892:	2300      	movs	r3, #0
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	e165      	b.n	800cb64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c898:	2201      	movs	r2, #1
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	f040 8154 	bne.w	800cb5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	f003 0303 	and.w	r3, r3, #3
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d005      	beq.n	800c8ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d130      	bne.n	800c930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	2203      	movs	r2, #3
 800c8da:	fa02 f303 	lsl.w	r3, r2, r3
 800c8de:	43db      	mvns	r3, r3
 800c8e0:	69ba      	ldr	r2, [r7, #24]
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c8f2:	69ba      	ldr	r2, [r7, #24]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c904:	2201      	movs	r2, #1
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	fa02 f303 	lsl.w	r3, r2, r3
 800c90c:	43db      	mvns	r3, r3
 800c90e:	69ba      	ldr	r2, [r7, #24]
 800c910:	4013      	ands	r3, r2
 800c912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	091b      	lsrs	r3, r3, #4
 800c91a:	f003 0201 	and.w	r2, r3, #1
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	fa02 f303 	lsl.w	r3, r2, r3
 800c924:	69ba      	ldr	r2, [r7, #24]
 800c926:	4313      	orrs	r3, r2
 800c928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	f003 0303 	and.w	r3, r3, #3
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d017      	beq.n	800c96c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	2203      	movs	r2, #3
 800c948:	fa02 f303 	lsl.w	r3, r2, r3
 800c94c:	43db      	mvns	r3, r3
 800c94e:	69ba      	ldr	r2, [r7, #24]
 800c950:	4013      	ands	r3, r2
 800c952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	689a      	ldr	r2, [r3, #8]
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	fa02 f303 	lsl.w	r3, r2, r3
 800c960:	69ba      	ldr	r2, [r7, #24]
 800c962:	4313      	orrs	r3, r2
 800c964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	69ba      	ldr	r2, [r7, #24]
 800c96a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	f003 0303 	and.w	r3, r3, #3
 800c974:	2b02      	cmp	r3, #2
 800c976:	d123      	bne.n	800c9c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	08da      	lsrs	r2, r3, #3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	3208      	adds	r2, #8
 800c980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	f003 0307 	and.w	r3, r3, #7
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	220f      	movs	r2, #15
 800c990:	fa02 f303 	lsl.w	r3, r2, r3
 800c994:	43db      	mvns	r3, r3
 800c996:	69ba      	ldr	r2, [r7, #24]
 800c998:	4013      	ands	r3, r2
 800c99a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	691a      	ldr	r2, [r3, #16]
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	f003 0307 	and.w	r3, r3, #7
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ac:	69ba      	ldr	r2, [r7, #24]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	08da      	lsrs	r2, r3, #3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3208      	adds	r2, #8
 800c9ba:	69b9      	ldr	r1, [r7, #24]
 800c9bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	2203      	movs	r2, #3
 800c9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d0:	43db      	mvns	r3, r3
 800c9d2:	69ba      	ldr	r2, [r7, #24]
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	f003 0203 	and.w	r2, r3, #3
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	005b      	lsls	r3, r3, #1
 800c9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e8:	69ba      	ldr	r2, [r7, #24]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	69ba      	ldr	r2, [r7, #24]
 800c9f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 80ae 	beq.w	800cb5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca02:	2300      	movs	r3, #0
 800ca04:	60fb      	str	r3, [r7, #12]
 800ca06:	4b5d      	ldr	r3, [pc, #372]	; (800cb7c <HAL_GPIO_Init+0x300>)
 800ca08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0a:	4a5c      	ldr	r2, [pc, #368]	; (800cb7c <HAL_GPIO_Init+0x300>)
 800ca0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca10:	6453      	str	r3, [r2, #68]	; 0x44
 800ca12:	4b5a      	ldr	r3, [pc, #360]	; (800cb7c <HAL_GPIO_Init+0x300>)
 800ca14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ca1e:	4a58      	ldr	r2, [pc, #352]	; (800cb80 <HAL_GPIO_Init+0x304>)
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	089b      	lsrs	r3, r3, #2
 800ca24:	3302      	adds	r3, #2
 800ca26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	220f      	movs	r2, #15
 800ca36:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3a:	43db      	mvns	r3, r3
 800ca3c:	69ba      	ldr	r2, [r7, #24]
 800ca3e:	4013      	ands	r3, r2
 800ca40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a4f      	ldr	r2, [pc, #316]	; (800cb84 <HAL_GPIO_Init+0x308>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d025      	beq.n	800ca96 <HAL_GPIO_Init+0x21a>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a4e      	ldr	r2, [pc, #312]	; (800cb88 <HAL_GPIO_Init+0x30c>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d01f      	beq.n	800ca92 <HAL_GPIO_Init+0x216>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a4d      	ldr	r2, [pc, #308]	; (800cb8c <HAL_GPIO_Init+0x310>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d019      	beq.n	800ca8e <HAL_GPIO_Init+0x212>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a4c      	ldr	r2, [pc, #304]	; (800cb90 <HAL_GPIO_Init+0x314>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d013      	beq.n	800ca8a <HAL_GPIO_Init+0x20e>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a4b      	ldr	r2, [pc, #300]	; (800cb94 <HAL_GPIO_Init+0x318>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00d      	beq.n	800ca86 <HAL_GPIO_Init+0x20a>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a4a      	ldr	r2, [pc, #296]	; (800cb98 <HAL_GPIO_Init+0x31c>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d007      	beq.n	800ca82 <HAL_GPIO_Init+0x206>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a49      	ldr	r2, [pc, #292]	; (800cb9c <HAL_GPIO_Init+0x320>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d101      	bne.n	800ca7e <HAL_GPIO_Init+0x202>
 800ca7a:	2306      	movs	r3, #6
 800ca7c:	e00c      	b.n	800ca98 <HAL_GPIO_Init+0x21c>
 800ca7e:	2307      	movs	r3, #7
 800ca80:	e00a      	b.n	800ca98 <HAL_GPIO_Init+0x21c>
 800ca82:	2305      	movs	r3, #5
 800ca84:	e008      	b.n	800ca98 <HAL_GPIO_Init+0x21c>
 800ca86:	2304      	movs	r3, #4
 800ca88:	e006      	b.n	800ca98 <HAL_GPIO_Init+0x21c>
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e004      	b.n	800ca98 <HAL_GPIO_Init+0x21c>
 800ca8e:	2302      	movs	r3, #2
 800ca90:	e002      	b.n	800ca98 <HAL_GPIO_Init+0x21c>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e000      	b.n	800ca98 <HAL_GPIO_Init+0x21c>
 800ca96:	2300      	movs	r3, #0
 800ca98:	69fa      	ldr	r2, [r7, #28]
 800ca9a:	f002 0203 	and.w	r2, r2, #3
 800ca9e:	0092      	lsls	r2, r2, #2
 800caa0:	4093      	lsls	r3, r2
 800caa2:	69ba      	ldr	r2, [r7, #24]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800caa8:	4935      	ldr	r1, [pc, #212]	; (800cb80 <HAL_GPIO_Init+0x304>)
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	089b      	lsrs	r3, r3, #2
 800caae:	3302      	adds	r3, #2
 800cab0:	69ba      	ldr	r2, [r7, #24]
 800cab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cab6:	4b3a      	ldr	r3, [pc, #232]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	43db      	mvns	r3, r3
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	4013      	ands	r3, r2
 800cac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d003      	beq.n	800cada <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cada:	4a31      	ldr	r2, [pc, #196]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cae0:	4b2f      	ldr	r3, [pc, #188]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	43db      	mvns	r3, r3
 800caea:	69ba      	ldr	r2, [r7, #24]
 800caec:	4013      	ands	r3, r2
 800caee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d003      	beq.n	800cb04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800cafc:	69ba      	ldr	r2, [r7, #24]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cb04:	4a26      	ldr	r2, [pc, #152]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cb0a:	4b25      	ldr	r3, [pc, #148]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	43db      	mvns	r3, r3
 800cb14:	69ba      	ldr	r2, [r7, #24]
 800cb16:	4013      	ands	r3, r2
 800cb18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cb2e:	4a1c      	ldr	r2, [pc, #112]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cb34:	4b1a      	ldr	r3, [pc, #104]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	43db      	mvns	r3, r3
 800cb3e:	69ba      	ldr	r2, [r7, #24]
 800cb40:	4013      	ands	r3, r2
 800cb42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d003      	beq.n	800cb58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800cb50:	69ba      	ldr	r2, [r7, #24]
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cb58:	4a11      	ldr	r2, [pc, #68]	; (800cba0 <HAL_GPIO_Init+0x324>)
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	3301      	adds	r3, #1
 800cb62:	61fb      	str	r3, [r7, #28]
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	2b0f      	cmp	r3, #15
 800cb68:	f67f ae96 	bls.w	800c898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cb6c:	bf00      	nop
 800cb6e:	bf00      	nop
 800cb70:	3724      	adds	r7, #36	; 0x24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	40023800 	.word	0x40023800
 800cb80:	40013800 	.word	0x40013800
 800cb84:	40020000 	.word	0x40020000
 800cb88:	40020400 	.word	0x40020400
 800cb8c:	40020800 	.word	0x40020800
 800cb90:	40020c00 	.word	0x40020c00
 800cb94:	40021000 	.word	0x40021000
 800cb98:	40021400 	.word	0x40021400
 800cb9c:	40021800 	.word	0x40021800
 800cba0:	40013c00 	.word	0x40013c00

0800cba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	460b      	mov	r3, r1
 800cbae:	807b      	strh	r3, [r7, #2]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cbb4:	787b      	ldrb	r3, [r7, #1]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cbba:	887a      	ldrh	r2, [r7, #2]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cbc0:	e003      	b.n	800cbca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cbc2:	887b      	ldrh	r3, [r7, #2]
 800cbc4:	041a      	lsls	r2, r3, #16
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	619a      	str	r2, [r3, #24]
}
 800cbca:	bf00      	nop
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b085      	sub	sp, #20
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cbe8:	887a      	ldrh	r2, [r7, #2]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	4013      	ands	r3, r2
 800cbee:	041a      	lsls	r2, r3, #16
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	43d9      	mvns	r1, r3
 800cbf4:	887b      	ldrh	r3, [r7, #2]
 800cbf6:	400b      	ands	r3, r1
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	619a      	str	r2, [r3, #24]
}
 800cbfe:	bf00      	nop
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
	...

0800cc0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d101      	bne.n	800cc20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e0cc      	b.n	800cdba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cc20:	4b68      	ldr	r3, [pc, #416]	; (800cdc4 <HAL_RCC_ClockConfig+0x1b8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 030f 	and.w	r3, r3, #15
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d90c      	bls.n	800cc48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc2e:	4b65      	ldr	r3, [pc, #404]	; (800cdc4 <HAL_RCC_ClockConfig+0x1b8>)
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	b2d2      	uxtb	r2, r2
 800cc34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc36:	4b63      	ldr	r3, [pc, #396]	; (800cdc4 <HAL_RCC_ClockConfig+0x1b8>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f003 030f 	and.w	r3, r3, #15
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d001      	beq.n	800cc48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cc44:	2301      	movs	r3, #1
 800cc46:	e0b8      	b.n	800cdba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0302 	and.w	r3, r3, #2
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d020      	beq.n	800cc96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0304 	and.w	r3, r3, #4
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc60:	4b59      	ldr	r3, [pc, #356]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	4a58      	ldr	r2, [pc, #352]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cc6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0308 	and.w	r3, r3, #8
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d005      	beq.n	800cc84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cc78:	4b53      	ldr	r3, [pc, #332]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	4a52      	ldr	r2, [pc, #328]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cc82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc84:	4b50      	ldr	r3, [pc, #320]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	494d      	ldr	r1, [pc, #308]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc92:	4313      	orrs	r3, r2
 800cc94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 0301 	and.w	r3, r3, #1
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d044      	beq.n	800cd2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d107      	bne.n	800ccba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ccaa:	4b47      	ldr	r3, [pc, #284]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d119      	bne.n	800ccea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e07f      	b.n	800cdba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d003      	beq.n	800ccca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d107      	bne.n	800ccda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ccca:	4b3f      	ldr	r3, [pc, #252]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d109      	bne.n	800ccea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e06f      	b.n	800cdba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccda:	4b3b      	ldr	r3, [pc, #236]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e067      	b.n	800cdba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ccea:	4b37      	ldr	r3, [pc, #220]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	f023 0203 	bic.w	r2, r3, #3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	4934      	ldr	r1, [pc, #208]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ccfc:	f7ff fc22 	bl	800c544 <HAL_GetTick>
 800cd00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd02:	e00a      	b.n	800cd1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd04:	f7ff fc1e 	bl	800c544 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d901      	bls.n	800cd1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cd16:	2303      	movs	r3, #3
 800cd18:	e04f      	b.n	800cdba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd1a:	4b2b      	ldr	r3, [pc, #172]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	f003 020c 	and.w	r2, r3, #12
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d1eb      	bne.n	800cd04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd2c:	4b25      	ldr	r3, [pc, #148]	; (800cdc4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 030f 	and.w	r3, r3, #15
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d20c      	bcs.n	800cd54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd3a:	4b22      	ldr	r3, [pc, #136]	; (800cdc4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd3c:	683a      	ldr	r2, [r7, #0]
 800cd3e:	b2d2      	uxtb	r2, r2
 800cd40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd42:	4b20      	ldr	r3, [pc, #128]	; (800cdc4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f003 030f 	and.w	r3, r3, #15
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d001      	beq.n	800cd54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e032      	b.n	800cdba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 0304 	and.w	r3, r3, #4
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d008      	beq.n	800cd72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd60:	4b19      	ldr	r3, [pc, #100]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	4916      	ldr	r1, [pc, #88]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 0308 	and.w	r3, r3, #8
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d009      	beq.n	800cd92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cd7e:	4b12      	ldr	r3, [pc, #72]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	490e      	ldr	r1, [pc, #56]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cd92:	f000 f887 	bl	800cea4 <HAL_RCC_GetSysClockFreq>
 800cd96:	4602      	mov	r2, r0
 800cd98:	4b0b      	ldr	r3, [pc, #44]	; (800cdc8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	091b      	lsrs	r3, r3, #4
 800cd9e:	f003 030f 	and.w	r3, r3, #15
 800cda2:	490a      	ldr	r1, [pc, #40]	; (800cdcc <HAL_RCC_ClockConfig+0x1c0>)
 800cda4:	5ccb      	ldrb	r3, [r1, r3]
 800cda6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdaa:	4a09      	ldr	r2, [pc, #36]	; (800cdd0 <HAL_RCC_ClockConfig+0x1c4>)
 800cdac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cdae:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <HAL_RCC_ClockConfig+0x1c8>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fec2 	bl	800bb3c <HAL_InitTick>

  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	40023c00 	.word	0x40023c00
 800cdc8:	40023800 	.word	0x40023800
 800cdcc:	08010960 	.word	0x08010960
 800cdd0:	20000008 	.word	0x20000008
 800cdd4:	2000000c 	.word	0x2000000c

0800cdd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cddc:	4b03      	ldr	r3, [pc, #12]	; (800cdec <HAL_RCC_GetHCLKFreq+0x14>)
 800cdde:	681b      	ldr	r3, [r3, #0]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	20000008 	.word	0x20000008

0800cdf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cdf4:	f7ff fff0 	bl	800cdd8 <HAL_RCC_GetHCLKFreq>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	0a9b      	lsrs	r3, r3, #10
 800ce00:	f003 0307 	and.w	r3, r3, #7
 800ce04:	4903      	ldr	r1, [pc, #12]	; (800ce14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce06:	5ccb      	ldrb	r3, [r1, r3]
 800ce08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	40023800 	.word	0x40023800
 800ce14:	08010970 	.word	0x08010970

0800ce18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ce1c:	f7ff ffdc 	bl	800cdd8 <HAL_RCC_GetHCLKFreq>
 800ce20:	4602      	mov	r2, r0
 800ce22:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	0b5b      	lsrs	r3, r3, #13
 800ce28:	f003 0307 	and.w	r3, r3, #7
 800ce2c:	4903      	ldr	r1, [pc, #12]	; (800ce3c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce2e:	5ccb      	ldrb	r3, [r1, r3]
 800ce30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	40023800 	.word	0x40023800
 800ce3c:	08010970 	.word	0x08010970

0800ce40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	220f      	movs	r2, #15
 800ce4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ce50:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <HAL_RCC_GetClockConfig+0x5c>)
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	f003 0203 	and.w	r2, r3, #3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ce5c:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <HAL_RCC_GetClockConfig+0x5c>)
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ce68:	4b0c      	ldr	r3, [pc, #48]	; (800ce9c <HAL_RCC_GetClockConfig+0x5c>)
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ce74:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <HAL_RCC_GetClockConfig+0x5c>)
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	08db      	lsrs	r3, r3, #3
 800ce7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ce82:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <HAL_RCC_GetClockConfig+0x60>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 020f 	and.w	r2, r3, #15
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	601a      	str	r2, [r3, #0]
}
 800ce8e:	bf00      	nop
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	40023800 	.word	0x40023800
 800cea0:	40023c00 	.word	0x40023c00

0800cea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cea8:	b0ae      	sub	sp, #184	; 0xb8
 800ceaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ceac:	2300      	movs	r3, #0
 800ceae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ceca:	4bcb      	ldr	r3, [pc, #812]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	f003 030c 	and.w	r3, r3, #12
 800ced2:	2b0c      	cmp	r3, #12
 800ced4:	f200 8206 	bhi.w	800d2e4 <HAL_RCC_GetSysClockFreq+0x440>
 800ced8:	a201      	add	r2, pc, #4	; (adr r2, 800cee0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800ceda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cede:	bf00      	nop
 800cee0:	0800cf15 	.word	0x0800cf15
 800cee4:	0800d2e5 	.word	0x0800d2e5
 800cee8:	0800d2e5 	.word	0x0800d2e5
 800ceec:	0800d2e5 	.word	0x0800d2e5
 800cef0:	0800cf1d 	.word	0x0800cf1d
 800cef4:	0800d2e5 	.word	0x0800d2e5
 800cef8:	0800d2e5 	.word	0x0800d2e5
 800cefc:	0800d2e5 	.word	0x0800d2e5
 800cf00:	0800cf25 	.word	0x0800cf25
 800cf04:	0800d2e5 	.word	0x0800d2e5
 800cf08:	0800d2e5 	.word	0x0800d2e5
 800cf0c:	0800d2e5 	.word	0x0800d2e5
 800cf10:	0800d115 	.word	0x0800d115
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cf14:	4bb9      	ldr	r3, [pc, #740]	; (800d1fc <HAL_RCC_GetSysClockFreq+0x358>)
 800cf16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800cf1a:	e1e7      	b.n	800d2ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cf1c:	4bb8      	ldr	r3, [pc, #736]	; (800d200 <HAL_RCC_GetSysClockFreq+0x35c>)
 800cf1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800cf22:	e1e3      	b.n	800d2ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cf24:	4bb4      	ldr	r3, [pc, #720]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cf30:	4bb1      	ldr	r3, [pc, #708]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d071      	beq.n	800d020 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cf3c:	4bae      	ldr	r3, [pc, #696]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	099b      	lsrs	r3, r3, #6
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cf48:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800cf4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cf62:	4622      	mov	r2, r4
 800cf64:	462b      	mov	r3, r5
 800cf66:	f04f 0000 	mov.w	r0, #0
 800cf6a:	f04f 0100 	mov.w	r1, #0
 800cf6e:	0159      	lsls	r1, r3, #5
 800cf70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cf74:	0150      	lsls	r0, r2, #5
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	1a51      	subs	r1, r2, r1
 800cf7e:	6439      	str	r1, [r7, #64]	; 0x40
 800cf80:	4629      	mov	r1, r5
 800cf82:	eb63 0301 	sbc.w	r3, r3, r1
 800cf86:	647b      	str	r3, [r7, #68]	; 0x44
 800cf88:	f04f 0200 	mov.w	r2, #0
 800cf8c:	f04f 0300 	mov.w	r3, #0
 800cf90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800cf94:	4649      	mov	r1, r9
 800cf96:	018b      	lsls	r3, r1, #6
 800cf98:	4641      	mov	r1, r8
 800cf9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cf9e:	4641      	mov	r1, r8
 800cfa0:	018a      	lsls	r2, r1, #6
 800cfa2:	4641      	mov	r1, r8
 800cfa4:	1a51      	subs	r1, r2, r1
 800cfa6:	63b9      	str	r1, [r7, #56]	; 0x38
 800cfa8:	4649      	mov	r1, r9
 800cfaa:	eb63 0301 	sbc.w	r3, r3, r1
 800cfae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfb0:	f04f 0200 	mov.w	r2, #0
 800cfb4:	f04f 0300 	mov.w	r3, #0
 800cfb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800cfbc:	4649      	mov	r1, r9
 800cfbe:	00cb      	lsls	r3, r1, #3
 800cfc0:	4641      	mov	r1, r8
 800cfc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cfc6:	4641      	mov	r1, r8
 800cfc8:	00ca      	lsls	r2, r1, #3
 800cfca:	4610      	mov	r0, r2
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4603      	mov	r3, r0
 800cfd0:	4622      	mov	r2, r4
 800cfd2:	189b      	adds	r3, r3, r2
 800cfd4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	460a      	mov	r2, r1
 800cfda:	eb42 0303 	adc.w	r3, r2, r3
 800cfde:	637b      	str	r3, [r7, #52]	; 0x34
 800cfe0:	f04f 0200 	mov.w	r2, #0
 800cfe4:	f04f 0300 	mov.w	r3, #0
 800cfe8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cfec:	4629      	mov	r1, r5
 800cfee:	024b      	lsls	r3, r1, #9
 800cff0:	4621      	mov	r1, r4
 800cff2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cff6:	4621      	mov	r1, r4
 800cff8:	024a      	lsls	r2, r1, #9
 800cffa:	4610      	mov	r0, r2
 800cffc:	4619      	mov	r1, r3
 800cffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d002:	2200      	movs	r2, #0
 800d004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d008:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d00c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d010:	f7fb f94e 	bl	80082b0 <__aeabi_uldivmod>
 800d014:	4602      	mov	r2, r0
 800d016:	460b      	mov	r3, r1
 800d018:	4613      	mov	r3, r2
 800d01a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d01e:	e067      	b.n	800d0f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d020:	4b75      	ldr	r3, [pc, #468]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	099b      	lsrs	r3, r3, #6
 800d026:	2200      	movs	r2, #0
 800d028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d02c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d030:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d038:	67bb      	str	r3, [r7, #120]	; 0x78
 800d03a:	2300      	movs	r3, #0
 800d03c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d03e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800d042:	4622      	mov	r2, r4
 800d044:	462b      	mov	r3, r5
 800d046:	f04f 0000 	mov.w	r0, #0
 800d04a:	f04f 0100 	mov.w	r1, #0
 800d04e:	0159      	lsls	r1, r3, #5
 800d050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d054:	0150      	lsls	r0, r2, #5
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4621      	mov	r1, r4
 800d05c:	1a51      	subs	r1, r2, r1
 800d05e:	62b9      	str	r1, [r7, #40]	; 0x28
 800d060:	4629      	mov	r1, r5
 800d062:	eb63 0301 	sbc.w	r3, r3, r1
 800d066:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d068:	f04f 0200 	mov.w	r2, #0
 800d06c:	f04f 0300 	mov.w	r3, #0
 800d070:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800d074:	4649      	mov	r1, r9
 800d076:	018b      	lsls	r3, r1, #6
 800d078:	4641      	mov	r1, r8
 800d07a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d07e:	4641      	mov	r1, r8
 800d080:	018a      	lsls	r2, r1, #6
 800d082:	4641      	mov	r1, r8
 800d084:	ebb2 0a01 	subs.w	sl, r2, r1
 800d088:	4649      	mov	r1, r9
 800d08a:	eb63 0b01 	sbc.w	fp, r3, r1
 800d08e:	f04f 0200 	mov.w	r2, #0
 800d092:	f04f 0300 	mov.w	r3, #0
 800d096:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d09a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d09e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0a2:	4692      	mov	sl, r2
 800d0a4:	469b      	mov	fp, r3
 800d0a6:	4623      	mov	r3, r4
 800d0a8:	eb1a 0303 	adds.w	r3, sl, r3
 800d0ac:	623b      	str	r3, [r7, #32]
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	eb4b 0303 	adc.w	r3, fp, r3
 800d0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800d0b6:	f04f 0200 	mov.w	r2, #0
 800d0ba:	f04f 0300 	mov.w	r3, #0
 800d0be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	028b      	lsls	r3, r1, #10
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	028a      	lsls	r2, r1, #10
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d0d8:	2200      	movs	r2, #0
 800d0da:	673b      	str	r3, [r7, #112]	; 0x70
 800d0dc:	677a      	str	r2, [r7, #116]	; 0x74
 800d0de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d0e2:	f7fb f8e5 	bl	80082b0 <__aeabi_uldivmod>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d0f0:	4b41      	ldr	r3, [pc, #260]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	0c1b      	lsrs	r3, r3, #16
 800d0f6:	f003 0303 	and.w	r3, r3, #3
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800d102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d10a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d10e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800d112:	e0eb      	b.n	800d2ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d114:	4b38      	ldr	r3, [pc, #224]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d11c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d120:	4b35      	ldr	r3, [pc, #212]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d06b      	beq.n	800d204 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d12c:	4b32      	ldr	r3, [pc, #200]	; (800d1f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	099b      	lsrs	r3, r3, #6
 800d132:	2200      	movs	r2, #0
 800d134:	66bb      	str	r3, [r7, #104]	; 0x68
 800d136:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d13e:	663b      	str	r3, [r7, #96]	; 0x60
 800d140:	2300      	movs	r3, #0
 800d142:	667b      	str	r3, [r7, #100]	; 0x64
 800d144:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800d148:	4622      	mov	r2, r4
 800d14a:	462b      	mov	r3, r5
 800d14c:	f04f 0000 	mov.w	r0, #0
 800d150:	f04f 0100 	mov.w	r1, #0
 800d154:	0159      	lsls	r1, r3, #5
 800d156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d15a:	0150      	lsls	r0, r2, #5
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	4621      	mov	r1, r4
 800d162:	1a51      	subs	r1, r2, r1
 800d164:	61b9      	str	r1, [r7, #24]
 800d166:	4629      	mov	r1, r5
 800d168:	eb63 0301 	sbc.w	r3, r3, r1
 800d16c:	61fb      	str	r3, [r7, #28]
 800d16e:	f04f 0200 	mov.w	r2, #0
 800d172:	f04f 0300 	mov.w	r3, #0
 800d176:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800d17a:	4659      	mov	r1, fp
 800d17c:	018b      	lsls	r3, r1, #6
 800d17e:	4651      	mov	r1, sl
 800d180:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d184:	4651      	mov	r1, sl
 800d186:	018a      	lsls	r2, r1, #6
 800d188:	4651      	mov	r1, sl
 800d18a:	ebb2 0801 	subs.w	r8, r2, r1
 800d18e:	4659      	mov	r1, fp
 800d190:	eb63 0901 	sbc.w	r9, r3, r1
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	f04f 0300 	mov.w	r3, #0
 800d19c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d1a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d1a8:	4690      	mov	r8, r2
 800d1aa:	4699      	mov	r9, r3
 800d1ac:	4623      	mov	r3, r4
 800d1ae:	eb18 0303 	adds.w	r3, r8, r3
 800d1b2:	613b      	str	r3, [r7, #16]
 800d1b4:	462b      	mov	r3, r5
 800d1b6:	eb49 0303 	adc.w	r3, r9, r3
 800d1ba:	617b      	str	r3, [r7, #20]
 800d1bc:	f04f 0200 	mov.w	r2, #0
 800d1c0:	f04f 0300 	mov.w	r3, #0
 800d1c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	024b      	lsls	r3, r1, #9
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d1d2:	4621      	mov	r1, r4
 800d1d4:	024a      	lsls	r2, r1, #9
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	4619      	mov	r1, r3
 800d1da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1de:	2200      	movs	r2, #0
 800d1e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d1e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d1e8:	f7fb f862 	bl	80082b0 <__aeabi_uldivmod>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1f6:	e065      	b.n	800d2c4 <HAL_RCC_GetSysClockFreq+0x420>
 800d1f8:	40023800 	.word	0x40023800
 800d1fc:	00f42400 	.word	0x00f42400
 800d200:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d204:	4b3d      	ldr	r3, [pc, #244]	; (800d2fc <HAL_RCC_GetSysClockFreq+0x458>)
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	099b      	lsrs	r3, r3, #6
 800d20a:	2200      	movs	r2, #0
 800d20c:	4618      	mov	r0, r3
 800d20e:	4611      	mov	r1, r2
 800d210:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d214:	653b      	str	r3, [r7, #80]	; 0x50
 800d216:	2300      	movs	r3, #0
 800d218:	657b      	str	r3, [r7, #84]	; 0x54
 800d21a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800d21e:	4642      	mov	r2, r8
 800d220:	464b      	mov	r3, r9
 800d222:	f04f 0000 	mov.w	r0, #0
 800d226:	f04f 0100 	mov.w	r1, #0
 800d22a:	0159      	lsls	r1, r3, #5
 800d22c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d230:	0150      	lsls	r0, r2, #5
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	4641      	mov	r1, r8
 800d238:	1a51      	subs	r1, r2, r1
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	4649      	mov	r1, r9
 800d23e:	eb63 0301 	sbc.w	r3, r3, r1
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	f04f 0200 	mov.w	r2, #0
 800d248:	f04f 0300 	mov.w	r3, #0
 800d24c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800d250:	4659      	mov	r1, fp
 800d252:	018b      	lsls	r3, r1, #6
 800d254:	4651      	mov	r1, sl
 800d256:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d25a:	4651      	mov	r1, sl
 800d25c:	018a      	lsls	r2, r1, #6
 800d25e:	4651      	mov	r1, sl
 800d260:	1a54      	subs	r4, r2, r1
 800d262:	4659      	mov	r1, fp
 800d264:	eb63 0501 	sbc.w	r5, r3, r1
 800d268:	f04f 0200 	mov.w	r2, #0
 800d26c:	f04f 0300 	mov.w	r3, #0
 800d270:	00eb      	lsls	r3, r5, #3
 800d272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d276:	00e2      	lsls	r2, r4, #3
 800d278:	4614      	mov	r4, r2
 800d27a:	461d      	mov	r5, r3
 800d27c:	4643      	mov	r3, r8
 800d27e:	18e3      	adds	r3, r4, r3
 800d280:	603b      	str	r3, [r7, #0]
 800d282:	464b      	mov	r3, r9
 800d284:	eb45 0303 	adc.w	r3, r5, r3
 800d288:	607b      	str	r3, [r7, #4]
 800d28a:	f04f 0200 	mov.w	r2, #0
 800d28e:	f04f 0300 	mov.w	r3, #0
 800d292:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d296:	4629      	mov	r1, r5
 800d298:	028b      	lsls	r3, r1, #10
 800d29a:	4621      	mov	r1, r4
 800d29c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	028a      	lsls	r2, r1, #10
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d2b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d2b6:	f7fa fffb 	bl	80082b0 <__aeabi_uldivmod>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	4613      	mov	r3, r2
 800d2c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800d2c4:	4b0d      	ldr	r3, [pc, #52]	; (800d2fc <HAL_RCC_GetSysClockFreq+0x458>)
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	0f1b      	lsrs	r3, r3, #28
 800d2ca:	f003 0307 	and.w	r3, r3, #7
 800d2ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800d2d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800d2e2:	e003      	b.n	800d2ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d2e4:	4b06      	ldr	r3, [pc, #24]	; (800d300 <HAL_RCC_GetSysClockFreq+0x45c>)
 800d2e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800d2ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d2ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	37b8      	adds	r7, #184	; 0xb8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2fa:	bf00      	nop
 800d2fc:	40023800 	.word	0x40023800
 800d300:	00f42400 	.word	0x00f42400

0800d304 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e28d      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f003 0301 	and.w	r3, r3, #1
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f000 8083 	beq.w	800d42a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800d324:	4b94      	ldr	r3, [pc, #592]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	f003 030c 	and.w	r3, r3, #12
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	d019      	beq.n	800d364 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800d330:	4b91      	ldr	r3, [pc, #580]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800d338:	2b08      	cmp	r3, #8
 800d33a:	d106      	bne.n	800d34a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800d33c:	4b8e      	ldr	r3, [pc, #568]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d348:	d00c      	beq.n	800d364 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d34a:	4b8b      	ldr	r3, [pc, #556]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800d352:	2b0c      	cmp	r3, #12
 800d354:	d112      	bne.n	800d37c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d356:	4b88      	ldr	r3, [pc, #544]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d35e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d362:	d10b      	bne.n	800d37c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d364:	4b84      	ldr	r3, [pc, #528]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d05b      	beq.n	800d428 <HAL_RCC_OscConfig+0x124>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d157      	bne.n	800d428 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	e25a      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d384:	d106      	bne.n	800d394 <HAL_RCC_OscConfig+0x90>
 800d386:	4b7c      	ldr	r3, [pc, #496]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a7b      	ldr	r2, [pc, #492]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d38c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	e01d      	b.n	800d3d0 <HAL_RCC_OscConfig+0xcc>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d39c:	d10c      	bne.n	800d3b8 <HAL_RCC_OscConfig+0xb4>
 800d39e:	4b76      	ldr	r3, [pc, #472]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a75      	ldr	r2, [pc, #468]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	4b73      	ldr	r3, [pc, #460]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a72      	ldr	r2, [pc, #456]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3b4:	6013      	str	r3, [r2, #0]
 800d3b6:	e00b      	b.n	800d3d0 <HAL_RCC_OscConfig+0xcc>
 800d3b8:	4b6f      	ldr	r3, [pc, #444]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a6e      	ldr	r2, [pc, #440]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3c2:	6013      	str	r3, [r2, #0]
 800d3c4:	4b6c      	ldr	r3, [pc, #432]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a6b      	ldr	r2, [pc, #428]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d013      	beq.n	800d400 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3d8:	f7ff f8b4 	bl	800c544 <HAL_GetTick>
 800d3dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3de:	e008      	b.n	800d3f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d3e0:	f7ff f8b0 	bl	800c544 <HAL_GetTick>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	2b64      	cmp	r3, #100	; 0x64
 800d3ec:	d901      	bls.n	800d3f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e21f      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3f2:	4b61      	ldr	r3, [pc, #388]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0f0      	beq.n	800d3e0 <HAL_RCC_OscConfig+0xdc>
 800d3fe:	e014      	b.n	800d42a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d400:	f7ff f8a0 	bl	800c544 <HAL_GetTick>
 800d404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d406:	e008      	b.n	800d41a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d408:	f7ff f89c 	bl	800c544 <HAL_GetTick>
 800d40c:	4602      	mov	r2, r0
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	2b64      	cmp	r3, #100	; 0x64
 800d414:	d901      	bls.n	800d41a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800d416:	2303      	movs	r3, #3
 800d418:	e20b      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d41a:	4b57      	ldr	r3, [pc, #348]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1f0      	bne.n	800d408 <HAL_RCC_OscConfig+0x104>
 800d426:	e000      	b.n	800d42a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f003 0302 	and.w	r3, r3, #2
 800d432:	2b00      	cmp	r3, #0
 800d434:	d06f      	beq.n	800d516 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800d436:	4b50      	ldr	r3, [pc, #320]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f003 030c 	and.w	r3, r3, #12
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d017      	beq.n	800d472 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800d442:	4b4d      	ldr	r3, [pc, #308]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800d44a:	2b08      	cmp	r3, #8
 800d44c:	d105      	bne.n	800d45a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800d44e:	4b4a      	ldr	r3, [pc, #296]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d45a:	4b47      	ldr	r3, [pc, #284]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800d462:	2b0c      	cmp	r3, #12
 800d464:	d11c      	bne.n	800d4a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d466:	4b44      	ldr	r3, [pc, #272]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d116      	bne.n	800d4a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d472:	4b41      	ldr	r3, [pc, #260]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f003 0302 	and.w	r3, r3, #2
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <HAL_RCC_OscConfig+0x186>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d001      	beq.n	800d48a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e1d3      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d48a:	4b3b      	ldr	r3, [pc, #236]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	00db      	lsls	r3, r3, #3
 800d498:	4937      	ldr	r1, [pc, #220]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d49a:	4313      	orrs	r3, r2
 800d49c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d49e:	e03a      	b.n	800d516 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d020      	beq.n	800d4ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d4a8:	4b34      	ldr	r3, [pc, #208]	; (800d57c <HAL_RCC_OscConfig+0x278>)
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4ae:	f7ff f849 	bl	800c544 <HAL_GetTick>
 800d4b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d4b4:	e008      	b.n	800d4c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d4b6:	f7ff f845 	bl	800c544 <HAL_GetTick>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	d901      	bls.n	800d4c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800d4c4:	2303      	movs	r3, #3
 800d4c6:	e1b4      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d4c8:	4b2b      	ldr	r3, [pc, #172]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 0302 	and.w	r3, r3, #2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d0f0      	beq.n	800d4b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d4d4:	4b28      	ldr	r3, [pc, #160]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	4925      	ldr	r1, [pc, #148]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	600b      	str	r3, [r1, #0]
 800d4e8:	e015      	b.n	800d516 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d4ea:	4b24      	ldr	r3, [pc, #144]	; (800d57c <HAL_RCC_OscConfig+0x278>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4f0:	f7ff f828 	bl	800c544 <HAL_GetTick>
 800d4f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d4f6:	e008      	b.n	800d50a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d4f8:	f7ff f824 	bl	800c544 <HAL_GetTick>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	2b02      	cmp	r3, #2
 800d504:	d901      	bls.n	800d50a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d506:	2303      	movs	r3, #3
 800d508:	e193      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d50a:	4b1b      	ldr	r3, [pc, #108]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f003 0302 	and.w	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1f0      	bne.n	800d4f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0308 	and.w	r3, r3, #8
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d036      	beq.n	800d590 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d016      	beq.n	800d558 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d52a:	4b15      	ldr	r3, [pc, #84]	; (800d580 <HAL_RCC_OscConfig+0x27c>)
 800d52c:	2201      	movs	r2, #1
 800d52e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d530:	f7ff f808 	bl	800c544 <HAL_GetTick>
 800d534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d536:	e008      	b.n	800d54a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d538:	f7ff f804 	bl	800c544 <HAL_GetTick>
 800d53c:	4602      	mov	r2, r0
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	2b02      	cmp	r3, #2
 800d544:	d901      	bls.n	800d54a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e173      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d54a:	4b0b      	ldr	r3, [pc, #44]	; (800d578 <HAL_RCC_OscConfig+0x274>)
 800d54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d54e:	f003 0302 	and.w	r3, r3, #2
 800d552:	2b00      	cmp	r3, #0
 800d554:	d0f0      	beq.n	800d538 <HAL_RCC_OscConfig+0x234>
 800d556:	e01b      	b.n	800d590 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d558:	4b09      	ldr	r3, [pc, #36]	; (800d580 <HAL_RCC_OscConfig+0x27c>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d55e:	f7fe fff1 	bl	800c544 <HAL_GetTick>
 800d562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d564:	e00e      	b.n	800d584 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d566:	f7fe ffed 	bl	800c544 <HAL_GetTick>
 800d56a:	4602      	mov	r2, r0
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	2b02      	cmp	r3, #2
 800d572:	d907      	bls.n	800d584 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800d574:	2303      	movs	r3, #3
 800d576:	e15c      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
 800d578:	40023800 	.word	0x40023800
 800d57c:	42470000 	.word	0x42470000
 800d580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d584:	4b8a      	ldr	r3, [pc, #552]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d588:	f003 0302 	and.w	r3, r3, #2
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1ea      	bne.n	800d566 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 0304 	and.w	r3, r3, #4
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 8097 	beq.w	800d6cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d5a2:	4b83      	ldr	r3, [pc, #524]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10f      	bne.n	800d5ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60bb      	str	r3, [r7, #8]
 800d5b2:	4b7f      	ldr	r3, [pc, #508]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b6:	4a7e      	ldr	r2, [pc, #504]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d5b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5bc:	6413      	str	r3, [r2, #64]	; 0x40
 800d5be:	4b7c      	ldr	r3, [pc, #496]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5c6:	60bb      	str	r3, [r7, #8]
 800d5c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5ce:	4b79      	ldr	r3, [pc, #484]	; (800d7b4 <HAL_RCC_OscConfig+0x4b0>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d118      	bne.n	800d60c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d5da:	4b76      	ldr	r3, [pc, #472]	; (800d7b4 <HAL_RCC_OscConfig+0x4b0>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a75      	ldr	r2, [pc, #468]	; (800d7b4 <HAL_RCC_OscConfig+0x4b0>)
 800d5e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d5e6:	f7fe ffad 	bl	800c544 <HAL_GetTick>
 800d5ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5ec:	e008      	b.n	800d600 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d5ee:	f7fe ffa9 	bl	800c544 <HAL_GetTick>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d901      	bls.n	800d600 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	e118      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d600:	4b6c      	ldr	r3, [pc, #432]	; (800d7b4 <HAL_RCC_OscConfig+0x4b0>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d0f0      	beq.n	800d5ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d106      	bne.n	800d622 <HAL_RCC_OscConfig+0x31e>
 800d614:	4b66      	ldr	r3, [pc, #408]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d618:	4a65      	ldr	r2, [pc, #404]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d61a:	f043 0301 	orr.w	r3, r3, #1
 800d61e:	6713      	str	r3, [r2, #112]	; 0x70
 800d620:	e01c      	b.n	800d65c <HAL_RCC_OscConfig+0x358>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	2b05      	cmp	r3, #5
 800d628:	d10c      	bne.n	800d644 <HAL_RCC_OscConfig+0x340>
 800d62a:	4b61      	ldr	r3, [pc, #388]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d62e:	4a60      	ldr	r2, [pc, #384]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d630:	f043 0304 	orr.w	r3, r3, #4
 800d634:	6713      	str	r3, [r2, #112]	; 0x70
 800d636:	4b5e      	ldr	r3, [pc, #376]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d63a:	4a5d      	ldr	r2, [pc, #372]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d63c:	f043 0301 	orr.w	r3, r3, #1
 800d640:	6713      	str	r3, [r2, #112]	; 0x70
 800d642:	e00b      	b.n	800d65c <HAL_RCC_OscConfig+0x358>
 800d644:	4b5a      	ldr	r3, [pc, #360]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d648:	4a59      	ldr	r2, [pc, #356]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d64a:	f023 0301 	bic.w	r3, r3, #1
 800d64e:	6713      	str	r3, [r2, #112]	; 0x70
 800d650:	4b57      	ldr	r3, [pc, #348]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d654:	4a56      	ldr	r2, [pc, #344]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d656:	f023 0304 	bic.w	r3, r3, #4
 800d65a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d015      	beq.n	800d690 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d664:	f7fe ff6e 	bl	800c544 <HAL_GetTick>
 800d668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d66a:	e00a      	b.n	800d682 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d66c:	f7fe ff6a 	bl	800c544 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	f241 3288 	movw	r2, #5000	; 0x1388
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d901      	bls.n	800d682 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800d67e:	2303      	movs	r3, #3
 800d680:	e0d7      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d682:	4b4b      	ldr	r3, [pc, #300]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d686:	f003 0302 	and.w	r3, r3, #2
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d0ee      	beq.n	800d66c <HAL_RCC_OscConfig+0x368>
 800d68e:	e014      	b.n	800d6ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d690:	f7fe ff58 	bl	800c544 <HAL_GetTick>
 800d694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d696:	e00a      	b.n	800d6ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d698:	f7fe ff54 	bl	800c544 <HAL_GetTick>
 800d69c:	4602      	mov	r2, r0
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d901      	bls.n	800d6ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e0c1      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d6ae:	4b40      	ldr	r3, [pc, #256]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b2:	f003 0302 	and.w	r3, r3, #2
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1ee      	bne.n	800d698 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d105      	bne.n	800d6cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6c0:	4b3b      	ldr	r3, [pc, #236]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c4:	4a3a      	ldr	r2, [pc, #232]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d6c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f000 80ad 	beq.w	800d830 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d6d6:	4b36      	ldr	r3, [pc, #216]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f003 030c 	and.w	r3, r3, #12
 800d6de:	2b08      	cmp	r3, #8
 800d6e0:	d060      	beq.n	800d7a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d145      	bne.n	800d776 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d6ea:	4b33      	ldr	r3, [pc, #204]	; (800d7b8 <HAL_RCC_OscConfig+0x4b4>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6f0:	f7fe ff28 	bl	800c544 <HAL_GetTick>
 800d6f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6f6:	e008      	b.n	800d70a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6f8:	f7fe ff24 	bl	800c544 <HAL_GetTick>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	2b02      	cmp	r3, #2
 800d704:	d901      	bls.n	800d70a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e093      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d70a:	4b29      	ldr	r3, [pc, #164]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d712:	2b00      	cmp	r3, #0
 800d714:	d1f0      	bne.n	800d6f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	69da      	ldr	r2, [r3, #28]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6a1b      	ldr	r3, [r3, #32]
 800d71e:	431a      	orrs	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d724:	019b      	lsls	r3, r3, #6
 800d726:	431a      	orrs	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d72c:	085b      	lsrs	r3, r3, #1
 800d72e:	3b01      	subs	r3, #1
 800d730:	041b      	lsls	r3, r3, #16
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d738:	061b      	lsls	r3, r3, #24
 800d73a:	431a      	orrs	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d740:	071b      	lsls	r3, r3, #28
 800d742:	491b      	ldr	r1, [pc, #108]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d744:	4313      	orrs	r3, r2
 800d746:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d748:	4b1b      	ldr	r3, [pc, #108]	; (800d7b8 <HAL_RCC_OscConfig+0x4b4>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d74e:	f7fe fef9 	bl	800c544 <HAL_GetTick>
 800d752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d754:	e008      	b.n	800d768 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d756:	f7fe fef5 	bl	800c544 <HAL_GetTick>
 800d75a:	4602      	mov	r2, r0
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	2b02      	cmp	r3, #2
 800d762:	d901      	bls.n	800d768 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800d764:	2303      	movs	r3, #3
 800d766:	e064      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d768:	4b11      	ldr	r3, [pc, #68]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0f0      	beq.n	800d756 <HAL_RCC_OscConfig+0x452>
 800d774:	e05c      	b.n	800d830 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d776:	4b10      	ldr	r3, [pc, #64]	; (800d7b8 <HAL_RCC_OscConfig+0x4b4>)
 800d778:	2200      	movs	r2, #0
 800d77a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d77c:	f7fe fee2 	bl	800c544 <HAL_GetTick>
 800d780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d782:	e008      	b.n	800d796 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d784:	f7fe fede 	bl	800c544 <HAL_GetTick>
 800d788:	4602      	mov	r2, r0
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d901      	bls.n	800d796 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e04d      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d796:	4b06      	ldr	r3, [pc, #24]	; (800d7b0 <HAL_RCC_OscConfig+0x4ac>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1f0      	bne.n	800d784 <HAL_RCC_OscConfig+0x480>
 800d7a2:	e045      	b.n	800d830 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	699b      	ldr	r3, [r3, #24]
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d107      	bne.n	800d7bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e040      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
 800d7b0:	40023800 	.word	0x40023800
 800d7b4:	40007000 	.word	0x40007000
 800d7b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d7bc:	4b1f      	ldr	r3, [pc, #124]	; (800d83c <HAL_RCC_OscConfig+0x538>)
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	699b      	ldr	r3, [r3, #24]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d030      	beq.n	800d82c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d129      	bne.n	800d82c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d122      	bne.n	800d82c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d7f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d119      	bne.n	800d82c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d802:	085b      	lsrs	r3, r3, #1
 800d804:	3b01      	subs	r3, #1
 800d806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d808:	429a      	cmp	r2, r3
 800d80a:	d10f      	bne.n	800d82c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d818:	429a      	cmp	r2, r3
 800d81a:	d107      	bne.n	800d82c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d826:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d828:	429a      	cmp	r2, r3
 800d82a:	d001      	beq.n	800d830 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e000      	b.n	800d832 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3718      	adds	r7, #24
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	40023800 	.word	0x40023800

0800d840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d101      	bne.n	800d852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e041      	b.n	800d8d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d106      	bne.n	800d86c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7fd ffd0 	bl	800b80c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2202      	movs	r2, #2
 800d870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	3304      	adds	r3, #4
 800d87c:	4619      	mov	r1, r3
 800d87e:	4610      	mov	r0, r2
 800d880:	f000 fdb6 	bl	800e3f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
	...

0800d8e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d001      	beq.n	800d8f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e046      	b.n	800d986 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a23      	ldr	r2, [pc, #140]	; (800d994 <HAL_TIM_Base_Start+0xb4>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d022      	beq.n	800d950 <HAL_TIM_Base_Start+0x70>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d912:	d01d      	beq.n	800d950 <HAL_TIM_Base_Start+0x70>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a1f      	ldr	r2, [pc, #124]	; (800d998 <HAL_TIM_Base_Start+0xb8>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d018      	beq.n	800d950 <HAL_TIM_Base_Start+0x70>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a1e      	ldr	r2, [pc, #120]	; (800d99c <HAL_TIM_Base_Start+0xbc>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d013      	beq.n	800d950 <HAL_TIM_Base_Start+0x70>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a1c      	ldr	r2, [pc, #112]	; (800d9a0 <HAL_TIM_Base_Start+0xc0>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d00e      	beq.n	800d950 <HAL_TIM_Base_Start+0x70>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a1b      	ldr	r2, [pc, #108]	; (800d9a4 <HAL_TIM_Base_Start+0xc4>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d009      	beq.n	800d950 <HAL_TIM_Base_Start+0x70>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a19      	ldr	r2, [pc, #100]	; (800d9a8 <HAL_TIM_Base_Start+0xc8>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d004      	beq.n	800d950 <HAL_TIM_Base_Start+0x70>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a18      	ldr	r2, [pc, #96]	; (800d9ac <HAL_TIM_Base_Start+0xcc>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d111      	bne.n	800d974 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	f003 0307 	and.w	r3, r3, #7
 800d95a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2b06      	cmp	r3, #6
 800d960:	d010      	beq.n	800d984 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f042 0201 	orr.w	r2, r2, #1
 800d970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d972:	e007      	b.n	800d984 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f042 0201 	orr.w	r2, r2, #1
 800d982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3714      	adds	r7, #20
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	40010000 	.word	0x40010000
 800d998:	40000400 	.word	0x40000400
 800d99c:	40000800 	.word	0x40000800
 800d9a0:	40000c00 	.word	0x40000c00
 800d9a4:	40010400 	.word	0x40010400
 800d9a8:	40014000 	.word	0x40014000
 800d9ac:	40001800 	.word	0x40001800

0800d9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d001      	beq.n	800d9c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e04e      	b.n	800da66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68da      	ldr	r2, [r3, #12]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f042 0201 	orr.w	r2, r2, #1
 800d9de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a23      	ldr	r2, [pc, #140]	; (800da74 <HAL_TIM_Base_Start_IT+0xc4>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d022      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9f2:	d01d      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a1f      	ldr	r2, [pc, #124]	; (800da78 <HAL_TIM_Base_Start_IT+0xc8>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d018      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a1e      	ldr	r2, [pc, #120]	; (800da7c <HAL_TIM_Base_Start_IT+0xcc>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d013      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a1c      	ldr	r2, [pc, #112]	; (800da80 <HAL_TIM_Base_Start_IT+0xd0>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d00e      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a1b      	ldr	r2, [pc, #108]	; (800da84 <HAL_TIM_Base_Start_IT+0xd4>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d009      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a19      	ldr	r2, [pc, #100]	; (800da88 <HAL_TIM_Base_Start_IT+0xd8>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d004      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0x80>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a18      	ldr	r2, [pc, #96]	; (800da8c <HAL_TIM_Base_Start_IT+0xdc>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d111      	bne.n	800da54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b06      	cmp	r3, #6
 800da40:	d010      	beq.n	800da64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f042 0201 	orr.w	r2, r2, #1
 800da50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da52:	e007      	b.n	800da64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f042 0201 	orr.w	r2, r2, #1
 800da62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	40010000 	.word	0x40010000
 800da78:	40000400 	.word	0x40000400
 800da7c:	40000800 	.word	0x40000800
 800da80:	40000c00 	.word	0x40000c00
 800da84:	40010400 	.word	0x40010400
 800da88:	40014000 	.word	0x40014000
 800da8c:	40001800 	.word	0x40001800

0800da90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	e041      	b.n	800db26 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7fd feca 	bl	800b850 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2202      	movs	r2, #2
 800dac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	3304      	adds	r3, #4
 800dacc:	4619      	mov	r1, r3
 800dace:	4610      	mov	r0, r2
 800dad0:	f000 fc8e 	bl	800e3f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d104      	bne.n	800db4e <HAL_TIM_IC_Start_IT+0x1e>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	e013      	b.n	800db76 <HAL_TIM_IC_Start_IT+0x46>
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	2b04      	cmp	r3, #4
 800db52:	d104      	bne.n	800db5e <HAL_TIM_IC_Start_IT+0x2e>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	e00b      	b.n	800db76 <HAL_TIM_IC_Start_IT+0x46>
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2b08      	cmp	r3, #8
 800db62:	d104      	bne.n	800db6e <HAL_TIM_IC_Start_IT+0x3e>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	e003      	b.n	800db76 <HAL_TIM_IC_Start_IT+0x46>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db74:	b2db      	uxtb	r3, r3
 800db76:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d104      	bne.n	800db88 <HAL_TIM_IC_Start_IT+0x58>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db84:	b2db      	uxtb	r3, r3
 800db86:	e013      	b.n	800dbb0 <HAL_TIM_IC_Start_IT+0x80>
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	2b04      	cmp	r3, #4
 800db8c:	d104      	bne.n	800db98 <HAL_TIM_IC_Start_IT+0x68>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db94:	b2db      	uxtb	r3, r3
 800db96:	e00b      	b.n	800dbb0 <HAL_TIM_IC_Start_IT+0x80>
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	2b08      	cmp	r3, #8
 800db9c:	d104      	bne.n	800dba8 <HAL_TIM_IC_Start_IT+0x78>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	e003      	b.n	800dbb0 <HAL_TIM_IC_Start_IT+0x80>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d102      	bne.n	800dbbe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800dbb8:	7b7b      	ldrb	r3, [r7, #13]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d001      	beq.n	800dbc2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e0cc      	b.n	800dd5c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d104      	bne.n	800dbd2 <HAL_TIM_IC_Start_IT+0xa2>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2202      	movs	r2, #2
 800dbcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbd0:	e013      	b.n	800dbfa <HAL_TIM_IC_Start_IT+0xca>
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	2b04      	cmp	r3, #4
 800dbd6:	d104      	bne.n	800dbe2 <HAL_TIM_IC_Start_IT+0xb2>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbe0:	e00b      	b.n	800dbfa <HAL_TIM_IC_Start_IT+0xca>
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b08      	cmp	r3, #8
 800dbe6:	d104      	bne.n	800dbf2 <HAL_TIM_IC_Start_IT+0xc2>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2202      	movs	r2, #2
 800dbec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbf0:	e003      	b.n	800dbfa <HAL_TIM_IC_Start_IT+0xca>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d104      	bne.n	800dc0a <HAL_TIM_IC_Start_IT+0xda>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2202      	movs	r2, #2
 800dc04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc08:	e013      	b.n	800dc32 <HAL_TIM_IC_Start_IT+0x102>
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	d104      	bne.n	800dc1a <HAL_TIM_IC_Start_IT+0xea>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2202      	movs	r2, #2
 800dc14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc18:	e00b      	b.n	800dc32 <HAL_TIM_IC_Start_IT+0x102>
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2b08      	cmp	r3, #8
 800dc1e:	d104      	bne.n	800dc2a <HAL_TIM_IC_Start_IT+0xfa>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2202      	movs	r2, #2
 800dc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc28:	e003      	b.n	800dc32 <HAL_TIM_IC_Start_IT+0x102>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2202      	movs	r2, #2
 800dc2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b0c      	cmp	r3, #12
 800dc36:	d841      	bhi.n	800dcbc <HAL_TIM_IC_Start_IT+0x18c>
 800dc38:	a201      	add	r2, pc, #4	; (adr r2, 800dc40 <HAL_TIM_IC_Start_IT+0x110>)
 800dc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3e:	bf00      	nop
 800dc40:	0800dc75 	.word	0x0800dc75
 800dc44:	0800dcbd 	.word	0x0800dcbd
 800dc48:	0800dcbd 	.word	0x0800dcbd
 800dc4c:	0800dcbd 	.word	0x0800dcbd
 800dc50:	0800dc87 	.word	0x0800dc87
 800dc54:	0800dcbd 	.word	0x0800dcbd
 800dc58:	0800dcbd 	.word	0x0800dcbd
 800dc5c:	0800dcbd 	.word	0x0800dcbd
 800dc60:	0800dc99 	.word	0x0800dc99
 800dc64:	0800dcbd 	.word	0x0800dcbd
 800dc68:	0800dcbd 	.word	0x0800dcbd
 800dc6c:	0800dcbd 	.word	0x0800dcbd
 800dc70:	0800dcab 	.word	0x0800dcab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68da      	ldr	r2, [r3, #12]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f042 0202 	orr.w	r2, r2, #2
 800dc82:	60da      	str	r2, [r3, #12]
      break;
 800dc84:	e01d      	b.n	800dcc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f042 0204 	orr.w	r2, r2, #4
 800dc94:	60da      	str	r2, [r3, #12]
      break;
 800dc96:	e014      	b.n	800dcc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	68da      	ldr	r2, [r3, #12]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f042 0208 	orr.w	r2, r2, #8
 800dca6:	60da      	str	r2, [r3, #12]
      break;
 800dca8:	e00b      	b.n	800dcc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	68da      	ldr	r2, [r3, #12]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f042 0210 	orr.w	r2, r2, #16
 800dcb8:	60da      	str	r2, [r3, #12]
      break;
 800dcba:	e002      	b.n	800dcc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	73fb      	strb	r3, [r7, #15]
      break;
 800dcc0:	bf00      	nop
  }

  if (status == HAL_OK)
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d148      	bne.n	800dd5a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2201      	movs	r2, #1
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f000 fdf1 	bl	800e8b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a22      	ldr	r2, [pc, #136]	; (800dd64 <HAL_TIM_IC_Start_IT+0x234>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d022      	beq.n	800dd26 <HAL_TIM_IC_Start_IT+0x1f6>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dce8:	d01d      	beq.n	800dd26 <HAL_TIM_IC_Start_IT+0x1f6>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a1e      	ldr	r2, [pc, #120]	; (800dd68 <HAL_TIM_IC_Start_IT+0x238>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d018      	beq.n	800dd26 <HAL_TIM_IC_Start_IT+0x1f6>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a1c      	ldr	r2, [pc, #112]	; (800dd6c <HAL_TIM_IC_Start_IT+0x23c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d013      	beq.n	800dd26 <HAL_TIM_IC_Start_IT+0x1f6>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4a1b      	ldr	r2, [pc, #108]	; (800dd70 <HAL_TIM_IC_Start_IT+0x240>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d00e      	beq.n	800dd26 <HAL_TIM_IC_Start_IT+0x1f6>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a19      	ldr	r2, [pc, #100]	; (800dd74 <HAL_TIM_IC_Start_IT+0x244>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d009      	beq.n	800dd26 <HAL_TIM_IC_Start_IT+0x1f6>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a18      	ldr	r2, [pc, #96]	; (800dd78 <HAL_TIM_IC_Start_IT+0x248>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d004      	beq.n	800dd26 <HAL_TIM_IC_Start_IT+0x1f6>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a16      	ldr	r2, [pc, #88]	; (800dd7c <HAL_TIM_IC_Start_IT+0x24c>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d111      	bne.n	800dd4a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f003 0307 	and.w	r3, r3, #7
 800dd30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b06      	cmp	r3, #6
 800dd36:	d010      	beq.n	800dd5a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f042 0201 	orr.w	r2, r2, #1
 800dd46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd48:	e007      	b.n	800dd5a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f042 0201 	orr.w	r2, r2, #1
 800dd58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	40010000 	.word	0x40010000
 800dd68:	40000400 	.word	0x40000400
 800dd6c:	40000800 	.word	0x40000800
 800dd70:	40000c00 	.word	0x40000c00
 800dd74:	40010400 	.word	0x40010400
 800dd78:	40014000 	.word	0x40014000
 800dd7c:	40001800 	.word	0x40001800

0800dd80 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2b0c      	cmp	r3, #12
 800dd92:	d841      	bhi.n	800de18 <HAL_TIM_IC_Stop_IT+0x98>
 800dd94:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <HAL_TIM_IC_Stop_IT+0x1c>)
 800dd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9a:	bf00      	nop
 800dd9c:	0800ddd1 	.word	0x0800ddd1
 800dda0:	0800de19 	.word	0x0800de19
 800dda4:	0800de19 	.word	0x0800de19
 800dda8:	0800de19 	.word	0x0800de19
 800ddac:	0800dde3 	.word	0x0800dde3
 800ddb0:	0800de19 	.word	0x0800de19
 800ddb4:	0800de19 	.word	0x0800de19
 800ddb8:	0800de19 	.word	0x0800de19
 800ddbc:	0800ddf5 	.word	0x0800ddf5
 800ddc0:	0800de19 	.word	0x0800de19
 800ddc4:	0800de19 	.word	0x0800de19
 800ddc8:	0800de19 	.word	0x0800de19
 800ddcc:	0800de07 	.word	0x0800de07
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68da      	ldr	r2, [r3, #12]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f022 0202 	bic.w	r2, r2, #2
 800ddde:	60da      	str	r2, [r3, #12]
      break;
 800dde0:	e01d      	b.n	800de1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68da      	ldr	r2, [r3, #12]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f022 0204 	bic.w	r2, r2, #4
 800ddf0:	60da      	str	r2, [r3, #12]
      break;
 800ddf2:	e014      	b.n	800de1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68da      	ldr	r2, [r3, #12]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f022 0208 	bic.w	r2, r2, #8
 800de02:	60da      	str	r2, [r3, #12]
      break;
 800de04:	e00b      	b.n	800de1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68da      	ldr	r2, [r3, #12]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f022 0210 	bic.w	r2, r2, #16
 800de14:	60da      	str	r2, [r3, #12]
      break;
 800de16:	e002      	b.n	800de1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800de18:	2301      	movs	r3, #1
 800de1a:	73fb      	strb	r3, [r7, #15]
      break;
 800de1c:	bf00      	nop
  }

  if (status == HAL_OK)
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d156      	bne.n	800ded2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2200      	movs	r2, #0
 800de2a:	6839      	ldr	r1, [r7, #0]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 fd43 	bl	800e8b8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6a1a      	ldr	r2, [r3, #32]
 800de38:	f241 1311 	movw	r3, #4369	; 0x1111
 800de3c:	4013      	ands	r3, r2
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10f      	bne.n	800de62 <HAL_TIM_IC_Stop_IT+0xe2>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6a1a      	ldr	r2, [r3, #32]
 800de48:	f240 4344 	movw	r3, #1092	; 0x444
 800de4c:	4013      	ands	r3, r2
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d107      	bne.n	800de62 <HAL_TIM_IC_Stop_IT+0xe2>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f022 0201 	bic.w	r2, r2, #1
 800de60:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d104      	bne.n	800de72 <HAL_TIM_IC_Stop_IT+0xf2>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de70:	e013      	b.n	800de9a <HAL_TIM_IC_Stop_IT+0x11a>
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	2b04      	cmp	r3, #4
 800de76:	d104      	bne.n	800de82 <HAL_TIM_IC_Stop_IT+0x102>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de80:	e00b      	b.n	800de9a <HAL_TIM_IC_Stop_IT+0x11a>
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	2b08      	cmp	r3, #8
 800de86:	d104      	bne.n	800de92 <HAL_TIM_IC_Stop_IT+0x112>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de90:	e003      	b.n	800de9a <HAL_TIM_IC_Stop_IT+0x11a>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d104      	bne.n	800deaa <HAL_TIM_IC_Stop_IT+0x12a>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dea8:	e013      	b.n	800ded2 <HAL_TIM_IC_Stop_IT+0x152>
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b04      	cmp	r3, #4
 800deae:	d104      	bne.n	800deba <HAL_TIM_IC_Stop_IT+0x13a>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800deb8:	e00b      	b.n	800ded2 <HAL_TIM_IC_Stop_IT+0x152>
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b08      	cmp	r3, #8
 800debe:	d104      	bne.n	800deca <HAL_TIM_IC_Stop_IT+0x14a>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dec8:	e003      	b.n	800ded2 <HAL_TIM_IC_Stop_IT+0x152>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2201      	movs	r2, #1
 800dece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	691b      	ldr	r3, [r3, #16]
 800deea:	f003 0302 	and.w	r3, r3, #2
 800deee:	2b02      	cmp	r3, #2
 800def0:	d122      	bne.n	800df38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	f003 0302 	and.w	r3, r3, #2
 800defc:	2b02      	cmp	r3, #2
 800defe:	d11b      	bne.n	800df38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f06f 0202 	mvn.w	r2, #2
 800df08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	f003 0303 	and.w	r3, r3, #3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d003      	beq.n	800df26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7fe f94c 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800df24:	e005      	b.n	800df32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 fa43 	bl	800e3b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fa4a 	bl	800e3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	f003 0304 	and.w	r3, r3, #4
 800df42:	2b04      	cmp	r3, #4
 800df44:	d122      	bne.n	800df8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b04      	cmp	r3, #4
 800df52:	d11b      	bne.n	800df8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f06f 0204 	mvn.w	r2, #4
 800df5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2202      	movs	r2, #2
 800df62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	699b      	ldr	r3, [r3, #24]
 800df6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d003      	beq.n	800df7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7fe f922 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800df78:	e005      	b.n	800df86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fa19 	bl	800e3b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fa20 	bl	800e3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	691b      	ldr	r3, [r3, #16]
 800df92:	f003 0308 	and.w	r3, r3, #8
 800df96:	2b08      	cmp	r3, #8
 800df98:	d122      	bne.n	800dfe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	f003 0308 	and.w	r3, r3, #8
 800dfa4:	2b08      	cmp	r3, #8
 800dfa6:	d11b      	bne.n	800dfe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f06f 0208 	mvn.w	r2, #8
 800dfb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2204      	movs	r2, #4
 800dfb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	f003 0303 	and.w	r3, r3, #3
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d003      	beq.n	800dfce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7fe f8f8 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800dfcc:	e005      	b.n	800dfda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f9ef 	bl	800e3b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f9f6 	bl	800e3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	f003 0310 	and.w	r3, r3, #16
 800dfea:	2b10      	cmp	r3, #16
 800dfec:	d122      	bne.n	800e034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f003 0310 	and.w	r3, r3, #16
 800dff8:	2b10      	cmp	r3, #16
 800dffa:	d11b      	bne.n	800e034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f06f 0210 	mvn.w	r2, #16
 800e004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2208      	movs	r2, #8
 800e00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	69db      	ldr	r3, [r3, #28]
 800e012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e016:	2b00      	cmp	r3, #0
 800e018:	d003      	beq.n	800e022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7fe f8ce 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800e020:	e005      	b.n	800e02e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f9c5 	bl	800e3b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 f9cc 	bl	800e3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	691b      	ldr	r3, [r3, #16]
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d10e      	bne.n	800e060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	f003 0301 	and.w	r3, r3, #1
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d107      	bne.n	800e060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f06f 0201 	mvn.w	r2, #1
 800e058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7fd fb50 	bl	800b700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	691b      	ldr	r3, [r3, #16]
 800e066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e06a:	2b80      	cmp	r3, #128	; 0x80
 800e06c:	d10e      	bne.n	800e08c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e078:	2b80      	cmp	r3, #128	; 0x80
 800e07a:	d107      	bne.n	800e08c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fcc2 	bl	800ea10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	691b      	ldr	r3, [r3, #16]
 800e092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e096:	2b40      	cmp	r3, #64	; 0x40
 800e098:	d10e      	bne.n	800e0b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a4:	2b40      	cmp	r3, #64	; 0x40
 800e0a6:	d107      	bne.n	800e0b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f991 	bl	800e3da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	f003 0320 	and.w	r3, r3, #32
 800e0c2:	2b20      	cmp	r3, #32
 800e0c4:	d10e      	bne.n	800e0e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	f003 0320 	and.w	r3, r3, #32
 800e0d0:	2b20      	cmp	r3, #32
 800e0d2:	d107      	bne.n	800e0e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f06f 0220 	mvn.w	r2, #32
 800e0dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fc8c 	bl	800e9fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0e4:	bf00      	nop
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e102:	2b01      	cmp	r3, #1
 800e104:	d101      	bne.n	800e10a <HAL_TIM_IC_ConfigChannel+0x1e>
 800e106:	2302      	movs	r3, #2
 800e108:	e088      	b.n	800e21c <HAL_TIM_IC_ConfigChannel+0x130>
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d11b      	bne.n	800e150 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6818      	ldr	r0, [r3, #0]
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	6819      	ldr	r1, [r3, #0]
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	685a      	ldr	r2, [r3, #4]
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	f000 fa02 	bl	800e530 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	699a      	ldr	r2, [r3, #24]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f022 020c 	bic.w	r2, r2, #12
 800e13a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6999      	ldr	r1, [r3, #24]
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	689a      	ldr	r2, [r3, #8]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	430a      	orrs	r2, r1
 800e14c:	619a      	str	r2, [r3, #24]
 800e14e:	e060      	b.n	800e212 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b04      	cmp	r3, #4
 800e154:	d11c      	bne.n	800e190 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6818      	ldr	r0, [r3, #0]
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	6819      	ldr	r1, [r3, #0]
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	f000 fa86 	bl	800e676 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	699a      	ldr	r2, [r3, #24]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e178:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	6999      	ldr	r1, [r3, #24]
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	021a      	lsls	r2, r3, #8
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	430a      	orrs	r2, r1
 800e18c:	619a      	str	r2, [r3, #24]
 800e18e:	e040      	b.n	800e212 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b08      	cmp	r3, #8
 800e194:	d11b      	bne.n	800e1ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	6819      	ldr	r1, [r3, #0]
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	f000 fad3 	bl	800e750 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	69da      	ldr	r2, [r3, #28]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 020c 	bic.w	r2, r2, #12
 800e1b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	69d9      	ldr	r1, [r3, #28]
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	689a      	ldr	r2, [r3, #8]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	430a      	orrs	r2, r1
 800e1ca:	61da      	str	r2, [r3, #28]
 800e1cc:	e021      	b.n	800e212 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b0c      	cmp	r3, #12
 800e1d2:	d11c      	bne.n	800e20e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6818      	ldr	r0, [r3, #0]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	6819      	ldr	r1, [r3, #0]
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	685a      	ldr	r2, [r3, #4]
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	f000 faf0 	bl	800e7c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	69da      	ldr	r2, [r3, #28]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e1f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	69d9      	ldr	r1, [r3, #28]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	021a      	lsls	r2, r3, #8
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	430a      	orrs	r2, r1
 800e20a:	61da      	str	r2, [r3, #28]
 800e20c:	e001      	b.n	800e212 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2200      	movs	r2, #0
 800e216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d101      	bne.n	800e240 <HAL_TIM_ConfigClockSource+0x1c>
 800e23c:	2302      	movs	r3, #2
 800e23e:	e0b4      	b.n	800e3aa <HAL_TIM_ConfigClockSource+0x186>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2202      	movs	r2, #2
 800e24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e25e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e278:	d03e      	beq.n	800e2f8 <HAL_TIM_ConfigClockSource+0xd4>
 800e27a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e27e:	f200 8087 	bhi.w	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e286:	f000 8086 	beq.w	800e396 <HAL_TIM_ConfigClockSource+0x172>
 800e28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e28e:	d87f      	bhi.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e290:	2b70      	cmp	r3, #112	; 0x70
 800e292:	d01a      	beq.n	800e2ca <HAL_TIM_ConfigClockSource+0xa6>
 800e294:	2b70      	cmp	r3, #112	; 0x70
 800e296:	d87b      	bhi.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e298:	2b60      	cmp	r3, #96	; 0x60
 800e29a:	d050      	beq.n	800e33e <HAL_TIM_ConfigClockSource+0x11a>
 800e29c:	2b60      	cmp	r3, #96	; 0x60
 800e29e:	d877      	bhi.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e2a0:	2b50      	cmp	r3, #80	; 0x50
 800e2a2:	d03c      	beq.n	800e31e <HAL_TIM_ConfigClockSource+0xfa>
 800e2a4:	2b50      	cmp	r3, #80	; 0x50
 800e2a6:	d873      	bhi.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e2a8:	2b40      	cmp	r3, #64	; 0x40
 800e2aa:	d058      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x13a>
 800e2ac:	2b40      	cmp	r3, #64	; 0x40
 800e2ae:	d86f      	bhi.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e2b0:	2b30      	cmp	r3, #48	; 0x30
 800e2b2:	d064      	beq.n	800e37e <HAL_TIM_ConfigClockSource+0x15a>
 800e2b4:	2b30      	cmp	r3, #48	; 0x30
 800e2b6:	d86b      	bhi.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e2b8:	2b20      	cmp	r3, #32
 800e2ba:	d060      	beq.n	800e37e <HAL_TIM_ConfigClockSource+0x15a>
 800e2bc:	2b20      	cmp	r3, #32
 800e2be:	d867      	bhi.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d05c      	beq.n	800e37e <HAL_TIM_ConfigClockSource+0x15a>
 800e2c4:	2b10      	cmp	r3, #16
 800e2c6:	d05a      	beq.n	800e37e <HAL_TIM_ConfigClockSource+0x15a>
 800e2c8:	e062      	b.n	800e390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6818      	ldr	r0, [r3, #0]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	6899      	ldr	r1, [r3, #8]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	f000 facd 	bl	800e878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	689b      	ldr	r3, [r3, #8]
 800e2e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e2ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	609a      	str	r2, [r3, #8]
      break;
 800e2f6:	e04f      	b.n	800e398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6818      	ldr	r0, [r3, #0]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	6899      	ldr	r1, [r3, #8]
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	685a      	ldr	r2, [r3, #4]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f000 fab6 	bl	800e878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	689a      	ldr	r2, [r3, #8]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e31a:	609a      	str	r2, [r3, #8]
      break;
 800e31c:	e03c      	b.n	800e398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6818      	ldr	r0, [r3, #0]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	6859      	ldr	r1, [r3, #4]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	461a      	mov	r2, r3
 800e32c:	f000 f974 	bl	800e618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2150      	movs	r1, #80	; 0x50
 800e336:	4618      	mov	r0, r3
 800e338:	f000 fa83 	bl	800e842 <TIM_ITRx_SetConfig>
      break;
 800e33c:	e02c      	b.n	800e398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6818      	ldr	r0, [r3, #0]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	6859      	ldr	r1, [r3, #4]
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	461a      	mov	r2, r3
 800e34c:	f000 f9d0 	bl	800e6f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2160      	movs	r1, #96	; 0x60
 800e356:	4618      	mov	r0, r3
 800e358:	f000 fa73 	bl	800e842 <TIM_ITRx_SetConfig>
      break;
 800e35c:	e01c      	b.n	800e398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6818      	ldr	r0, [r3, #0]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	6859      	ldr	r1, [r3, #4]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	461a      	mov	r2, r3
 800e36c:	f000 f954 	bl	800e618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2140      	movs	r1, #64	; 0x40
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fa63 	bl	800e842 <TIM_ITRx_SetConfig>
      break;
 800e37c:	e00c      	b.n	800e398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4619      	mov	r1, r3
 800e388:	4610      	mov	r0, r2
 800e38a:	f000 fa5a 	bl	800e842 <TIM_ITRx_SetConfig>
      break;
 800e38e:	e003      	b.n	800e398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	73fb      	strb	r3, [r7, #15]
      break;
 800e394:	e000      	b.n	800e398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3b2:	b480      	push	{r7}
 800e3b4:	b083      	sub	sp, #12
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e3ba:	bf00      	nop
 800e3bc:	370c      	adds	r7, #12
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr

0800e3c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e3c6:	b480      	push	{r7}
 800e3c8:	b083      	sub	sp, #12
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e3ce:	bf00      	nop
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e3da:	b480      	push	{r7}
 800e3dc:	b083      	sub	sp, #12
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3e2:	bf00      	nop
 800e3e4:	370c      	adds	r7, #12
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ec:	4770      	bx	lr
	...

0800e3f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	4a40      	ldr	r2, [pc, #256]	; (800e504 <TIM_Base_SetConfig+0x114>)
 800e404:	4293      	cmp	r3, r2
 800e406:	d013      	beq.n	800e430 <TIM_Base_SetConfig+0x40>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e40e:	d00f      	beq.n	800e430 <TIM_Base_SetConfig+0x40>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4a3d      	ldr	r2, [pc, #244]	; (800e508 <TIM_Base_SetConfig+0x118>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d00b      	beq.n	800e430 <TIM_Base_SetConfig+0x40>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4a3c      	ldr	r2, [pc, #240]	; (800e50c <TIM_Base_SetConfig+0x11c>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d007      	beq.n	800e430 <TIM_Base_SetConfig+0x40>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a3b      	ldr	r2, [pc, #236]	; (800e510 <TIM_Base_SetConfig+0x120>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d003      	beq.n	800e430 <TIM_Base_SetConfig+0x40>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a3a      	ldr	r2, [pc, #232]	; (800e514 <TIM_Base_SetConfig+0x124>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d108      	bne.n	800e442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	4313      	orrs	r3, r2
 800e440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4a2f      	ldr	r2, [pc, #188]	; (800e504 <TIM_Base_SetConfig+0x114>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d02b      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e450:	d027      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4a2c      	ldr	r2, [pc, #176]	; (800e508 <TIM_Base_SetConfig+0x118>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d023      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4a2b      	ldr	r2, [pc, #172]	; (800e50c <TIM_Base_SetConfig+0x11c>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d01f      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4a2a      	ldr	r2, [pc, #168]	; (800e510 <TIM_Base_SetConfig+0x120>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d01b      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4a29      	ldr	r2, [pc, #164]	; (800e514 <TIM_Base_SetConfig+0x124>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d017      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4a28      	ldr	r2, [pc, #160]	; (800e518 <TIM_Base_SetConfig+0x128>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d013      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4a27      	ldr	r2, [pc, #156]	; (800e51c <TIM_Base_SetConfig+0x12c>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d00f      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4a26      	ldr	r2, [pc, #152]	; (800e520 <TIM_Base_SetConfig+0x130>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d00b      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4a25      	ldr	r2, [pc, #148]	; (800e524 <TIM_Base_SetConfig+0x134>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d007      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4a24      	ldr	r2, [pc, #144]	; (800e528 <TIM_Base_SetConfig+0x138>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d003      	beq.n	800e4a2 <TIM_Base_SetConfig+0xb2>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4a23      	ldr	r2, [pc, #140]	; (800e52c <TIM_Base_SetConfig+0x13c>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d108      	bne.n	800e4b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	695b      	ldr	r3, [r3, #20]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	689a      	ldr	r2, [r3, #8]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a0a      	ldr	r2, [pc, #40]	; (800e504 <TIM_Base_SetConfig+0x114>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d003      	beq.n	800e4e8 <TIM_Base_SetConfig+0xf8>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	4a0c      	ldr	r2, [pc, #48]	; (800e514 <TIM_Base_SetConfig+0x124>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d103      	bne.n	800e4f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	691a      	ldr	r2, [r3, #16]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	615a      	str	r2, [r3, #20]
}
 800e4f6:	bf00      	nop
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	40010000 	.word	0x40010000
 800e508:	40000400 	.word	0x40000400
 800e50c:	40000800 	.word	0x40000800
 800e510:	40000c00 	.word	0x40000c00
 800e514:	40010400 	.word	0x40010400
 800e518:	40014000 	.word	0x40014000
 800e51c:	40014400 	.word	0x40014400
 800e520:	40014800 	.word	0x40014800
 800e524:	40001800 	.word	0x40001800
 800e528:	40001c00 	.word	0x40001c00
 800e52c:	40002000 	.word	0x40002000

0800e530 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e530:	b480      	push	{r7}
 800e532:	b087      	sub	sp, #28
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6a1b      	ldr	r3, [r3, #32]
 800e542:	f023 0201 	bic.w	r2, r3, #1
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6a1b      	ldr	r3, [r3, #32]
 800e554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	4a28      	ldr	r2, [pc, #160]	; (800e5fc <TIM_TI1_SetConfig+0xcc>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d01b      	beq.n	800e596 <TIM_TI1_SetConfig+0x66>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e564:	d017      	beq.n	800e596 <TIM_TI1_SetConfig+0x66>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	4a25      	ldr	r2, [pc, #148]	; (800e600 <TIM_TI1_SetConfig+0xd0>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d013      	beq.n	800e596 <TIM_TI1_SetConfig+0x66>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	4a24      	ldr	r2, [pc, #144]	; (800e604 <TIM_TI1_SetConfig+0xd4>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d00f      	beq.n	800e596 <TIM_TI1_SetConfig+0x66>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	4a23      	ldr	r2, [pc, #140]	; (800e608 <TIM_TI1_SetConfig+0xd8>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d00b      	beq.n	800e596 <TIM_TI1_SetConfig+0x66>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	4a22      	ldr	r2, [pc, #136]	; (800e60c <TIM_TI1_SetConfig+0xdc>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d007      	beq.n	800e596 <TIM_TI1_SetConfig+0x66>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	4a21      	ldr	r2, [pc, #132]	; (800e610 <TIM_TI1_SetConfig+0xe0>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d003      	beq.n	800e596 <TIM_TI1_SetConfig+0x66>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	4a20      	ldr	r2, [pc, #128]	; (800e614 <TIM_TI1_SetConfig+0xe4>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d101      	bne.n	800e59a <TIM_TI1_SetConfig+0x6a>
 800e596:	2301      	movs	r3, #1
 800e598:	e000      	b.n	800e59c <TIM_TI1_SetConfig+0x6c>
 800e59a:	2300      	movs	r3, #0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d008      	beq.n	800e5b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	f023 0303 	bic.w	r3, r3, #3
 800e5a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e5a8:	697a      	ldr	r2, [r7, #20]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	617b      	str	r3, [r7, #20]
 800e5b0:	e003      	b.n	800e5ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f043 0301 	orr.w	r3, r3, #1
 800e5b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e5c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	011b      	lsls	r3, r3, #4
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	697a      	ldr	r2, [r7, #20]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	f023 030a 	bic.w	r3, r3, #10
 800e5d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	f003 030a 	and.w	r3, r3, #10
 800e5dc:	693a      	ldr	r2, [r7, #16]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	621a      	str	r2, [r3, #32]
}
 800e5ee:	bf00      	nop
 800e5f0:	371c      	adds	r7, #28
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	40010000 	.word	0x40010000
 800e600:	40000400 	.word	0x40000400
 800e604:	40000800 	.word	0x40000800
 800e608:	40000c00 	.word	0x40000c00
 800e60c:	40010400 	.word	0x40010400
 800e610:	40014000 	.word	0x40014000
 800e614:	40001800 	.word	0x40001800

0800e618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e618:	b480      	push	{r7}
 800e61a:	b087      	sub	sp, #28
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6a1b      	ldr	r3, [r3, #32]
 800e628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	f023 0201 	bic.w	r2, r3, #1
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	699b      	ldr	r3, [r3, #24]
 800e63a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	011b      	lsls	r3, r3, #4
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	f023 030a 	bic.w	r3, r3, #10
 800e654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	4313      	orrs	r3, r2
 800e65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	621a      	str	r2, [r3, #32]
}
 800e66a:	bf00      	nop
 800e66c:	371c      	adds	r7, #28
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e676:	b480      	push	{r7}
 800e678:	b087      	sub	sp, #28
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	60f8      	str	r0, [r7, #12]
 800e67e:	60b9      	str	r1, [r7, #8]
 800e680:	607a      	str	r2, [r7, #4]
 800e682:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6a1b      	ldr	r3, [r3, #32]
 800e688:	f023 0210 	bic.w	r2, r3, #16
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	021b      	lsls	r3, r3, #8
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e6b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	031b      	lsls	r3, r3, #12
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e6c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	011b      	lsls	r3, r3, #4
 800e6ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	621a      	str	r2, [r3, #32]
}
 800e6e4:	bf00      	nop
 800e6e6:	371c      	adds	r7, #28
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b087      	sub	sp, #28
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6a1b      	ldr	r3, [r3, #32]
 800e700:	f023 0210 	bic.w	r2, r3, #16
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e71a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	031b      	lsls	r3, r3, #12
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	4313      	orrs	r3, r2
 800e724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e72c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	011b      	lsls	r3, r3, #4
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	4313      	orrs	r3, r2
 800e736:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	693a      	ldr	r2, [r7, #16]
 800e742:	621a      	str	r2, [r3, #32]
}
 800e744:	bf00      	nop
 800e746:	371c      	adds	r7, #28
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e750:	b480      	push	{r7}
 800e752:	b087      	sub	sp, #28
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
 800e75c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6a1b      	ldr	r3, [r3, #32]
 800e762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	69db      	ldr	r3, [r3, #28]
 800e76e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6a1b      	ldr	r3, [r3, #32]
 800e774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f023 0303 	bic.w	r3, r3, #3
 800e77c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4313      	orrs	r3, r2
 800e784:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e78c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	011b      	lsls	r3, r3, #4
 800e792:	b2db      	uxtb	r3, r3
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	4313      	orrs	r3, r2
 800e798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e7a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	021b      	lsls	r3, r3, #8
 800e7a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e7aa:	693a      	ldr	r2, [r7, #16]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	621a      	str	r2, [r3, #32]
}
 800e7bc:	bf00      	nop
 800e7be:	371c      	adds	r7, #28
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b087      	sub	sp, #28
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	69db      	ldr	r3, [r3, #28]
 800e7e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6a1b      	ldr	r3, [r3, #32]
 800e7ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	021b      	lsls	r3, r3, #8
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e806:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	031b      	lsls	r3, r3, #12
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	697a      	ldr	r2, [r7, #20]
 800e810:	4313      	orrs	r3, r2
 800e812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e81a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	031b      	lsls	r3, r3, #12
 800e820:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	4313      	orrs	r3, r2
 800e828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	697a      	ldr	r2, [r7, #20]
 800e82e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	693a      	ldr	r2, [r7, #16]
 800e834:	621a      	str	r2, [r3, #32]
}
 800e836:	bf00      	nop
 800e838:	371c      	adds	r7, #28
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e842:	b480      	push	{r7}
 800e844:	b085      	sub	sp, #20
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	4313      	orrs	r3, r2
 800e860:	f043 0307 	orr.w	r3, r3, #7
 800e864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	609a      	str	r2, [r3, #8]
}
 800e86c:	bf00      	nop
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e878:	b480      	push	{r7}
 800e87a:	b087      	sub	sp, #28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
 800e884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	021a      	lsls	r2, r3, #8
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	431a      	orrs	r2, r3
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	697a      	ldr	r2, [r7, #20]
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	697a      	ldr	r2, [r7, #20]
 800e8aa:	609a      	str	r2, [r3, #8]
}
 800e8ac:	bf00      	nop
 800e8ae:	371c      	adds	r7, #28
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b087      	sub	sp, #28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	f003 031f 	and.w	r3, r3, #31
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6a1a      	ldr	r2, [r3, #32]
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	43db      	mvns	r3, r3
 800e8da:	401a      	ands	r2, r3
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6a1a      	ldr	r2, [r3, #32]
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	f003 031f 	and.w	r3, r3, #31
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e8f0:	431a      	orrs	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	621a      	str	r2, [r3, #32]
}
 800e8f6:	bf00      	nop
 800e8f8:	371c      	adds	r7, #28
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
	...

0800e904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e914:	2b01      	cmp	r3, #1
 800e916:	d101      	bne.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e918:	2302      	movs	r3, #2
 800e91a:	e05a      	b.n	800e9d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2202      	movs	r2, #2
 800e928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a21      	ldr	r2, [pc, #132]	; (800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d022      	beq.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e968:	d01d      	beq.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a1d      	ldr	r2, [pc, #116]	; (800e9e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d018      	beq.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a1b      	ldr	r2, [pc, #108]	; (800e9e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d013      	beq.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a1a      	ldr	r2, [pc, #104]	; (800e9ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d00e      	beq.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4a18      	ldr	r2, [pc, #96]	; (800e9f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d009      	beq.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a17      	ldr	r2, [pc, #92]	; (800e9f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d004      	beq.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a15      	ldr	r2, [pc, #84]	; (800e9f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d10c      	bne.n	800e9c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	68ba      	ldr	r2, [r7, #8]
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3714      	adds	r7, #20
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop
 800e9e0:	40010000 	.word	0x40010000
 800e9e4:	40000400 	.word	0x40000400
 800e9e8:	40000800 	.word	0x40000800
 800e9ec:	40000c00 	.word	0x40000c00
 800e9f0:	40010400 	.word	0x40010400
 800e9f4:	40014000 	.word	0x40014000
 800e9f8:	40001800 	.word	0x40001800

0800e9fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea32:	2301      	movs	r3, #1
 800ea34:	e03f      	b.n	800eab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d106      	bne.n	800ea50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7fc ffc8 	bl	800b9e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2224      	movs	r2, #36	; 0x24
 800ea54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68da      	ldr	r2, [r3, #12]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 fcdf 	bl	800f42c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	691a      	ldr	r2, [r3, #16]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	695a      	ldr	r2, [r3, #20]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68da      	ldr	r2, [r3, #12]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2220      	movs	r2, #32
 800eaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2220      	movs	r2, #32
 800eab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	60f8      	str	r0, [r7, #12]
 800eac6:	60b9      	str	r1, [r7, #8]
 800eac8:	4613      	mov	r3, r2
 800eaca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b20      	cmp	r3, #32
 800ead6:	d11d      	bne.n	800eb14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d002      	beq.n	800eae4 <HAL_UART_Receive_IT+0x26>
 800eade:	88fb      	ldrh	r3, [r7, #6]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800eae4:	2301      	movs	r3, #1
 800eae6:	e016      	b.n	800eb16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d101      	bne.n	800eaf6 <HAL_UART_Receive_IT+0x38>
 800eaf2:	2302      	movs	r3, #2
 800eaf4:	e00f      	b.n	800eb16 <HAL_UART_Receive_IT+0x58>
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eb04:	88fb      	ldrh	r3, [r7, #6]
 800eb06:	461a      	mov	r2, r3
 800eb08:	68b9      	ldr	r1, [r7, #8]
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f000 fab6 	bl	800f07c <UART_Start_Receive_IT>
 800eb10:	4603      	mov	r3, r0
 800eb12:	e000      	b.n	800eb16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800eb14:	2302      	movs	r3, #2
  }
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b0ba      	sub	sp, #232	; 0xe8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800eb46:	2300      	movs	r3, #0
 800eb48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800eb52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb56:	f003 030f 	and.w	r3, r3, #15
 800eb5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800eb5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10f      	bne.n	800eb86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800eb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb6a:	f003 0320 	and.w	r3, r3, #32
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d009      	beq.n	800eb86 <HAL_UART_IRQHandler+0x66>
 800eb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb76:	f003 0320 	and.w	r3, r3, #32
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fb99 	bl	800f2b6 <UART_Receive_IT>
      return;
 800eb84:	e256      	b.n	800f034 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800eb86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f000 80de 	beq.w	800ed4c <HAL_UART_IRQHandler+0x22c>
 800eb90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb94:	f003 0301 	and.w	r3, r3, #1
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d106      	bne.n	800ebaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800eb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eba0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 80d1 	beq.w	800ed4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ebaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00b      	beq.n	800ebce <HAL_UART_IRQHandler+0xae>
 800ebb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d005      	beq.n	800ebce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebc6:	f043 0201 	orr.w	r2, r3, #1
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ebce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebd2:	f003 0304 	and.w	r3, r3, #4
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00b      	beq.n	800ebf2 <HAL_UART_IRQHandler+0xd2>
 800ebda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d005      	beq.n	800ebf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebea:	f043 0202 	orr.w	r2, r3, #2
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ebf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebf6:	f003 0302 	and.w	r3, r3, #2
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00b      	beq.n	800ec16 <HAL_UART_IRQHandler+0xf6>
 800ebfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec02:	f003 0301 	and.w	r3, r3, #1
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d005      	beq.n	800ec16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec0e:	f043 0204 	orr.w	r2, r3, #4
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ec16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec1a:	f003 0308 	and.w	r3, r3, #8
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d011      	beq.n	800ec46 <HAL_UART_IRQHandler+0x126>
 800ec22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec26:	f003 0320 	and.w	r3, r3, #32
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d105      	bne.n	800ec3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ec2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d005      	beq.n	800ec46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec3e:	f043 0208 	orr.w	r2, r3, #8
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 81ed 	beq.w	800f02a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ec50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec54:	f003 0320 	and.w	r3, r3, #32
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d008      	beq.n	800ec6e <HAL_UART_IRQHandler+0x14e>
 800ec5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec60:	f003 0320 	and.w	r3, r3, #32
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 fb24 	bl	800f2b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec78:	2b40      	cmp	r3, #64	; 0x40
 800ec7a:	bf0c      	ite	eq
 800ec7c:	2301      	moveq	r3, #1
 800ec7e:	2300      	movne	r3, #0
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec8a:	f003 0308 	and.w	r3, r3, #8
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d103      	bne.n	800ec9a <HAL_UART_IRQHandler+0x17a>
 800ec92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d04f      	beq.n	800ed3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fa2c 	bl	800f0f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecaa:	2b40      	cmp	r3, #64	; 0x40
 800ecac:	d141      	bne.n	800ed32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3314      	adds	r3, #20
 800ecb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ecbc:	e853 3f00 	ldrex	r3, [r3]
 800ecc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ecc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ecc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	3314      	adds	r3, #20
 800ecd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ecda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ecde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ece6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ecea:	e841 2300 	strex	r3, r2, [r1]
 800ecee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ecf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1d9      	bne.n	800ecae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d013      	beq.n	800ed2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed06:	4a7d      	ldr	r2, [pc, #500]	; (800eefc <HAL_UART_IRQHandler+0x3dc>)
 800ed08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fd fd92 	bl	800c838 <HAL_DMA_Abort_IT>
 800ed14:	4603      	mov	r3, r0
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d016      	beq.n	800ed48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ed24:	4610      	mov	r0, r2
 800ed26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed28:	e00e      	b.n	800ed48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 f990 	bl	800f050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed30:	e00a      	b.n	800ed48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 f98c 	bl	800f050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed38:	e006      	b.n	800ed48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f988 	bl	800f050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ed46:	e170      	b.n	800f02a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed48:	bf00      	nop
    return;
 800ed4a:	e16e      	b.n	800f02a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	f040 814a 	bne.w	800efea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ed56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed5a:	f003 0310 	and.w	r3, r3, #16
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f000 8143 	beq.w	800efea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ed64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed68:	f003 0310 	and.w	r3, r3, #16
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 813c 	beq.w	800efea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ed72:	2300      	movs	r3, #0
 800ed74:	60bb      	str	r3, [r7, #8]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	60bb      	str	r3, [r7, #8]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	60bb      	str	r3, [r7, #8]
 800ed86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	695b      	ldr	r3, [r3, #20]
 800ed8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed92:	2b40      	cmp	r3, #64	; 0x40
 800ed94:	f040 80b4 	bne.w	800ef00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eda4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 8140 	beq.w	800f02e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800edb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800edb6:	429a      	cmp	r2, r3
 800edb8:	f080 8139 	bcs.w	800f02e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800edc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc8:	69db      	ldr	r3, [r3, #28]
 800edca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edce:	f000 8088 	beq.w	800eee2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	330c      	adds	r3, #12
 800edd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ede0:	e853 3f00 	ldrex	r3, [r3]
 800ede4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ede8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800edec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800edf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	330c      	adds	r3, #12
 800edfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800edfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ee02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee0e:	e841 2300 	strex	r3, r2, [r1]
 800ee12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ee16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1d9      	bne.n	800edd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3314      	adds	r3, #20
 800ee24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee28:	e853 3f00 	ldrex	r3, [r3]
 800ee2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ee2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee30:	f023 0301 	bic.w	r3, r3, #1
 800ee34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3314      	adds	r3, #20
 800ee3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ee42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ee46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ee4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ee4e:	e841 2300 	strex	r3, r2, [r1]
 800ee52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ee54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1e1      	bne.n	800ee1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3314      	adds	r3, #20
 800ee60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee64:	e853 3f00 	ldrex	r3, [r3]
 800ee68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ee6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	3314      	adds	r3, #20
 800ee7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ee7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ee80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ee84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ee86:	e841 2300 	strex	r3, r2, [r1]
 800ee8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ee8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1e3      	bne.n	800ee5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2220      	movs	r2, #32
 800ee96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	330c      	adds	r3, #12
 800eea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeaa:	e853 3f00 	ldrex	r3, [r3]
 800eeae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eeb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeb2:	f023 0310 	bic.w	r3, r3, #16
 800eeb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	330c      	adds	r3, #12
 800eec0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eec4:	65ba      	str	r2, [r7, #88]	; 0x58
 800eec6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eeca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eecc:	e841 2300 	strex	r3, r2, [r1]
 800eed0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d1e3      	bne.n	800eea0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fd fc3b 	bl	800c758 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	1ad3      	subs	r3, r2, r3
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	4619      	mov	r1, r3
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 f8b6 	bl	800f064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800eef8:	e099      	b.n	800f02e <HAL_UART_IRQHandler+0x50e>
 800eefa:	bf00      	nop
 800eefc:	0800f1bf 	.word	0x0800f1bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 808b 	beq.w	800f032 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ef1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f000 8086 	beq.w	800f032 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	330c      	adds	r3, #12
 800ef2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	330c      	adds	r3, #12
 800ef46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ef4a:	647a      	str	r2, [r7, #68]	; 0x44
 800ef4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef52:	e841 2300 	strex	r3, r2, [r1]
 800ef56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1e3      	bne.n	800ef26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3314      	adds	r3, #20
 800ef64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef68:	e853 3f00 	ldrex	r3, [r3]
 800ef6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ef6e:	6a3b      	ldr	r3, [r7, #32]
 800ef70:	f023 0301 	bic.w	r3, r3, #1
 800ef74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	3314      	adds	r3, #20
 800ef7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ef82:	633a      	str	r2, [r7, #48]	; 0x30
 800ef84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef8a:	e841 2300 	strex	r3, r2, [r1]
 800ef8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1e3      	bne.n	800ef5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2220      	movs	r2, #32
 800ef9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	330c      	adds	r3, #12
 800efaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	e853 3f00 	ldrex	r3, [r3]
 800efb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f023 0310 	bic.w	r3, r3, #16
 800efba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	330c      	adds	r3, #12
 800efc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800efc8:	61fa      	str	r2, [r7, #28]
 800efca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efcc:	69b9      	ldr	r1, [r7, #24]
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	e841 2300 	strex	r3, r2, [r1]
 800efd4:	617b      	str	r3, [r7, #20]
   return(result);
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d1e3      	bne.n	800efa4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800efdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f83e 	bl	800f064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800efe8:	e023      	b.n	800f032 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800efea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d009      	beq.n	800f00a <HAL_UART_IRQHandler+0x4ea>
 800eff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800effa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800effe:	2b00      	cmp	r3, #0
 800f000:	d003      	beq.n	800f00a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 f8ef 	bl	800f1e6 <UART_Transmit_IT>
    return;
 800f008:	e014      	b.n	800f034 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00e      	beq.n	800f034 <HAL_UART_IRQHandler+0x514>
 800f016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 f92f 	bl	800f286 <UART_EndTransmit_IT>
    return;
 800f028:	e004      	b.n	800f034 <HAL_UART_IRQHandler+0x514>
    return;
 800f02a:	bf00      	nop
 800f02c:	e002      	b.n	800f034 <HAL_UART_IRQHandler+0x514>
      return;
 800f02e:	bf00      	nop
 800f030:	e000      	b.n	800f034 <HAL_UART_IRQHandler+0x514>
      return;
 800f032:	bf00      	nop
  }
}
 800f034:	37e8      	adds	r7, #232	; 0xe8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop

0800f03c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f044:	bf00      	nop
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f058:	bf00      	nop
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	460b      	mov	r3, r1
 800f06e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	4613      	mov	r3, r2
 800f088:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	88fa      	ldrh	r2, [r7, #6]
 800f094:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	88fa      	ldrh	r2, [r7, #6]
 800f09a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2222      	movs	r2, #34	; 0x22
 800f0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d007      	beq.n	800f0ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68da      	ldr	r2, [r3, #12]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f0c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	695a      	ldr	r2, [r3, #20]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f042 0201 	orr.w	r2, r2, #1
 800f0d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68da      	ldr	r2, [r3, #12]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f042 0220 	orr.w	r2, r2, #32
 800f0e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3714      	adds	r7, #20
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b095      	sub	sp, #84	; 0x54
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	330c      	adds	r3, #12
 800f106:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10a:	e853 3f00 	ldrex	r3, [r3]
 800f10e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f112:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f116:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	330c      	adds	r3, #12
 800f11e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f120:	643a      	str	r2, [r7, #64]	; 0x40
 800f122:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f124:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f128:	e841 2300 	strex	r3, r2, [r1]
 800f12c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1e5      	bne.n	800f100 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	3314      	adds	r3, #20
 800f13a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	e853 3f00 	ldrex	r3, [r3]
 800f142:	61fb      	str	r3, [r7, #28]
   return(result);
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	f023 0301 	bic.w	r3, r3, #1
 800f14a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	3314      	adds	r3, #20
 800f152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f154:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f15a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f15c:	e841 2300 	strex	r3, r2, [r1]
 800f160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1e5      	bne.n	800f134 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d119      	bne.n	800f1a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	330c      	adds	r3, #12
 800f176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	e853 3f00 	ldrex	r3, [r3]
 800f17e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	f023 0310 	bic.w	r3, r3, #16
 800f186:	647b      	str	r3, [r7, #68]	; 0x44
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	330c      	adds	r3, #12
 800f18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f190:	61ba      	str	r2, [r7, #24]
 800f192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f194:	6979      	ldr	r1, [r7, #20]
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	e841 2300 	strex	r3, r2, [r1]
 800f19c:	613b      	str	r3, [r7, #16]
   return(result);
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1e5      	bne.n	800f170 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2220      	movs	r2, #32
 800f1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f1b2:	bf00      	nop
 800f1b4:	3754      	adds	r7, #84	; 0x54
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr

0800f1be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b084      	sub	sp, #16
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f7ff ff39 	bl	800f050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1de:	bf00      	nop
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f1e6:	b480      	push	{r7}
 800f1e8:	b085      	sub	sp, #20
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	2b21      	cmp	r3, #33	; 0x21
 800f1f8:	d13e      	bne.n	800f278 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f202:	d114      	bne.n	800f22e <UART_Transmit_IT+0x48>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d110      	bne.n	800f22e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a1b      	ldr	r3, [r3, #32]
 800f210:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	881b      	ldrh	r3, [r3, #0]
 800f216:	461a      	mov	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f220:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a1b      	ldr	r3, [r3, #32]
 800f226:	1c9a      	adds	r2, r3, #2
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	621a      	str	r2, [r3, #32]
 800f22c:	e008      	b.n	800f240 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a1b      	ldr	r3, [r3, #32]
 800f232:	1c59      	adds	r1, r3, #1
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	6211      	str	r1, [r2, #32]
 800f238:	781a      	ldrb	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f244:	b29b      	uxth	r3, r3
 800f246:	3b01      	subs	r3, #1
 800f248:	b29b      	uxth	r3, r3
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	4619      	mov	r1, r3
 800f24e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10f      	bne.n	800f274 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68da      	ldr	r2, [r3, #12]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f262:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68da      	ldr	r2, [r3, #12]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f272:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f274:	2300      	movs	r3, #0
 800f276:	e000      	b.n	800f27a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800f278:	2302      	movs	r3, #2
  }
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3714      	adds	r7, #20
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr

0800f286 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b082      	sub	sp, #8
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68da      	ldr	r2, [r3, #12]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f29c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2220      	movs	r2, #32
 800f2a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7ff fec8 	bl	800f03c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f2ac:	2300      	movs	r3, #0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b08c      	sub	sp, #48	; 0x30
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b22      	cmp	r3, #34	; 0x22
 800f2c8:	f040 80ab 	bne.w	800f422 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2d4:	d117      	bne.n	800f306 <UART_Receive_IT+0x50>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d113      	bne.n	800f306 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2fe:	1c9a      	adds	r2, r3, #2
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	629a      	str	r2, [r3, #40]	; 0x28
 800f304:	e026      	b.n	800f354 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800f30c:	2300      	movs	r3, #0
 800f30e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f318:	d007      	beq.n	800f32a <UART_Receive_IT+0x74>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10a      	bne.n	800f338 <UART_Receive_IT+0x82>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d106      	bne.n	800f338 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	b2da      	uxtb	r2, r3
 800f332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f334:	701a      	strb	r2, [r3, #0]
 800f336:	e008      	b.n	800f34a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f344:	b2da      	uxtb	r2, r3
 800f346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f348:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f34e:	1c5a      	adds	r2, r3, #1
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f358:	b29b      	uxth	r3, r3
 800f35a:	3b01      	subs	r3, #1
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	4619      	mov	r1, r3
 800f362:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f364:	2b00      	cmp	r3, #0
 800f366:	d15a      	bne.n	800f41e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	68da      	ldr	r2, [r3, #12]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f022 0220 	bic.w	r2, r2, #32
 800f376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68da      	ldr	r2, [r3, #12]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	695a      	ldr	r2, [r3, #20]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f022 0201 	bic.w	r2, r2, #1
 800f396:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2220      	movs	r2, #32
 800f39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d135      	bne.n	800f414 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	330c      	adds	r3, #12
 800f3b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	e853 3f00 	ldrex	r3, [r3]
 800f3bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	f023 0310 	bic.w	r3, r3, #16
 800f3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	330c      	adds	r3, #12
 800f3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ce:	623a      	str	r2, [r7, #32]
 800f3d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d2:	69f9      	ldr	r1, [r7, #28]
 800f3d4:	6a3a      	ldr	r2, [r7, #32]
 800f3d6:	e841 2300 	strex	r3, r2, [r1]
 800f3da:	61bb      	str	r3, [r7, #24]
   return(result);
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1e5      	bne.n	800f3ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f003 0310 	and.w	r3, r3, #16
 800f3ec:	2b10      	cmp	r3, #16
 800f3ee:	d10a      	bne.n	800f406 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	60fb      	str	r3, [r7, #12]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	60fb      	str	r3, [r7, #12]
 800f404:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f40a:	4619      	mov	r1, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff fe29 	bl	800f064 <HAL_UARTEx_RxEventCallback>
 800f412:	e002      	b.n	800f41a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7fc fff9 	bl	800c40c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	e002      	b.n	800f424 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	e000      	b.n	800f424 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800f422:	2302      	movs	r3, #2
  }
}
 800f424:	4618      	mov	r0, r3
 800f426:	3730      	adds	r7, #48	; 0x30
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f42c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f430:	b0c0      	sub	sp, #256	; 0x100
 800f432:	af00      	add	r7, sp, #0
 800f434:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	691b      	ldr	r3, [r3, #16]
 800f440:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f448:	68d9      	ldr	r1, [r3, #12]
 800f44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	ea40 0301 	orr.w	r3, r0, r1
 800f454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f45a:	689a      	ldr	r2, [r3, #8]
 800f45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	431a      	orrs	r2, r3
 800f464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f468:	695b      	ldr	r3, [r3, #20]
 800f46a:	431a      	orrs	r2, r3
 800f46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f470:	69db      	ldr	r3, [r3, #28]
 800f472:	4313      	orrs	r3, r2
 800f474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800f478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f484:	f021 010c 	bic.w	r1, r1, #12
 800f488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f492:	430b      	orrs	r3, r1
 800f494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	695b      	ldr	r3, [r3, #20]
 800f49e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f4a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f4a6:	6999      	ldr	r1, [r3, #24]
 800f4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	ea40 0301 	orr.w	r3, r0, r1
 800f4b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	4b8f      	ldr	r3, [pc, #572]	; (800f6f8 <UART_SetConfig+0x2cc>)
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d005      	beq.n	800f4cc <UART_SetConfig+0xa0>
 800f4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	4b8d      	ldr	r3, [pc, #564]	; (800f6fc <UART_SetConfig+0x2d0>)
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d104      	bne.n	800f4d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f4cc:	f7fd fca4 	bl	800ce18 <HAL_RCC_GetPCLK2Freq>
 800f4d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800f4d4:	e003      	b.n	800f4de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f4d6:	f7fd fc8b 	bl	800cdf0 <HAL_RCC_GetPCLK1Freq>
 800f4da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f4e2:	69db      	ldr	r3, [r3, #28]
 800f4e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4e8:	f040 810c 	bne.w	800f704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f4ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f4f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800f4fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800f4fe:	4622      	mov	r2, r4
 800f500:	462b      	mov	r3, r5
 800f502:	1891      	adds	r1, r2, r2
 800f504:	65b9      	str	r1, [r7, #88]	; 0x58
 800f506:	415b      	adcs	r3, r3
 800f508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f50a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f50e:	4621      	mov	r1, r4
 800f510:	eb12 0801 	adds.w	r8, r2, r1
 800f514:	4629      	mov	r1, r5
 800f516:	eb43 0901 	adc.w	r9, r3, r1
 800f51a:	f04f 0200 	mov.w	r2, #0
 800f51e:	f04f 0300 	mov.w	r3, #0
 800f522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f52a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f52e:	4690      	mov	r8, r2
 800f530:	4699      	mov	r9, r3
 800f532:	4623      	mov	r3, r4
 800f534:	eb18 0303 	adds.w	r3, r8, r3
 800f538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f53c:	462b      	mov	r3, r5
 800f53e:	eb49 0303 	adc.w	r3, r9, r3
 800f542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f552:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800f556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f55a:	460b      	mov	r3, r1
 800f55c:	18db      	adds	r3, r3, r3
 800f55e:	653b      	str	r3, [r7, #80]	; 0x50
 800f560:	4613      	mov	r3, r2
 800f562:	eb42 0303 	adc.w	r3, r2, r3
 800f566:	657b      	str	r3, [r7, #84]	; 0x54
 800f568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f56c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800f570:	f7f8 fe9e 	bl	80082b0 <__aeabi_uldivmod>
 800f574:	4602      	mov	r2, r0
 800f576:	460b      	mov	r3, r1
 800f578:	4b61      	ldr	r3, [pc, #388]	; (800f700 <UART_SetConfig+0x2d4>)
 800f57a:	fba3 2302 	umull	r2, r3, r3, r2
 800f57e:	095b      	lsrs	r3, r3, #5
 800f580:	011c      	lsls	r4, r3, #4
 800f582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f586:	2200      	movs	r2, #0
 800f588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f58c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800f590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800f594:	4642      	mov	r2, r8
 800f596:	464b      	mov	r3, r9
 800f598:	1891      	adds	r1, r2, r2
 800f59a:	64b9      	str	r1, [r7, #72]	; 0x48
 800f59c:	415b      	adcs	r3, r3
 800f59e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f5a4:	4641      	mov	r1, r8
 800f5a6:	eb12 0a01 	adds.w	sl, r2, r1
 800f5aa:	4649      	mov	r1, r9
 800f5ac:	eb43 0b01 	adc.w	fp, r3, r1
 800f5b0:	f04f 0200 	mov.w	r2, #0
 800f5b4:	f04f 0300 	mov.w	r3, #0
 800f5b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f5bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f5c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f5c4:	4692      	mov	sl, r2
 800f5c6:	469b      	mov	fp, r3
 800f5c8:	4643      	mov	r3, r8
 800f5ca:	eb1a 0303 	adds.w	r3, sl, r3
 800f5ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f5d2:	464b      	mov	r3, r9
 800f5d4:	eb4b 0303 	adc.w	r3, fp, r3
 800f5d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f5e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f5ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	18db      	adds	r3, r3, r3
 800f5f4:	643b      	str	r3, [r7, #64]	; 0x40
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	eb42 0303 	adc.w	r3, r2, r3
 800f5fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f5fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f606:	f7f8 fe53 	bl	80082b0 <__aeabi_uldivmod>
 800f60a:	4602      	mov	r2, r0
 800f60c:	460b      	mov	r3, r1
 800f60e:	4611      	mov	r1, r2
 800f610:	4b3b      	ldr	r3, [pc, #236]	; (800f700 <UART_SetConfig+0x2d4>)
 800f612:	fba3 2301 	umull	r2, r3, r3, r1
 800f616:	095b      	lsrs	r3, r3, #5
 800f618:	2264      	movs	r2, #100	; 0x64
 800f61a:	fb02 f303 	mul.w	r3, r2, r3
 800f61e:	1acb      	subs	r3, r1, r3
 800f620:	00db      	lsls	r3, r3, #3
 800f622:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f626:	4b36      	ldr	r3, [pc, #216]	; (800f700 <UART_SetConfig+0x2d4>)
 800f628:	fba3 2302 	umull	r2, r3, r3, r2
 800f62c:	095b      	lsrs	r3, r3, #5
 800f62e:	005b      	lsls	r3, r3, #1
 800f630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f634:	441c      	add	r4, r3
 800f636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f63a:	2200      	movs	r2, #0
 800f63c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f640:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800f648:	4642      	mov	r2, r8
 800f64a:	464b      	mov	r3, r9
 800f64c:	1891      	adds	r1, r2, r2
 800f64e:	63b9      	str	r1, [r7, #56]	; 0x38
 800f650:	415b      	adcs	r3, r3
 800f652:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f658:	4641      	mov	r1, r8
 800f65a:	1851      	adds	r1, r2, r1
 800f65c:	6339      	str	r1, [r7, #48]	; 0x30
 800f65e:	4649      	mov	r1, r9
 800f660:	414b      	adcs	r3, r1
 800f662:	637b      	str	r3, [r7, #52]	; 0x34
 800f664:	f04f 0200 	mov.w	r2, #0
 800f668:	f04f 0300 	mov.w	r3, #0
 800f66c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f670:	4659      	mov	r1, fp
 800f672:	00cb      	lsls	r3, r1, #3
 800f674:	4651      	mov	r1, sl
 800f676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f67a:	4651      	mov	r1, sl
 800f67c:	00ca      	lsls	r2, r1, #3
 800f67e:	4610      	mov	r0, r2
 800f680:	4619      	mov	r1, r3
 800f682:	4603      	mov	r3, r0
 800f684:	4642      	mov	r2, r8
 800f686:	189b      	adds	r3, r3, r2
 800f688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f68c:	464b      	mov	r3, r9
 800f68e:	460a      	mov	r2, r1
 800f690:	eb42 0303 	adc.w	r3, r2, r3
 800f694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f6a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f6a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	18db      	adds	r3, r3, r3
 800f6b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	eb42 0303 	adc.w	r3, r2, r3
 800f6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f6be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f6c2:	f7f8 fdf5 	bl	80082b0 <__aeabi_uldivmod>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	4b0d      	ldr	r3, [pc, #52]	; (800f700 <UART_SetConfig+0x2d4>)
 800f6cc:	fba3 1302 	umull	r1, r3, r3, r2
 800f6d0:	095b      	lsrs	r3, r3, #5
 800f6d2:	2164      	movs	r1, #100	; 0x64
 800f6d4:	fb01 f303 	mul.w	r3, r1, r3
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	00db      	lsls	r3, r3, #3
 800f6dc:	3332      	adds	r3, #50	; 0x32
 800f6de:	4a08      	ldr	r2, [pc, #32]	; (800f700 <UART_SetConfig+0x2d4>)
 800f6e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f6e4:	095b      	lsrs	r3, r3, #5
 800f6e6:	f003 0207 	and.w	r2, r3, #7
 800f6ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4422      	add	r2, r4
 800f6f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f6f4:	e105      	b.n	800f902 <UART_SetConfig+0x4d6>
 800f6f6:	bf00      	nop
 800f6f8:	40011000 	.word	0x40011000
 800f6fc:	40011400 	.word	0x40011400
 800f700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f708:	2200      	movs	r2, #0
 800f70a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f70e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f716:	4642      	mov	r2, r8
 800f718:	464b      	mov	r3, r9
 800f71a:	1891      	adds	r1, r2, r2
 800f71c:	6239      	str	r1, [r7, #32]
 800f71e:	415b      	adcs	r3, r3
 800f720:	627b      	str	r3, [r7, #36]	; 0x24
 800f722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f726:	4641      	mov	r1, r8
 800f728:	1854      	adds	r4, r2, r1
 800f72a:	4649      	mov	r1, r9
 800f72c:	eb43 0501 	adc.w	r5, r3, r1
 800f730:	f04f 0200 	mov.w	r2, #0
 800f734:	f04f 0300 	mov.w	r3, #0
 800f738:	00eb      	lsls	r3, r5, #3
 800f73a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f73e:	00e2      	lsls	r2, r4, #3
 800f740:	4614      	mov	r4, r2
 800f742:	461d      	mov	r5, r3
 800f744:	4643      	mov	r3, r8
 800f746:	18e3      	adds	r3, r4, r3
 800f748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f74c:	464b      	mov	r3, r9
 800f74e:	eb45 0303 	adc.w	r3, r5, r3
 800f752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f766:	f04f 0200 	mov.w	r2, #0
 800f76a:	f04f 0300 	mov.w	r3, #0
 800f76e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f772:	4629      	mov	r1, r5
 800f774:	008b      	lsls	r3, r1, #2
 800f776:	4621      	mov	r1, r4
 800f778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f77c:	4621      	mov	r1, r4
 800f77e:	008a      	lsls	r2, r1, #2
 800f780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f784:	f7f8 fd94 	bl	80082b0 <__aeabi_uldivmod>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	4b60      	ldr	r3, [pc, #384]	; (800f910 <UART_SetConfig+0x4e4>)
 800f78e:	fba3 2302 	umull	r2, r3, r3, r2
 800f792:	095b      	lsrs	r3, r3, #5
 800f794:	011c      	lsls	r4, r3, #4
 800f796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f79a:	2200      	movs	r2, #0
 800f79c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f7a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f7a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f7a8:	4642      	mov	r2, r8
 800f7aa:	464b      	mov	r3, r9
 800f7ac:	1891      	adds	r1, r2, r2
 800f7ae:	61b9      	str	r1, [r7, #24]
 800f7b0:	415b      	adcs	r3, r3
 800f7b2:	61fb      	str	r3, [r7, #28]
 800f7b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f7b8:	4641      	mov	r1, r8
 800f7ba:	1851      	adds	r1, r2, r1
 800f7bc:	6139      	str	r1, [r7, #16]
 800f7be:	4649      	mov	r1, r9
 800f7c0:	414b      	adcs	r3, r1
 800f7c2:	617b      	str	r3, [r7, #20]
 800f7c4:	f04f 0200 	mov.w	r2, #0
 800f7c8:	f04f 0300 	mov.w	r3, #0
 800f7cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f7d0:	4659      	mov	r1, fp
 800f7d2:	00cb      	lsls	r3, r1, #3
 800f7d4:	4651      	mov	r1, sl
 800f7d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f7da:	4651      	mov	r1, sl
 800f7dc:	00ca      	lsls	r2, r1, #3
 800f7de:	4610      	mov	r0, r2
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	4642      	mov	r2, r8
 800f7e6:	189b      	adds	r3, r3, r2
 800f7e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f7ec:	464b      	mov	r3, r9
 800f7ee:	460a      	mov	r2, r1
 800f7f0:	eb42 0303 	adc.w	r3, r2, r3
 800f7f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	67bb      	str	r3, [r7, #120]	; 0x78
 800f802:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f804:	f04f 0200 	mov.w	r2, #0
 800f808:	f04f 0300 	mov.w	r3, #0
 800f80c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f810:	4649      	mov	r1, r9
 800f812:	008b      	lsls	r3, r1, #2
 800f814:	4641      	mov	r1, r8
 800f816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f81a:	4641      	mov	r1, r8
 800f81c:	008a      	lsls	r2, r1, #2
 800f81e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f822:	f7f8 fd45 	bl	80082b0 <__aeabi_uldivmod>
 800f826:	4602      	mov	r2, r0
 800f828:	460b      	mov	r3, r1
 800f82a:	4b39      	ldr	r3, [pc, #228]	; (800f910 <UART_SetConfig+0x4e4>)
 800f82c:	fba3 1302 	umull	r1, r3, r3, r2
 800f830:	095b      	lsrs	r3, r3, #5
 800f832:	2164      	movs	r1, #100	; 0x64
 800f834:	fb01 f303 	mul.w	r3, r1, r3
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	011b      	lsls	r3, r3, #4
 800f83c:	3332      	adds	r3, #50	; 0x32
 800f83e:	4a34      	ldr	r2, [pc, #208]	; (800f910 <UART_SetConfig+0x4e4>)
 800f840:	fba2 2303 	umull	r2, r3, r2, r3
 800f844:	095b      	lsrs	r3, r3, #5
 800f846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f84a:	441c      	add	r4, r3
 800f84c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f850:	2200      	movs	r2, #0
 800f852:	673b      	str	r3, [r7, #112]	; 0x70
 800f854:	677a      	str	r2, [r7, #116]	; 0x74
 800f856:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f85a:	4642      	mov	r2, r8
 800f85c:	464b      	mov	r3, r9
 800f85e:	1891      	adds	r1, r2, r2
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	415b      	adcs	r3, r3
 800f864:	60fb      	str	r3, [r7, #12]
 800f866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f86a:	4641      	mov	r1, r8
 800f86c:	1851      	adds	r1, r2, r1
 800f86e:	6039      	str	r1, [r7, #0]
 800f870:	4649      	mov	r1, r9
 800f872:	414b      	adcs	r3, r1
 800f874:	607b      	str	r3, [r7, #4]
 800f876:	f04f 0200 	mov.w	r2, #0
 800f87a:	f04f 0300 	mov.w	r3, #0
 800f87e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f882:	4659      	mov	r1, fp
 800f884:	00cb      	lsls	r3, r1, #3
 800f886:	4651      	mov	r1, sl
 800f888:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f88c:	4651      	mov	r1, sl
 800f88e:	00ca      	lsls	r2, r1, #3
 800f890:	4610      	mov	r0, r2
 800f892:	4619      	mov	r1, r3
 800f894:	4603      	mov	r3, r0
 800f896:	4642      	mov	r2, r8
 800f898:	189b      	adds	r3, r3, r2
 800f89a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f89c:	464b      	mov	r3, r9
 800f89e:	460a      	mov	r2, r1
 800f8a0:	eb42 0303 	adc.w	r3, r2, r3
 800f8a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	663b      	str	r3, [r7, #96]	; 0x60
 800f8b0:	667a      	str	r2, [r7, #100]	; 0x64
 800f8b2:	f04f 0200 	mov.w	r2, #0
 800f8b6:	f04f 0300 	mov.w	r3, #0
 800f8ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f8be:	4649      	mov	r1, r9
 800f8c0:	008b      	lsls	r3, r1, #2
 800f8c2:	4641      	mov	r1, r8
 800f8c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f8c8:	4641      	mov	r1, r8
 800f8ca:	008a      	lsls	r2, r1, #2
 800f8cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f8d0:	f7f8 fcee 	bl	80082b0 <__aeabi_uldivmod>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	4b0d      	ldr	r3, [pc, #52]	; (800f910 <UART_SetConfig+0x4e4>)
 800f8da:	fba3 1302 	umull	r1, r3, r3, r2
 800f8de:	095b      	lsrs	r3, r3, #5
 800f8e0:	2164      	movs	r1, #100	; 0x64
 800f8e2:	fb01 f303 	mul.w	r3, r1, r3
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	011b      	lsls	r3, r3, #4
 800f8ea:	3332      	adds	r3, #50	; 0x32
 800f8ec:	4a08      	ldr	r2, [pc, #32]	; (800f910 <UART_SetConfig+0x4e4>)
 800f8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f2:	095b      	lsrs	r3, r3, #5
 800f8f4:	f003 020f 	and.w	r2, r3, #15
 800f8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4422      	add	r2, r4
 800f900:	609a      	str	r2, [r3, #8]
}
 800f902:	bf00      	nop
 800f904:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f908:	46bd      	mov	sp, r7
 800f90a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f90e:	bf00      	nop
 800f910:	51eb851f 	.word	0x51eb851f

0800f914 <__errno>:
 800f914:	4b01      	ldr	r3, [pc, #4]	; (800f91c <__errno+0x8>)
 800f916:	6818      	ldr	r0, [r3, #0]
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	20000014 	.word	0x20000014

0800f920 <__libc_init_array>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	4d0d      	ldr	r5, [pc, #52]	; (800f958 <__libc_init_array+0x38>)
 800f924:	4c0d      	ldr	r4, [pc, #52]	; (800f95c <__libc_init_array+0x3c>)
 800f926:	1b64      	subs	r4, r4, r5
 800f928:	10a4      	asrs	r4, r4, #2
 800f92a:	2600      	movs	r6, #0
 800f92c:	42a6      	cmp	r6, r4
 800f92e:	d109      	bne.n	800f944 <__libc_init_array+0x24>
 800f930:	4d0b      	ldr	r5, [pc, #44]	; (800f960 <__libc_init_array+0x40>)
 800f932:	4c0c      	ldr	r4, [pc, #48]	; (800f964 <__libc_init_array+0x44>)
 800f934:	f000 ffbc 	bl	80108b0 <_init>
 800f938:	1b64      	subs	r4, r4, r5
 800f93a:	10a4      	asrs	r4, r4, #2
 800f93c:	2600      	movs	r6, #0
 800f93e:	42a6      	cmp	r6, r4
 800f940:	d105      	bne.n	800f94e <__libc_init_array+0x2e>
 800f942:	bd70      	pop	{r4, r5, r6, pc}
 800f944:	f855 3b04 	ldr.w	r3, [r5], #4
 800f948:	4798      	blx	r3
 800f94a:	3601      	adds	r6, #1
 800f94c:	e7ee      	b.n	800f92c <__libc_init_array+0xc>
 800f94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f952:	4798      	blx	r3
 800f954:	3601      	adds	r6, #1
 800f956:	e7f2      	b.n	800f93e <__libc_init_array+0x1e>
 800f958:	08010a18 	.word	0x08010a18
 800f95c:	08010a18 	.word	0x08010a18
 800f960:	08010a18 	.word	0x08010a18
 800f964:	08010a1c 	.word	0x08010a1c

0800f968 <memcpy>:
 800f968:	440a      	add	r2, r1
 800f96a:	4291      	cmp	r1, r2
 800f96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f970:	d100      	bne.n	800f974 <memcpy+0xc>
 800f972:	4770      	bx	lr
 800f974:	b510      	push	{r4, lr}
 800f976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f97a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f97e:	4291      	cmp	r1, r2
 800f980:	d1f9      	bne.n	800f976 <memcpy+0xe>
 800f982:	bd10      	pop	{r4, pc}

0800f984 <memset>:
 800f984:	4402      	add	r2, r0
 800f986:	4603      	mov	r3, r0
 800f988:	4293      	cmp	r3, r2
 800f98a:	d100      	bne.n	800f98e <memset+0xa>
 800f98c:	4770      	bx	lr
 800f98e:	f803 1b01 	strb.w	r1, [r3], #1
 800f992:	e7f9      	b.n	800f988 <memset+0x4>

0800f994 <iprintf>:
 800f994:	b40f      	push	{r0, r1, r2, r3}
 800f996:	4b0a      	ldr	r3, [pc, #40]	; (800f9c0 <iprintf+0x2c>)
 800f998:	b513      	push	{r0, r1, r4, lr}
 800f99a:	681c      	ldr	r4, [r3, #0]
 800f99c:	b124      	cbz	r4, 800f9a8 <iprintf+0x14>
 800f99e:	69a3      	ldr	r3, [r4, #24]
 800f9a0:	b913      	cbnz	r3, 800f9a8 <iprintf+0x14>
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f000 f866 	bl	800fa74 <__sinit>
 800f9a8:	ab05      	add	r3, sp, #20
 800f9aa:	9a04      	ldr	r2, [sp, #16]
 800f9ac:	68a1      	ldr	r1, [r4, #8]
 800f9ae:	9301      	str	r3, [sp, #4]
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f000 f9bd 	bl	800fd30 <_vfiprintf_r>
 800f9b6:	b002      	add	sp, #8
 800f9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9bc:	b004      	add	sp, #16
 800f9be:	4770      	bx	lr
 800f9c0:	20000014 	.word	0x20000014

0800f9c4 <std>:
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	b510      	push	{r4, lr}
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	e9c0 3300 	strd	r3, r3, [r0]
 800f9ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9d2:	6083      	str	r3, [r0, #8]
 800f9d4:	8181      	strh	r1, [r0, #12]
 800f9d6:	6643      	str	r3, [r0, #100]	; 0x64
 800f9d8:	81c2      	strh	r2, [r0, #14]
 800f9da:	6183      	str	r3, [r0, #24]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	2208      	movs	r2, #8
 800f9e0:	305c      	adds	r0, #92	; 0x5c
 800f9e2:	f7ff ffcf 	bl	800f984 <memset>
 800f9e6:	4b05      	ldr	r3, [pc, #20]	; (800f9fc <std+0x38>)
 800f9e8:	6263      	str	r3, [r4, #36]	; 0x24
 800f9ea:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <std+0x3c>)
 800f9ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800f9ee:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <std+0x40>)
 800f9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f9f2:	4b05      	ldr	r3, [pc, #20]	; (800fa08 <std+0x44>)
 800f9f4:	6224      	str	r4, [r4, #32]
 800f9f6:	6323      	str	r3, [r4, #48]	; 0x30
 800f9f8:	bd10      	pop	{r4, pc}
 800f9fa:	bf00      	nop
 800f9fc:	080102d9 	.word	0x080102d9
 800fa00:	080102fb 	.word	0x080102fb
 800fa04:	08010333 	.word	0x08010333
 800fa08:	08010357 	.word	0x08010357

0800fa0c <_cleanup_r>:
 800fa0c:	4901      	ldr	r1, [pc, #4]	; (800fa14 <_cleanup_r+0x8>)
 800fa0e:	f000 b8af 	b.w	800fb70 <_fwalk_reent>
 800fa12:	bf00      	nop
 800fa14:	08010631 	.word	0x08010631

0800fa18 <__sfmoreglue>:
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	2268      	movs	r2, #104	; 0x68
 800fa1c:	1e4d      	subs	r5, r1, #1
 800fa1e:	4355      	muls	r5, r2
 800fa20:	460e      	mov	r6, r1
 800fa22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa26:	f000 f8e5 	bl	800fbf4 <_malloc_r>
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	b140      	cbz	r0, 800fa40 <__sfmoreglue+0x28>
 800fa2e:	2100      	movs	r1, #0
 800fa30:	e9c0 1600 	strd	r1, r6, [r0]
 800fa34:	300c      	adds	r0, #12
 800fa36:	60a0      	str	r0, [r4, #8]
 800fa38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa3c:	f7ff ffa2 	bl	800f984 <memset>
 800fa40:	4620      	mov	r0, r4
 800fa42:	bd70      	pop	{r4, r5, r6, pc}

0800fa44 <__sfp_lock_acquire>:
 800fa44:	4801      	ldr	r0, [pc, #4]	; (800fa4c <__sfp_lock_acquire+0x8>)
 800fa46:	f000 b8b3 	b.w	800fbb0 <__retarget_lock_acquire_recursive>
 800fa4a:	bf00      	nop
 800fa4c:	200194bd 	.word	0x200194bd

0800fa50 <__sfp_lock_release>:
 800fa50:	4801      	ldr	r0, [pc, #4]	; (800fa58 <__sfp_lock_release+0x8>)
 800fa52:	f000 b8ae 	b.w	800fbb2 <__retarget_lock_release_recursive>
 800fa56:	bf00      	nop
 800fa58:	200194bd 	.word	0x200194bd

0800fa5c <__sinit_lock_acquire>:
 800fa5c:	4801      	ldr	r0, [pc, #4]	; (800fa64 <__sinit_lock_acquire+0x8>)
 800fa5e:	f000 b8a7 	b.w	800fbb0 <__retarget_lock_acquire_recursive>
 800fa62:	bf00      	nop
 800fa64:	200194be 	.word	0x200194be

0800fa68 <__sinit_lock_release>:
 800fa68:	4801      	ldr	r0, [pc, #4]	; (800fa70 <__sinit_lock_release+0x8>)
 800fa6a:	f000 b8a2 	b.w	800fbb2 <__retarget_lock_release_recursive>
 800fa6e:	bf00      	nop
 800fa70:	200194be 	.word	0x200194be

0800fa74 <__sinit>:
 800fa74:	b510      	push	{r4, lr}
 800fa76:	4604      	mov	r4, r0
 800fa78:	f7ff fff0 	bl	800fa5c <__sinit_lock_acquire>
 800fa7c:	69a3      	ldr	r3, [r4, #24]
 800fa7e:	b11b      	cbz	r3, 800fa88 <__sinit+0x14>
 800fa80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa84:	f7ff bff0 	b.w	800fa68 <__sinit_lock_release>
 800fa88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa8c:	6523      	str	r3, [r4, #80]	; 0x50
 800fa8e:	4b13      	ldr	r3, [pc, #76]	; (800fadc <__sinit+0x68>)
 800fa90:	4a13      	ldr	r2, [pc, #76]	; (800fae0 <__sinit+0x6c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa96:	42a3      	cmp	r3, r4
 800fa98:	bf04      	itt	eq
 800fa9a:	2301      	moveq	r3, #1
 800fa9c:	61a3      	streq	r3, [r4, #24]
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 f820 	bl	800fae4 <__sfp>
 800faa4:	6060      	str	r0, [r4, #4]
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 f81c 	bl	800fae4 <__sfp>
 800faac:	60a0      	str	r0, [r4, #8]
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 f818 	bl	800fae4 <__sfp>
 800fab4:	2200      	movs	r2, #0
 800fab6:	60e0      	str	r0, [r4, #12]
 800fab8:	2104      	movs	r1, #4
 800faba:	6860      	ldr	r0, [r4, #4]
 800fabc:	f7ff ff82 	bl	800f9c4 <std>
 800fac0:	68a0      	ldr	r0, [r4, #8]
 800fac2:	2201      	movs	r2, #1
 800fac4:	2109      	movs	r1, #9
 800fac6:	f7ff ff7d 	bl	800f9c4 <std>
 800faca:	68e0      	ldr	r0, [r4, #12]
 800facc:	2202      	movs	r2, #2
 800face:	2112      	movs	r1, #18
 800fad0:	f7ff ff78 	bl	800f9c4 <std>
 800fad4:	2301      	movs	r3, #1
 800fad6:	61a3      	str	r3, [r4, #24]
 800fad8:	e7d2      	b.n	800fa80 <__sinit+0xc>
 800fada:	bf00      	nop
 800fadc:	08010978 	.word	0x08010978
 800fae0:	0800fa0d 	.word	0x0800fa0d

0800fae4 <__sfp>:
 800fae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fae6:	4607      	mov	r7, r0
 800fae8:	f7ff ffac 	bl	800fa44 <__sfp_lock_acquire>
 800faec:	4b1e      	ldr	r3, [pc, #120]	; (800fb68 <__sfp+0x84>)
 800faee:	681e      	ldr	r6, [r3, #0]
 800faf0:	69b3      	ldr	r3, [r6, #24]
 800faf2:	b913      	cbnz	r3, 800fafa <__sfp+0x16>
 800faf4:	4630      	mov	r0, r6
 800faf6:	f7ff ffbd 	bl	800fa74 <__sinit>
 800fafa:	3648      	adds	r6, #72	; 0x48
 800fafc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	d503      	bpl.n	800fb0c <__sfp+0x28>
 800fb04:	6833      	ldr	r3, [r6, #0]
 800fb06:	b30b      	cbz	r3, 800fb4c <__sfp+0x68>
 800fb08:	6836      	ldr	r6, [r6, #0]
 800fb0a:	e7f7      	b.n	800fafc <__sfp+0x18>
 800fb0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb10:	b9d5      	cbnz	r5, 800fb48 <__sfp+0x64>
 800fb12:	4b16      	ldr	r3, [pc, #88]	; (800fb6c <__sfp+0x88>)
 800fb14:	60e3      	str	r3, [r4, #12]
 800fb16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb1a:	6665      	str	r5, [r4, #100]	; 0x64
 800fb1c:	f000 f847 	bl	800fbae <__retarget_lock_init_recursive>
 800fb20:	f7ff ff96 	bl	800fa50 <__sfp_lock_release>
 800fb24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb2c:	6025      	str	r5, [r4, #0]
 800fb2e:	61a5      	str	r5, [r4, #24]
 800fb30:	2208      	movs	r2, #8
 800fb32:	4629      	mov	r1, r5
 800fb34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb38:	f7ff ff24 	bl	800f984 <memset>
 800fb3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb44:	4620      	mov	r0, r4
 800fb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb48:	3468      	adds	r4, #104	; 0x68
 800fb4a:	e7d9      	b.n	800fb00 <__sfp+0x1c>
 800fb4c:	2104      	movs	r1, #4
 800fb4e:	4638      	mov	r0, r7
 800fb50:	f7ff ff62 	bl	800fa18 <__sfmoreglue>
 800fb54:	4604      	mov	r4, r0
 800fb56:	6030      	str	r0, [r6, #0]
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	d1d5      	bne.n	800fb08 <__sfp+0x24>
 800fb5c:	f7ff ff78 	bl	800fa50 <__sfp_lock_release>
 800fb60:	230c      	movs	r3, #12
 800fb62:	603b      	str	r3, [r7, #0]
 800fb64:	e7ee      	b.n	800fb44 <__sfp+0x60>
 800fb66:	bf00      	nop
 800fb68:	08010978 	.word	0x08010978
 800fb6c:	ffff0001 	.word	0xffff0001

0800fb70 <_fwalk_reent>:
 800fb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb74:	4606      	mov	r6, r0
 800fb76:	4688      	mov	r8, r1
 800fb78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb7c:	2700      	movs	r7, #0
 800fb7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb82:	f1b9 0901 	subs.w	r9, r9, #1
 800fb86:	d505      	bpl.n	800fb94 <_fwalk_reent+0x24>
 800fb88:	6824      	ldr	r4, [r4, #0]
 800fb8a:	2c00      	cmp	r4, #0
 800fb8c:	d1f7      	bne.n	800fb7e <_fwalk_reent+0xe>
 800fb8e:	4638      	mov	r0, r7
 800fb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb94:	89ab      	ldrh	r3, [r5, #12]
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d907      	bls.n	800fbaa <_fwalk_reent+0x3a>
 800fb9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	d003      	beq.n	800fbaa <_fwalk_reent+0x3a>
 800fba2:	4629      	mov	r1, r5
 800fba4:	4630      	mov	r0, r6
 800fba6:	47c0      	blx	r8
 800fba8:	4307      	orrs	r7, r0
 800fbaa:	3568      	adds	r5, #104	; 0x68
 800fbac:	e7e9      	b.n	800fb82 <_fwalk_reent+0x12>

0800fbae <__retarget_lock_init_recursive>:
 800fbae:	4770      	bx	lr

0800fbb0 <__retarget_lock_acquire_recursive>:
 800fbb0:	4770      	bx	lr

0800fbb2 <__retarget_lock_release_recursive>:
 800fbb2:	4770      	bx	lr

0800fbb4 <sbrk_aligned>:
 800fbb4:	b570      	push	{r4, r5, r6, lr}
 800fbb6:	4e0e      	ldr	r6, [pc, #56]	; (800fbf0 <sbrk_aligned+0x3c>)
 800fbb8:	460c      	mov	r4, r1
 800fbba:	6831      	ldr	r1, [r6, #0]
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	b911      	cbnz	r1, 800fbc6 <sbrk_aligned+0x12>
 800fbc0:	f000 fb7a 	bl	80102b8 <_sbrk_r>
 800fbc4:	6030      	str	r0, [r6, #0]
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	4628      	mov	r0, r5
 800fbca:	f000 fb75 	bl	80102b8 <_sbrk_r>
 800fbce:	1c43      	adds	r3, r0, #1
 800fbd0:	d00a      	beq.n	800fbe8 <sbrk_aligned+0x34>
 800fbd2:	1cc4      	adds	r4, r0, #3
 800fbd4:	f024 0403 	bic.w	r4, r4, #3
 800fbd8:	42a0      	cmp	r0, r4
 800fbda:	d007      	beq.n	800fbec <sbrk_aligned+0x38>
 800fbdc:	1a21      	subs	r1, r4, r0
 800fbde:	4628      	mov	r0, r5
 800fbe0:	f000 fb6a 	bl	80102b8 <_sbrk_r>
 800fbe4:	3001      	adds	r0, #1
 800fbe6:	d101      	bne.n	800fbec <sbrk_aligned+0x38>
 800fbe8:	f04f 34ff 	mov.w	r4, #4294967295
 800fbec:	4620      	mov	r0, r4
 800fbee:	bd70      	pop	{r4, r5, r6, pc}
 800fbf0:	200194c4 	.word	0x200194c4

0800fbf4 <_malloc_r>:
 800fbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf8:	1ccd      	adds	r5, r1, #3
 800fbfa:	f025 0503 	bic.w	r5, r5, #3
 800fbfe:	3508      	adds	r5, #8
 800fc00:	2d0c      	cmp	r5, #12
 800fc02:	bf38      	it	cc
 800fc04:	250c      	movcc	r5, #12
 800fc06:	2d00      	cmp	r5, #0
 800fc08:	4607      	mov	r7, r0
 800fc0a:	db01      	blt.n	800fc10 <_malloc_r+0x1c>
 800fc0c:	42a9      	cmp	r1, r5
 800fc0e:	d905      	bls.n	800fc1c <_malloc_r+0x28>
 800fc10:	230c      	movs	r3, #12
 800fc12:	603b      	str	r3, [r7, #0]
 800fc14:	2600      	movs	r6, #0
 800fc16:	4630      	mov	r0, r6
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1c:	4e2e      	ldr	r6, [pc, #184]	; (800fcd8 <_malloc_r+0xe4>)
 800fc1e:	f000 fdbb 	bl	8010798 <__malloc_lock>
 800fc22:	6833      	ldr	r3, [r6, #0]
 800fc24:	461c      	mov	r4, r3
 800fc26:	bb34      	cbnz	r4, 800fc76 <_malloc_r+0x82>
 800fc28:	4629      	mov	r1, r5
 800fc2a:	4638      	mov	r0, r7
 800fc2c:	f7ff ffc2 	bl	800fbb4 <sbrk_aligned>
 800fc30:	1c43      	adds	r3, r0, #1
 800fc32:	4604      	mov	r4, r0
 800fc34:	d14d      	bne.n	800fcd2 <_malloc_r+0xde>
 800fc36:	6834      	ldr	r4, [r6, #0]
 800fc38:	4626      	mov	r6, r4
 800fc3a:	2e00      	cmp	r6, #0
 800fc3c:	d140      	bne.n	800fcc0 <_malloc_r+0xcc>
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	4631      	mov	r1, r6
 800fc42:	4638      	mov	r0, r7
 800fc44:	eb04 0803 	add.w	r8, r4, r3
 800fc48:	f000 fb36 	bl	80102b8 <_sbrk_r>
 800fc4c:	4580      	cmp	r8, r0
 800fc4e:	d13a      	bne.n	800fcc6 <_malloc_r+0xd2>
 800fc50:	6821      	ldr	r1, [r4, #0]
 800fc52:	3503      	adds	r5, #3
 800fc54:	1a6d      	subs	r5, r5, r1
 800fc56:	f025 0503 	bic.w	r5, r5, #3
 800fc5a:	3508      	adds	r5, #8
 800fc5c:	2d0c      	cmp	r5, #12
 800fc5e:	bf38      	it	cc
 800fc60:	250c      	movcc	r5, #12
 800fc62:	4629      	mov	r1, r5
 800fc64:	4638      	mov	r0, r7
 800fc66:	f7ff ffa5 	bl	800fbb4 <sbrk_aligned>
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	d02b      	beq.n	800fcc6 <_malloc_r+0xd2>
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	442b      	add	r3, r5
 800fc72:	6023      	str	r3, [r4, #0]
 800fc74:	e00e      	b.n	800fc94 <_malloc_r+0xa0>
 800fc76:	6822      	ldr	r2, [r4, #0]
 800fc78:	1b52      	subs	r2, r2, r5
 800fc7a:	d41e      	bmi.n	800fcba <_malloc_r+0xc6>
 800fc7c:	2a0b      	cmp	r2, #11
 800fc7e:	d916      	bls.n	800fcae <_malloc_r+0xba>
 800fc80:	1961      	adds	r1, r4, r5
 800fc82:	42a3      	cmp	r3, r4
 800fc84:	6025      	str	r5, [r4, #0]
 800fc86:	bf18      	it	ne
 800fc88:	6059      	strne	r1, [r3, #4]
 800fc8a:	6863      	ldr	r3, [r4, #4]
 800fc8c:	bf08      	it	eq
 800fc8e:	6031      	streq	r1, [r6, #0]
 800fc90:	5162      	str	r2, [r4, r5]
 800fc92:	604b      	str	r3, [r1, #4]
 800fc94:	4638      	mov	r0, r7
 800fc96:	f104 060b 	add.w	r6, r4, #11
 800fc9a:	f000 fd83 	bl	80107a4 <__malloc_unlock>
 800fc9e:	f026 0607 	bic.w	r6, r6, #7
 800fca2:	1d23      	adds	r3, r4, #4
 800fca4:	1af2      	subs	r2, r6, r3
 800fca6:	d0b6      	beq.n	800fc16 <_malloc_r+0x22>
 800fca8:	1b9b      	subs	r3, r3, r6
 800fcaa:	50a3      	str	r3, [r4, r2]
 800fcac:	e7b3      	b.n	800fc16 <_malloc_r+0x22>
 800fcae:	6862      	ldr	r2, [r4, #4]
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	bf0c      	ite	eq
 800fcb4:	6032      	streq	r2, [r6, #0]
 800fcb6:	605a      	strne	r2, [r3, #4]
 800fcb8:	e7ec      	b.n	800fc94 <_malloc_r+0xa0>
 800fcba:	4623      	mov	r3, r4
 800fcbc:	6864      	ldr	r4, [r4, #4]
 800fcbe:	e7b2      	b.n	800fc26 <_malloc_r+0x32>
 800fcc0:	4634      	mov	r4, r6
 800fcc2:	6876      	ldr	r6, [r6, #4]
 800fcc4:	e7b9      	b.n	800fc3a <_malloc_r+0x46>
 800fcc6:	230c      	movs	r3, #12
 800fcc8:	603b      	str	r3, [r7, #0]
 800fcca:	4638      	mov	r0, r7
 800fccc:	f000 fd6a 	bl	80107a4 <__malloc_unlock>
 800fcd0:	e7a1      	b.n	800fc16 <_malloc_r+0x22>
 800fcd2:	6025      	str	r5, [r4, #0]
 800fcd4:	e7de      	b.n	800fc94 <_malloc_r+0xa0>
 800fcd6:	bf00      	nop
 800fcd8:	200194c0 	.word	0x200194c0

0800fcdc <__sfputc_r>:
 800fcdc:	6893      	ldr	r3, [r2, #8]
 800fcde:	3b01      	subs	r3, #1
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	b410      	push	{r4}
 800fce4:	6093      	str	r3, [r2, #8]
 800fce6:	da08      	bge.n	800fcfa <__sfputc_r+0x1e>
 800fce8:	6994      	ldr	r4, [r2, #24]
 800fcea:	42a3      	cmp	r3, r4
 800fcec:	db01      	blt.n	800fcf2 <__sfputc_r+0x16>
 800fcee:	290a      	cmp	r1, #10
 800fcf0:	d103      	bne.n	800fcfa <__sfputc_r+0x1e>
 800fcf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcf6:	f000 bb33 	b.w	8010360 <__swbuf_r>
 800fcfa:	6813      	ldr	r3, [r2, #0]
 800fcfc:	1c58      	adds	r0, r3, #1
 800fcfe:	6010      	str	r0, [r2, #0]
 800fd00:	7019      	strb	r1, [r3, #0]
 800fd02:	4608      	mov	r0, r1
 800fd04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd08:	4770      	bx	lr

0800fd0a <__sfputs_r>:
 800fd0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	460f      	mov	r7, r1
 800fd10:	4614      	mov	r4, r2
 800fd12:	18d5      	adds	r5, r2, r3
 800fd14:	42ac      	cmp	r4, r5
 800fd16:	d101      	bne.n	800fd1c <__sfputs_r+0x12>
 800fd18:	2000      	movs	r0, #0
 800fd1a:	e007      	b.n	800fd2c <__sfputs_r+0x22>
 800fd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd20:	463a      	mov	r2, r7
 800fd22:	4630      	mov	r0, r6
 800fd24:	f7ff ffda 	bl	800fcdc <__sfputc_r>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	d1f3      	bne.n	800fd14 <__sfputs_r+0xa>
 800fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd30 <_vfiprintf_r>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	460d      	mov	r5, r1
 800fd36:	b09d      	sub	sp, #116	; 0x74
 800fd38:	4614      	mov	r4, r2
 800fd3a:	4698      	mov	r8, r3
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	b118      	cbz	r0, 800fd48 <_vfiprintf_r+0x18>
 800fd40:	6983      	ldr	r3, [r0, #24]
 800fd42:	b90b      	cbnz	r3, 800fd48 <_vfiprintf_r+0x18>
 800fd44:	f7ff fe96 	bl	800fa74 <__sinit>
 800fd48:	4b89      	ldr	r3, [pc, #548]	; (800ff70 <_vfiprintf_r+0x240>)
 800fd4a:	429d      	cmp	r5, r3
 800fd4c:	d11b      	bne.n	800fd86 <_vfiprintf_r+0x56>
 800fd4e:	6875      	ldr	r5, [r6, #4]
 800fd50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd52:	07d9      	lsls	r1, r3, #31
 800fd54:	d405      	bmi.n	800fd62 <_vfiprintf_r+0x32>
 800fd56:	89ab      	ldrh	r3, [r5, #12]
 800fd58:	059a      	lsls	r2, r3, #22
 800fd5a:	d402      	bmi.n	800fd62 <_vfiprintf_r+0x32>
 800fd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd5e:	f7ff ff27 	bl	800fbb0 <__retarget_lock_acquire_recursive>
 800fd62:	89ab      	ldrh	r3, [r5, #12]
 800fd64:	071b      	lsls	r3, r3, #28
 800fd66:	d501      	bpl.n	800fd6c <_vfiprintf_r+0x3c>
 800fd68:	692b      	ldr	r3, [r5, #16]
 800fd6a:	b9eb      	cbnz	r3, 800fda8 <_vfiprintf_r+0x78>
 800fd6c:	4629      	mov	r1, r5
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f000 fb5a 	bl	8010428 <__swsetup_r>
 800fd74:	b1c0      	cbz	r0, 800fda8 <_vfiprintf_r+0x78>
 800fd76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd78:	07dc      	lsls	r4, r3, #31
 800fd7a:	d50e      	bpl.n	800fd9a <_vfiprintf_r+0x6a>
 800fd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd80:	b01d      	add	sp, #116	; 0x74
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd86:	4b7b      	ldr	r3, [pc, #492]	; (800ff74 <_vfiprintf_r+0x244>)
 800fd88:	429d      	cmp	r5, r3
 800fd8a:	d101      	bne.n	800fd90 <_vfiprintf_r+0x60>
 800fd8c:	68b5      	ldr	r5, [r6, #8]
 800fd8e:	e7df      	b.n	800fd50 <_vfiprintf_r+0x20>
 800fd90:	4b79      	ldr	r3, [pc, #484]	; (800ff78 <_vfiprintf_r+0x248>)
 800fd92:	429d      	cmp	r5, r3
 800fd94:	bf08      	it	eq
 800fd96:	68f5      	ldreq	r5, [r6, #12]
 800fd98:	e7da      	b.n	800fd50 <_vfiprintf_r+0x20>
 800fd9a:	89ab      	ldrh	r3, [r5, #12]
 800fd9c:	0598      	lsls	r0, r3, #22
 800fd9e:	d4ed      	bmi.n	800fd7c <_vfiprintf_r+0x4c>
 800fda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fda2:	f7ff ff06 	bl	800fbb2 <__retarget_lock_release_recursive>
 800fda6:	e7e9      	b.n	800fd7c <_vfiprintf_r+0x4c>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800fdac:	2320      	movs	r3, #32
 800fdae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdb6:	2330      	movs	r3, #48	; 0x30
 800fdb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ff7c <_vfiprintf_r+0x24c>
 800fdbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdc0:	f04f 0901 	mov.w	r9, #1
 800fdc4:	4623      	mov	r3, r4
 800fdc6:	469a      	mov	sl, r3
 800fdc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdcc:	b10a      	cbz	r2, 800fdd2 <_vfiprintf_r+0xa2>
 800fdce:	2a25      	cmp	r2, #37	; 0x25
 800fdd0:	d1f9      	bne.n	800fdc6 <_vfiprintf_r+0x96>
 800fdd2:	ebba 0b04 	subs.w	fp, sl, r4
 800fdd6:	d00b      	beq.n	800fdf0 <_vfiprintf_r+0xc0>
 800fdd8:	465b      	mov	r3, fp
 800fdda:	4622      	mov	r2, r4
 800fddc:	4629      	mov	r1, r5
 800fdde:	4630      	mov	r0, r6
 800fde0:	f7ff ff93 	bl	800fd0a <__sfputs_r>
 800fde4:	3001      	adds	r0, #1
 800fde6:	f000 80aa 	beq.w	800ff3e <_vfiprintf_r+0x20e>
 800fdea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdec:	445a      	add	r2, fp
 800fdee:	9209      	str	r2, [sp, #36]	; 0x24
 800fdf0:	f89a 3000 	ldrb.w	r3, [sl]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f000 80a2 	beq.w	800ff3e <_vfiprintf_r+0x20e>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800fe00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe04:	f10a 0a01 	add.w	sl, sl, #1
 800fe08:	9304      	str	r3, [sp, #16]
 800fe0a:	9307      	str	r3, [sp, #28]
 800fe0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe10:	931a      	str	r3, [sp, #104]	; 0x68
 800fe12:	4654      	mov	r4, sl
 800fe14:	2205      	movs	r2, #5
 800fe16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe1a:	4858      	ldr	r0, [pc, #352]	; (800ff7c <_vfiprintf_r+0x24c>)
 800fe1c:	f7f8 f9f8 	bl	8008210 <memchr>
 800fe20:	9a04      	ldr	r2, [sp, #16]
 800fe22:	b9d8      	cbnz	r0, 800fe5c <_vfiprintf_r+0x12c>
 800fe24:	06d1      	lsls	r1, r2, #27
 800fe26:	bf44      	itt	mi
 800fe28:	2320      	movmi	r3, #32
 800fe2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe2e:	0713      	lsls	r3, r2, #28
 800fe30:	bf44      	itt	mi
 800fe32:	232b      	movmi	r3, #43	; 0x2b
 800fe34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe38:	f89a 3000 	ldrb.w	r3, [sl]
 800fe3c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe3e:	d015      	beq.n	800fe6c <_vfiprintf_r+0x13c>
 800fe40:	9a07      	ldr	r2, [sp, #28]
 800fe42:	4654      	mov	r4, sl
 800fe44:	2000      	movs	r0, #0
 800fe46:	f04f 0c0a 	mov.w	ip, #10
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe50:	3b30      	subs	r3, #48	; 0x30
 800fe52:	2b09      	cmp	r3, #9
 800fe54:	d94e      	bls.n	800fef4 <_vfiprintf_r+0x1c4>
 800fe56:	b1b0      	cbz	r0, 800fe86 <_vfiprintf_r+0x156>
 800fe58:	9207      	str	r2, [sp, #28]
 800fe5a:	e014      	b.n	800fe86 <_vfiprintf_r+0x156>
 800fe5c:	eba0 0308 	sub.w	r3, r0, r8
 800fe60:	fa09 f303 	lsl.w	r3, r9, r3
 800fe64:	4313      	orrs	r3, r2
 800fe66:	9304      	str	r3, [sp, #16]
 800fe68:	46a2      	mov	sl, r4
 800fe6a:	e7d2      	b.n	800fe12 <_vfiprintf_r+0xe2>
 800fe6c:	9b03      	ldr	r3, [sp, #12]
 800fe6e:	1d19      	adds	r1, r3, #4
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	9103      	str	r1, [sp, #12]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	bfbb      	ittet	lt
 800fe78:	425b      	neglt	r3, r3
 800fe7a:	f042 0202 	orrlt.w	r2, r2, #2
 800fe7e:	9307      	strge	r3, [sp, #28]
 800fe80:	9307      	strlt	r3, [sp, #28]
 800fe82:	bfb8      	it	lt
 800fe84:	9204      	strlt	r2, [sp, #16]
 800fe86:	7823      	ldrb	r3, [r4, #0]
 800fe88:	2b2e      	cmp	r3, #46	; 0x2e
 800fe8a:	d10c      	bne.n	800fea6 <_vfiprintf_r+0x176>
 800fe8c:	7863      	ldrb	r3, [r4, #1]
 800fe8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fe90:	d135      	bne.n	800fefe <_vfiprintf_r+0x1ce>
 800fe92:	9b03      	ldr	r3, [sp, #12]
 800fe94:	1d1a      	adds	r2, r3, #4
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	9203      	str	r2, [sp, #12]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	bfb8      	it	lt
 800fe9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fea2:	3402      	adds	r4, #2
 800fea4:	9305      	str	r3, [sp, #20]
 800fea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ff8c <_vfiprintf_r+0x25c>
 800feaa:	7821      	ldrb	r1, [r4, #0]
 800feac:	2203      	movs	r2, #3
 800feae:	4650      	mov	r0, sl
 800feb0:	f7f8 f9ae 	bl	8008210 <memchr>
 800feb4:	b140      	cbz	r0, 800fec8 <_vfiprintf_r+0x198>
 800feb6:	2340      	movs	r3, #64	; 0x40
 800feb8:	eba0 000a 	sub.w	r0, r0, sl
 800febc:	fa03 f000 	lsl.w	r0, r3, r0
 800fec0:	9b04      	ldr	r3, [sp, #16]
 800fec2:	4303      	orrs	r3, r0
 800fec4:	3401      	adds	r4, #1
 800fec6:	9304      	str	r3, [sp, #16]
 800fec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fecc:	482c      	ldr	r0, [pc, #176]	; (800ff80 <_vfiprintf_r+0x250>)
 800fece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fed2:	2206      	movs	r2, #6
 800fed4:	f7f8 f99c 	bl	8008210 <memchr>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d03f      	beq.n	800ff5c <_vfiprintf_r+0x22c>
 800fedc:	4b29      	ldr	r3, [pc, #164]	; (800ff84 <_vfiprintf_r+0x254>)
 800fede:	bb1b      	cbnz	r3, 800ff28 <_vfiprintf_r+0x1f8>
 800fee0:	9b03      	ldr	r3, [sp, #12]
 800fee2:	3307      	adds	r3, #7
 800fee4:	f023 0307 	bic.w	r3, r3, #7
 800fee8:	3308      	adds	r3, #8
 800feea:	9303      	str	r3, [sp, #12]
 800feec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feee:	443b      	add	r3, r7
 800fef0:	9309      	str	r3, [sp, #36]	; 0x24
 800fef2:	e767      	b.n	800fdc4 <_vfiprintf_r+0x94>
 800fef4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fef8:	460c      	mov	r4, r1
 800fefa:	2001      	movs	r0, #1
 800fefc:	e7a5      	b.n	800fe4a <_vfiprintf_r+0x11a>
 800fefe:	2300      	movs	r3, #0
 800ff00:	3401      	adds	r4, #1
 800ff02:	9305      	str	r3, [sp, #20]
 800ff04:	4619      	mov	r1, r3
 800ff06:	f04f 0c0a 	mov.w	ip, #10
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff10:	3a30      	subs	r2, #48	; 0x30
 800ff12:	2a09      	cmp	r2, #9
 800ff14:	d903      	bls.n	800ff1e <_vfiprintf_r+0x1ee>
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d0c5      	beq.n	800fea6 <_vfiprintf_r+0x176>
 800ff1a:	9105      	str	r1, [sp, #20]
 800ff1c:	e7c3      	b.n	800fea6 <_vfiprintf_r+0x176>
 800ff1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff22:	4604      	mov	r4, r0
 800ff24:	2301      	movs	r3, #1
 800ff26:	e7f0      	b.n	800ff0a <_vfiprintf_r+0x1da>
 800ff28:	ab03      	add	r3, sp, #12
 800ff2a:	9300      	str	r3, [sp, #0]
 800ff2c:	462a      	mov	r2, r5
 800ff2e:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <_vfiprintf_r+0x258>)
 800ff30:	a904      	add	r1, sp, #16
 800ff32:	4630      	mov	r0, r6
 800ff34:	f3af 8000 	nop.w
 800ff38:	4607      	mov	r7, r0
 800ff3a:	1c78      	adds	r0, r7, #1
 800ff3c:	d1d6      	bne.n	800feec <_vfiprintf_r+0x1bc>
 800ff3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff40:	07d9      	lsls	r1, r3, #31
 800ff42:	d405      	bmi.n	800ff50 <_vfiprintf_r+0x220>
 800ff44:	89ab      	ldrh	r3, [r5, #12]
 800ff46:	059a      	lsls	r2, r3, #22
 800ff48:	d402      	bmi.n	800ff50 <_vfiprintf_r+0x220>
 800ff4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff4c:	f7ff fe31 	bl	800fbb2 <__retarget_lock_release_recursive>
 800ff50:	89ab      	ldrh	r3, [r5, #12]
 800ff52:	065b      	lsls	r3, r3, #25
 800ff54:	f53f af12 	bmi.w	800fd7c <_vfiprintf_r+0x4c>
 800ff58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff5a:	e711      	b.n	800fd80 <_vfiprintf_r+0x50>
 800ff5c:	ab03      	add	r3, sp, #12
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	462a      	mov	r2, r5
 800ff62:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <_vfiprintf_r+0x258>)
 800ff64:	a904      	add	r1, sp, #16
 800ff66:	4630      	mov	r0, r6
 800ff68:	f000 f880 	bl	801006c <_printf_i>
 800ff6c:	e7e4      	b.n	800ff38 <_vfiprintf_r+0x208>
 800ff6e:	bf00      	nop
 800ff70:	0801099c 	.word	0x0801099c
 800ff74:	080109bc 	.word	0x080109bc
 800ff78:	0801097c 	.word	0x0801097c
 800ff7c:	080109dc 	.word	0x080109dc
 800ff80:	080109e6 	.word	0x080109e6
 800ff84:	00000000 	.word	0x00000000
 800ff88:	0800fd0b 	.word	0x0800fd0b
 800ff8c:	080109e2 	.word	0x080109e2

0800ff90 <_printf_common>:
 800ff90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff94:	4616      	mov	r6, r2
 800ff96:	4699      	mov	r9, r3
 800ff98:	688a      	ldr	r2, [r1, #8]
 800ff9a:	690b      	ldr	r3, [r1, #16]
 800ff9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	bfb8      	it	lt
 800ffa4:	4613      	movlt	r3, r2
 800ffa6:	6033      	str	r3, [r6, #0]
 800ffa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ffac:	4607      	mov	r7, r0
 800ffae:	460c      	mov	r4, r1
 800ffb0:	b10a      	cbz	r2, 800ffb6 <_printf_common+0x26>
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	6033      	str	r3, [r6, #0]
 800ffb6:	6823      	ldr	r3, [r4, #0]
 800ffb8:	0699      	lsls	r1, r3, #26
 800ffba:	bf42      	ittt	mi
 800ffbc:	6833      	ldrmi	r3, [r6, #0]
 800ffbe:	3302      	addmi	r3, #2
 800ffc0:	6033      	strmi	r3, [r6, #0]
 800ffc2:	6825      	ldr	r5, [r4, #0]
 800ffc4:	f015 0506 	ands.w	r5, r5, #6
 800ffc8:	d106      	bne.n	800ffd8 <_printf_common+0x48>
 800ffca:	f104 0a19 	add.w	sl, r4, #25
 800ffce:	68e3      	ldr	r3, [r4, #12]
 800ffd0:	6832      	ldr	r2, [r6, #0]
 800ffd2:	1a9b      	subs	r3, r3, r2
 800ffd4:	42ab      	cmp	r3, r5
 800ffd6:	dc26      	bgt.n	8010026 <_printf_common+0x96>
 800ffd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ffdc:	1e13      	subs	r3, r2, #0
 800ffde:	6822      	ldr	r2, [r4, #0]
 800ffe0:	bf18      	it	ne
 800ffe2:	2301      	movne	r3, #1
 800ffe4:	0692      	lsls	r2, r2, #26
 800ffe6:	d42b      	bmi.n	8010040 <_printf_common+0xb0>
 800ffe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ffec:	4649      	mov	r1, r9
 800ffee:	4638      	mov	r0, r7
 800fff0:	47c0      	blx	r8
 800fff2:	3001      	adds	r0, #1
 800fff4:	d01e      	beq.n	8010034 <_printf_common+0xa4>
 800fff6:	6823      	ldr	r3, [r4, #0]
 800fff8:	68e5      	ldr	r5, [r4, #12]
 800fffa:	6832      	ldr	r2, [r6, #0]
 800fffc:	f003 0306 	and.w	r3, r3, #6
 8010000:	2b04      	cmp	r3, #4
 8010002:	bf08      	it	eq
 8010004:	1aad      	subeq	r5, r5, r2
 8010006:	68a3      	ldr	r3, [r4, #8]
 8010008:	6922      	ldr	r2, [r4, #16]
 801000a:	bf0c      	ite	eq
 801000c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010010:	2500      	movne	r5, #0
 8010012:	4293      	cmp	r3, r2
 8010014:	bfc4      	itt	gt
 8010016:	1a9b      	subgt	r3, r3, r2
 8010018:	18ed      	addgt	r5, r5, r3
 801001a:	2600      	movs	r6, #0
 801001c:	341a      	adds	r4, #26
 801001e:	42b5      	cmp	r5, r6
 8010020:	d11a      	bne.n	8010058 <_printf_common+0xc8>
 8010022:	2000      	movs	r0, #0
 8010024:	e008      	b.n	8010038 <_printf_common+0xa8>
 8010026:	2301      	movs	r3, #1
 8010028:	4652      	mov	r2, sl
 801002a:	4649      	mov	r1, r9
 801002c:	4638      	mov	r0, r7
 801002e:	47c0      	blx	r8
 8010030:	3001      	adds	r0, #1
 8010032:	d103      	bne.n	801003c <_printf_common+0xac>
 8010034:	f04f 30ff 	mov.w	r0, #4294967295
 8010038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801003c:	3501      	adds	r5, #1
 801003e:	e7c6      	b.n	800ffce <_printf_common+0x3e>
 8010040:	18e1      	adds	r1, r4, r3
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	2030      	movs	r0, #48	; 0x30
 8010046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801004a:	4422      	add	r2, r4
 801004c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010054:	3302      	adds	r3, #2
 8010056:	e7c7      	b.n	800ffe8 <_printf_common+0x58>
 8010058:	2301      	movs	r3, #1
 801005a:	4622      	mov	r2, r4
 801005c:	4649      	mov	r1, r9
 801005e:	4638      	mov	r0, r7
 8010060:	47c0      	blx	r8
 8010062:	3001      	adds	r0, #1
 8010064:	d0e6      	beq.n	8010034 <_printf_common+0xa4>
 8010066:	3601      	adds	r6, #1
 8010068:	e7d9      	b.n	801001e <_printf_common+0x8e>
	...

0801006c <_printf_i>:
 801006c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010070:	7e0f      	ldrb	r7, [r1, #24]
 8010072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010074:	2f78      	cmp	r7, #120	; 0x78
 8010076:	4691      	mov	r9, r2
 8010078:	4680      	mov	r8, r0
 801007a:	460c      	mov	r4, r1
 801007c:	469a      	mov	sl, r3
 801007e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010082:	d807      	bhi.n	8010094 <_printf_i+0x28>
 8010084:	2f62      	cmp	r7, #98	; 0x62
 8010086:	d80a      	bhi.n	801009e <_printf_i+0x32>
 8010088:	2f00      	cmp	r7, #0
 801008a:	f000 80d8 	beq.w	801023e <_printf_i+0x1d2>
 801008e:	2f58      	cmp	r7, #88	; 0x58
 8010090:	f000 80a3 	beq.w	80101da <_printf_i+0x16e>
 8010094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801009c:	e03a      	b.n	8010114 <_printf_i+0xa8>
 801009e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80100a2:	2b15      	cmp	r3, #21
 80100a4:	d8f6      	bhi.n	8010094 <_printf_i+0x28>
 80100a6:	a101      	add	r1, pc, #4	; (adr r1, 80100ac <_printf_i+0x40>)
 80100a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100ac:	08010105 	.word	0x08010105
 80100b0:	08010119 	.word	0x08010119
 80100b4:	08010095 	.word	0x08010095
 80100b8:	08010095 	.word	0x08010095
 80100bc:	08010095 	.word	0x08010095
 80100c0:	08010095 	.word	0x08010095
 80100c4:	08010119 	.word	0x08010119
 80100c8:	08010095 	.word	0x08010095
 80100cc:	08010095 	.word	0x08010095
 80100d0:	08010095 	.word	0x08010095
 80100d4:	08010095 	.word	0x08010095
 80100d8:	08010225 	.word	0x08010225
 80100dc:	08010149 	.word	0x08010149
 80100e0:	08010207 	.word	0x08010207
 80100e4:	08010095 	.word	0x08010095
 80100e8:	08010095 	.word	0x08010095
 80100ec:	08010247 	.word	0x08010247
 80100f0:	08010095 	.word	0x08010095
 80100f4:	08010149 	.word	0x08010149
 80100f8:	08010095 	.word	0x08010095
 80100fc:	08010095 	.word	0x08010095
 8010100:	0801020f 	.word	0x0801020f
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	1d1a      	adds	r2, r3, #4
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	602a      	str	r2, [r5, #0]
 801010c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010114:	2301      	movs	r3, #1
 8010116:	e0a3      	b.n	8010260 <_printf_i+0x1f4>
 8010118:	6820      	ldr	r0, [r4, #0]
 801011a:	6829      	ldr	r1, [r5, #0]
 801011c:	0606      	lsls	r6, r0, #24
 801011e:	f101 0304 	add.w	r3, r1, #4
 8010122:	d50a      	bpl.n	801013a <_printf_i+0xce>
 8010124:	680e      	ldr	r6, [r1, #0]
 8010126:	602b      	str	r3, [r5, #0]
 8010128:	2e00      	cmp	r6, #0
 801012a:	da03      	bge.n	8010134 <_printf_i+0xc8>
 801012c:	232d      	movs	r3, #45	; 0x2d
 801012e:	4276      	negs	r6, r6
 8010130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010134:	485e      	ldr	r0, [pc, #376]	; (80102b0 <_printf_i+0x244>)
 8010136:	230a      	movs	r3, #10
 8010138:	e019      	b.n	801016e <_printf_i+0x102>
 801013a:	680e      	ldr	r6, [r1, #0]
 801013c:	602b      	str	r3, [r5, #0]
 801013e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010142:	bf18      	it	ne
 8010144:	b236      	sxthne	r6, r6
 8010146:	e7ef      	b.n	8010128 <_printf_i+0xbc>
 8010148:	682b      	ldr	r3, [r5, #0]
 801014a:	6820      	ldr	r0, [r4, #0]
 801014c:	1d19      	adds	r1, r3, #4
 801014e:	6029      	str	r1, [r5, #0]
 8010150:	0601      	lsls	r1, r0, #24
 8010152:	d501      	bpl.n	8010158 <_printf_i+0xec>
 8010154:	681e      	ldr	r6, [r3, #0]
 8010156:	e002      	b.n	801015e <_printf_i+0xf2>
 8010158:	0646      	lsls	r6, r0, #25
 801015a:	d5fb      	bpl.n	8010154 <_printf_i+0xe8>
 801015c:	881e      	ldrh	r6, [r3, #0]
 801015e:	4854      	ldr	r0, [pc, #336]	; (80102b0 <_printf_i+0x244>)
 8010160:	2f6f      	cmp	r7, #111	; 0x6f
 8010162:	bf0c      	ite	eq
 8010164:	2308      	moveq	r3, #8
 8010166:	230a      	movne	r3, #10
 8010168:	2100      	movs	r1, #0
 801016a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801016e:	6865      	ldr	r5, [r4, #4]
 8010170:	60a5      	str	r5, [r4, #8]
 8010172:	2d00      	cmp	r5, #0
 8010174:	bfa2      	ittt	ge
 8010176:	6821      	ldrge	r1, [r4, #0]
 8010178:	f021 0104 	bicge.w	r1, r1, #4
 801017c:	6021      	strge	r1, [r4, #0]
 801017e:	b90e      	cbnz	r6, 8010184 <_printf_i+0x118>
 8010180:	2d00      	cmp	r5, #0
 8010182:	d04d      	beq.n	8010220 <_printf_i+0x1b4>
 8010184:	4615      	mov	r5, r2
 8010186:	fbb6 f1f3 	udiv	r1, r6, r3
 801018a:	fb03 6711 	mls	r7, r3, r1, r6
 801018e:	5dc7      	ldrb	r7, [r0, r7]
 8010190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010194:	4637      	mov	r7, r6
 8010196:	42bb      	cmp	r3, r7
 8010198:	460e      	mov	r6, r1
 801019a:	d9f4      	bls.n	8010186 <_printf_i+0x11a>
 801019c:	2b08      	cmp	r3, #8
 801019e:	d10b      	bne.n	80101b8 <_printf_i+0x14c>
 80101a0:	6823      	ldr	r3, [r4, #0]
 80101a2:	07de      	lsls	r6, r3, #31
 80101a4:	d508      	bpl.n	80101b8 <_printf_i+0x14c>
 80101a6:	6923      	ldr	r3, [r4, #16]
 80101a8:	6861      	ldr	r1, [r4, #4]
 80101aa:	4299      	cmp	r1, r3
 80101ac:	bfde      	ittt	le
 80101ae:	2330      	movle	r3, #48	; 0x30
 80101b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80101b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80101b8:	1b52      	subs	r2, r2, r5
 80101ba:	6122      	str	r2, [r4, #16]
 80101bc:	f8cd a000 	str.w	sl, [sp]
 80101c0:	464b      	mov	r3, r9
 80101c2:	aa03      	add	r2, sp, #12
 80101c4:	4621      	mov	r1, r4
 80101c6:	4640      	mov	r0, r8
 80101c8:	f7ff fee2 	bl	800ff90 <_printf_common>
 80101cc:	3001      	adds	r0, #1
 80101ce:	d14c      	bne.n	801026a <_printf_i+0x1fe>
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295
 80101d4:	b004      	add	sp, #16
 80101d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101da:	4835      	ldr	r0, [pc, #212]	; (80102b0 <_printf_i+0x244>)
 80101dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80101e0:	6829      	ldr	r1, [r5, #0]
 80101e2:	6823      	ldr	r3, [r4, #0]
 80101e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80101e8:	6029      	str	r1, [r5, #0]
 80101ea:	061d      	lsls	r5, r3, #24
 80101ec:	d514      	bpl.n	8010218 <_printf_i+0x1ac>
 80101ee:	07df      	lsls	r7, r3, #31
 80101f0:	bf44      	itt	mi
 80101f2:	f043 0320 	orrmi.w	r3, r3, #32
 80101f6:	6023      	strmi	r3, [r4, #0]
 80101f8:	b91e      	cbnz	r6, 8010202 <_printf_i+0x196>
 80101fa:	6823      	ldr	r3, [r4, #0]
 80101fc:	f023 0320 	bic.w	r3, r3, #32
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	2310      	movs	r3, #16
 8010204:	e7b0      	b.n	8010168 <_printf_i+0xfc>
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	f043 0320 	orr.w	r3, r3, #32
 801020c:	6023      	str	r3, [r4, #0]
 801020e:	2378      	movs	r3, #120	; 0x78
 8010210:	4828      	ldr	r0, [pc, #160]	; (80102b4 <_printf_i+0x248>)
 8010212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010216:	e7e3      	b.n	80101e0 <_printf_i+0x174>
 8010218:	0659      	lsls	r1, r3, #25
 801021a:	bf48      	it	mi
 801021c:	b2b6      	uxthmi	r6, r6
 801021e:	e7e6      	b.n	80101ee <_printf_i+0x182>
 8010220:	4615      	mov	r5, r2
 8010222:	e7bb      	b.n	801019c <_printf_i+0x130>
 8010224:	682b      	ldr	r3, [r5, #0]
 8010226:	6826      	ldr	r6, [r4, #0]
 8010228:	6961      	ldr	r1, [r4, #20]
 801022a:	1d18      	adds	r0, r3, #4
 801022c:	6028      	str	r0, [r5, #0]
 801022e:	0635      	lsls	r5, r6, #24
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	d501      	bpl.n	8010238 <_printf_i+0x1cc>
 8010234:	6019      	str	r1, [r3, #0]
 8010236:	e002      	b.n	801023e <_printf_i+0x1d2>
 8010238:	0670      	lsls	r0, r6, #25
 801023a:	d5fb      	bpl.n	8010234 <_printf_i+0x1c8>
 801023c:	8019      	strh	r1, [r3, #0]
 801023e:	2300      	movs	r3, #0
 8010240:	6123      	str	r3, [r4, #16]
 8010242:	4615      	mov	r5, r2
 8010244:	e7ba      	b.n	80101bc <_printf_i+0x150>
 8010246:	682b      	ldr	r3, [r5, #0]
 8010248:	1d1a      	adds	r2, r3, #4
 801024a:	602a      	str	r2, [r5, #0]
 801024c:	681d      	ldr	r5, [r3, #0]
 801024e:	6862      	ldr	r2, [r4, #4]
 8010250:	2100      	movs	r1, #0
 8010252:	4628      	mov	r0, r5
 8010254:	f7f7 ffdc 	bl	8008210 <memchr>
 8010258:	b108      	cbz	r0, 801025e <_printf_i+0x1f2>
 801025a:	1b40      	subs	r0, r0, r5
 801025c:	6060      	str	r0, [r4, #4]
 801025e:	6863      	ldr	r3, [r4, #4]
 8010260:	6123      	str	r3, [r4, #16]
 8010262:	2300      	movs	r3, #0
 8010264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010268:	e7a8      	b.n	80101bc <_printf_i+0x150>
 801026a:	6923      	ldr	r3, [r4, #16]
 801026c:	462a      	mov	r2, r5
 801026e:	4649      	mov	r1, r9
 8010270:	4640      	mov	r0, r8
 8010272:	47d0      	blx	sl
 8010274:	3001      	adds	r0, #1
 8010276:	d0ab      	beq.n	80101d0 <_printf_i+0x164>
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	079b      	lsls	r3, r3, #30
 801027c:	d413      	bmi.n	80102a6 <_printf_i+0x23a>
 801027e:	68e0      	ldr	r0, [r4, #12]
 8010280:	9b03      	ldr	r3, [sp, #12]
 8010282:	4298      	cmp	r0, r3
 8010284:	bfb8      	it	lt
 8010286:	4618      	movlt	r0, r3
 8010288:	e7a4      	b.n	80101d4 <_printf_i+0x168>
 801028a:	2301      	movs	r3, #1
 801028c:	4632      	mov	r2, r6
 801028e:	4649      	mov	r1, r9
 8010290:	4640      	mov	r0, r8
 8010292:	47d0      	blx	sl
 8010294:	3001      	adds	r0, #1
 8010296:	d09b      	beq.n	80101d0 <_printf_i+0x164>
 8010298:	3501      	adds	r5, #1
 801029a:	68e3      	ldr	r3, [r4, #12]
 801029c:	9903      	ldr	r1, [sp, #12]
 801029e:	1a5b      	subs	r3, r3, r1
 80102a0:	42ab      	cmp	r3, r5
 80102a2:	dcf2      	bgt.n	801028a <_printf_i+0x21e>
 80102a4:	e7eb      	b.n	801027e <_printf_i+0x212>
 80102a6:	2500      	movs	r5, #0
 80102a8:	f104 0619 	add.w	r6, r4, #25
 80102ac:	e7f5      	b.n	801029a <_printf_i+0x22e>
 80102ae:	bf00      	nop
 80102b0:	080109ed 	.word	0x080109ed
 80102b4:	080109fe 	.word	0x080109fe

080102b8 <_sbrk_r>:
 80102b8:	b538      	push	{r3, r4, r5, lr}
 80102ba:	4d06      	ldr	r5, [pc, #24]	; (80102d4 <_sbrk_r+0x1c>)
 80102bc:	2300      	movs	r3, #0
 80102be:	4604      	mov	r4, r0
 80102c0:	4608      	mov	r0, r1
 80102c2:	602b      	str	r3, [r5, #0]
 80102c4:	f7fb fd9e 	bl	800be04 <_sbrk>
 80102c8:	1c43      	adds	r3, r0, #1
 80102ca:	d102      	bne.n	80102d2 <_sbrk_r+0x1a>
 80102cc:	682b      	ldr	r3, [r5, #0]
 80102ce:	b103      	cbz	r3, 80102d2 <_sbrk_r+0x1a>
 80102d0:	6023      	str	r3, [r4, #0]
 80102d2:	bd38      	pop	{r3, r4, r5, pc}
 80102d4:	200194c8 	.word	0x200194c8

080102d8 <__sread>:
 80102d8:	b510      	push	{r4, lr}
 80102da:	460c      	mov	r4, r1
 80102dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e0:	f000 fab2 	bl	8010848 <_read_r>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	bfab      	itete	ge
 80102e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102ea:	89a3      	ldrhlt	r3, [r4, #12]
 80102ec:	181b      	addge	r3, r3, r0
 80102ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102f2:	bfac      	ite	ge
 80102f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80102f6:	81a3      	strhlt	r3, [r4, #12]
 80102f8:	bd10      	pop	{r4, pc}

080102fa <__swrite>:
 80102fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102fe:	461f      	mov	r7, r3
 8010300:	898b      	ldrh	r3, [r1, #12]
 8010302:	05db      	lsls	r3, r3, #23
 8010304:	4605      	mov	r5, r0
 8010306:	460c      	mov	r4, r1
 8010308:	4616      	mov	r6, r2
 801030a:	d505      	bpl.n	8010318 <__swrite+0x1e>
 801030c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010310:	2302      	movs	r3, #2
 8010312:	2200      	movs	r2, #0
 8010314:	f000 f9c8 	bl	80106a8 <_lseek_r>
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801031e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010322:	81a3      	strh	r3, [r4, #12]
 8010324:	4632      	mov	r2, r6
 8010326:	463b      	mov	r3, r7
 8010328:	4628      	mov	r0, r5
 801032a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801032e:	f000 b869 	b.w	8010404 <_write_r>

08010332 <__sseek>:
 8010332:	b510      	push	{r4, lr}
 8010334:	460c      	mov	r4, r1
 8010336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801033a:	f000 f9b5 	bl	80106a8 <_lseek_r>
 801033e:	1c43      	adds	r3, r0, #1
 8010340:	89a3      	ldrh	r3, [r4, #12]
 8010342:	bf15      	itete	ne
 8010344:	6560      	strne	r0, [r4, #84]	; 0x54
 8010346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801034a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801034e:	81a3      	strheq	r3, [r4, #12]
 8010350:	bf18      	it	ne
 8010352:	81a3      	strhne	r3, [r4, #12]
 8010354:	bd10      	pop	{r4, pc}

08010356 <__sclose>:
 8010356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801035a:	f000 b8d3 	b.w	8010504 <_close_r>
	...

08010360 <__swbuf_r>:
 8010360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010362:	460e      	mov	r6, r1
 8010364:	4614      	mov	r4, r2
 8010366:	4605      	mov	r5, r0
 8010368:	b118      	cbz	r0, 8010372 <__swbuf_r+0x12>
 801036a:	6983      	ldr	r3, [r0, #24]
 801036c:	b90b      	cbnz	r3, 8010372 <__swbuf_r+0x12>
 801036e:	f7ff fb81 	bl	800fa74 <__sinit>
 8010372:	4b21      	ldr	r3, [pc, #132]	; (80103f8 <__swbuf_r+0x98>)
 8010374:	429c      	cmp	r4, r3
 8010376:	d12b      	bne.n	80103d0 <__swbuf_r+0x70>
 8010378:	686c      	ldr	r4, [r5, #4]
 801037a:	69a3      	ldr	r3, [r4, #24]
 801037c:	60a3      	str	r3, [r4, #8]
 801037e:	89a3      	ldrh	r3, [r4, #12]
 8010380:	071a      	lsls	r2, r3, #28
 8010382:	d52f      	bpl.n	80103e4 <__swbuf_r+0x84>
 8010384:	6923      	ldr	r3, [r4, #16]
 8010386:	b36b      	cbz	r3, 80103e4 <__swbuf_r+0x84>
 8010388:	6923      	ldr	r3, [r4, #16]
 801038a:	6820      	ldr	r0, [r4, #0]
 801038c:	1ac0      	subs	r0, r0, r3
 801038e:	6963      	ldr	r3, [r4, #20]
 8010390:	b2f6      	uxtb	r6, r6
 8010392:	4283      	cmp	r3, r0
 8010394:	4637      	mov	r7, r6
 8010396:	dc04      	bgt.n	80103a2 <__swbuf_r+0x42>
 8010398:	4621      	mov	r1, r4
 801039a:	4628      	mov	r0, r5
 801039c:	f000 f948 	bl	8010630 <_fflush_r>
 80103a0:	bb30      	cbnz	r0, 80103f0 <__swbuf_r+0x90>
 80103a2:	68a3      	ldr	r3, [r4, #8]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	60a3      	str	r3, [r4, #8]
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	6022      	str	r2, [r4, #0]
 80103ae:	701e      	strb	r6, [r3, #0]
 80103b0:	6963      	ldr	r3, [r4, #20]
 80103b2:	3001      	adds	r0, #1
 80103b4:	4283      	cmp	r3, r0
 80103b6:	d004      	beq.n	80103c2 <__swbuf_r+0x62>
 80103b8:	89a3      	ldrh	r3, [r4, #12]
 80103ba:	07db      	lsls	r3, r3, #31
 80103bc:	d506      	bpl.n	80103cc <__swbuf_r+0x6c>
 80103be:	2e0a      	cmp	r6, #10
 80103c0:	d104      	bne.n	80103cc <__swbuf_r+0x6c>
 80103c2:	4621      	mov	r1, r4
 80103c4:	4628      	mov	r0, r5
 80103c6:	f000 f933 	bl	8010630 <_fflush_r>
 80103ca:	b988      	cbnz	r0, 80103f0 <__swbuf_r+0x90>
 80103cc:	4638      	mov	r0, r7
 80103ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103d0:	4b0a      	ldr	r3, [pc, #40]	; (80103fc <__swbuf_r+0x9c>)
 80103d2:	429c      	cmp	r4, r3
 80103d4:	d101      	bne.n	80103da <__swbuf_r+0x7a>
 80103d6:	68ac      	ldr	r4, [r5, #8]
 80103d8:	e7cf      	b.n	801037a <__swbuf_r+0x1a>
 80103da:	4b09      	ldr	r3, [pc, #36]	; (8010400 <__swbuf_r+0xa0>)
 80103dc:	429c      	cmp	r4, r3
 80103de:	bf08      	it	eq
 80103e0:	68ec      	ldreq	r4, [r5, #12]
 80103e2:	e7ca      	b.n	801037a <__swbuf_r+0x1a>
 80103e4:	4621      	mov	r1, r4
 80103e6:	4628      	mov	r0, r5
 80103e8:	f000 f81e 	bl	8010428 <__swsetup_r>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d0cb      	beq.n	8010388 <__swbuf_r+0x28>
 80103f0:	f04f 37ff 	mov.w	r7, #4294967295
 80103f4:	e7ea      	b.n	80103cc <__swbuf_r+0x6c>
 80103f6:	bf00      	nop
 80103f8:	0801099c 	.word	0x0801099c
 80103fc:	080109bc 	.word	0x080109bc
 8010400:	0801097c 	.word	0x0801097c

08010404 <_write_r>:
 8010404:	b538      	push	{r3, r4, r5, lr}
 8010406:	4d07      	ldr	r5, [pc, #28]	; (8010424 <_write_r+0x20>)
 8010408:	4604      	mov	r4, r0
 801040a:	4608      	mov	r0, r1
 801040c:	4611      	mov	r1, r2
 801040e:	2200      	movs	r2, #0
 8010410:	602a      	str	r2, [r5, #0]
 8010412:	461a      	mov	r2, r3
 8010414:	f7fb fca5 	bl	800bd62 <_write>
 8010418:	1c43      	adds	r3, r0, #1
 801041a:	d102      	bne.n	8010422 <_write_r+0x1e>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	b103      	cbz	r3, 8010422 <_write_r+0x1e>
 8010420:	6023      	str	r3, [r4, #0]
 8010422:	bd38      	pop	{r3, r4, r5, pc}
 8010424:	200194c8 	.word	0x200194c8

08010428 <__swsetup_r>:
 8010428:	4b32      	ldr	r3, [pc, #200]	; (80104f4 <__swsetup_r+0xcc>)
 801042a:	b570      	push	{r4, r5, r6, lr}
 801042c:	681d      	ldr	r5, [r3, #0]
 801042e:	4606      	mov	r6, r0
 8010430:	460c      	mov	r4, r1
 8010432:	b125      	cbz	r5, 801043e <__swsetup_r+0x16>
 8010434:	69ab      	ldr	r3, [r5, #24]
 8010436:	b913      	cbnz	r3, 801043e <__swsetup_r+0x16>
 8010438:	4628      	mov	r0, r5
 801043a:	f7ff fb1b 	bl	800fa74 <__sinit>
 801043e:	4b2e      	ldr	r3, [pc, #184]	; (80104f8 <__swsetup_r+0xd0>)
 8010440:	429c      	cmp	r4, r3
 8010442:	d10f      	bne.n	8010464 <__swsetup_r+0x3c>
 8010444:	686c      	ldr	r4, [r5, #4]
 8010446:	89a3      	ldrh	r3, [r4, #12]
 8010448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801044c:	0719      	lsls	r1, r3, #28
 801044e:	d42c      	bmi.n	80104aa <__swsetup_r+0x82>
 8010450:	06dd      	lsls	r5, r3, #27
 8010452:	d411      	bmi.n	8010478 <__swsetup_r+0x50>
 8010454:	2309      	movs	r3, #9
 8010456:	6033      	str	r3, [r6, #0]
 8010458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801045c:	81a3      	strh	r3, [r4, #12]
 801045e:	f04f 30ff 	mov.w	r0, #4294967295
 8010462:	e03e      	b.n	80104e2 <__swsetup_r+0xba>
 8010464:	4b25      	ldr	r3, [pc, #148]	; (80104fc <__swsetup_r+0xd4>)
 8010466:	429c      	cmp	r4, r3
 8010468:	d101      	bne.n	801046e <__swsetup_r+0x46>
 801046a:	68ac      	ldr	r4, [r5, #8]
 801046c:	e7eb      	b.n	8010446 <__swsetup_r+0x1e>
 801046e:	4b24      	ldr	r3, [pc, #144]	; (8010500 <__swsetup_r+0xd8>)
 8010470:	429c      	cmp	r4, r3
 8010472:	bf08      	it	eq
 8010474:	68ec      	ldreq	r4, [r5, #12]
 8010476:	e7e6      	b.n	8010446 <__swsetup_r+0x1e>
 8010478:	0758      	lsls	r0, r3, #29
 801047a:	d512      	bpl.n	80104a2 <__swsetup_r+0x7a>
 801047c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801047e:	b141      	cbz	r1, 8010492 <__swsetup_r+0x6a>
 8010480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010484:	4299      	cmp	r1, r3
 8010486:	d002      	beq.n	801048e <__swsetup_r+0x66>
 8010488:	4630      	mov	r0, r6
 801048a:	f000 f991 	bl	80107b0 <_free_r>
 801048e:	2300      	movs	r3, #0
 8010490:	6363      	str	r3, [r4, #52]	; 0x34
 8010492:	89a3      	ldrh	r3, [r4, #12]
 8010494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010498:	81a3      	strh	r3, [r4, #12]
 801049a:	2300      	movs	r3, #0
 801049c:	6063      	str	r3, [r4, #4]
 801049e:	6923      	ldr	r3, [r4, #16]
 80104a0:	6023      	str	r3, [r4, #0]
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	f043 0308 	orr.w	r3, r3, #8
 80104a8:	81a3      	strh	r3, [r4, #12]
 80104aa:	6923      	ldr	r3, [r4, #16]
 80104ac:	b94b      	cbnz	r3, 80104c2 <__swsetup_r+0x9a>
 80104ae:	89a3      	ldrh	r3, [r4, #12]
 80104b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80104b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104b8:	d003      	beq.n	80104c2 <__swsetup_r+0x9a>
 80104ba:	4621      	mov	r1, r4
 80104bc:	4630      	mov	r0, r6
 80104be:	f000 f92b 	bl	8010718 <__smakebuf_r>
 80104c2:	89a0      	ldrh	r0, [r4, #12]
 80104c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104c8:	f010 0301 	ands.w	r3, r0, #1
 80104cc:	d00a      	beq.n	80104e4 <__swsetup_r+0xbc>
 80104ce:	2300      	movs	r3, #0
 80104d0:	60a3      	str	r3, [r4, #8]
 80104d2:	6963      	ldr	r3, [r4, #20]
 80104d4:	425b      	negs	r3, r3
 80104d6:	61a3      	str	r3, [r4, #24]
 80104d8:	6923      	ldr	r3, [r4, #16]
 80104da:	b943      	cbnz	r3, 80104ee <__swsetup_r+0xc6>
 80104dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80104e0:	d1ba      	bne.n	8010458 <__swsetup_r+0x30>
 80104e2:	bd70      	pop	{r4, r5, r6, pc}
 80104e4:	0781      	lsls	r1, r0, #30
 80104e6:	bf58      	it	pl
 80104e8:	6963      	ldrpl	r3, [r4, #20]
 80104ea:	60a3      	str	r3, [r4, #8]
 80104ec:	e7f4      	b.n	80104d8 <__swsetup_r+0xb0>
 80104ee:	2000      	movs	r0, #0
 80104f0:	e7f7      	b.n	80104e2 <__swsetup_r+0xba>
 80104f2:	bf00      	nop
 80104f4:	20000014 	.word	0x20000014
 80104f8:	0801099c 	.word	0x0801099c
 80104fc:	080109bc 	.word	0x080109bc
 8010500:	0801097c 	.word	0x0801097c

08010504 <_close_r>:
 8010504:	b538      	push	{r3, r4, r5, lr}
 8010506:	4d06      	ldr	r5, [pc, #24]	; (8010520 <_close_r+0x1c>)
 8010508:	2300      	movs	r3, #0
 801050a:	4604      	mov	r4, r0
 801050c:	4608      	mov	r0, r1
 801050e:	602b      	str	r3, [r5, #0]
 8010510:	f7fb fc43 	bl	800bd9a <_close>
 8010514:	1c43      	adds	r3, r0, #1
 8010516:	d102      	bne.n	801051e <_close_r+0x1a>
 8010518:	682b      	ldr	r3, [r5, #0]
 801051a:	b103      	cbz	r3, 801051e <_close_r+0x1a>
 801051c:	6023      	str	r3, [r4, #0]
 801051e:	bd38      	pop	{r3, r4, r5, pc}
 8010520:	200194c8 	.word	0x200194c8

08010524 <__sflush_r>:
 8010524:	898a      	ldrh	r2, [r1, #12]
 8010526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801052a:	4605      	mov	r5, r0
 801052c:	0710      	lsls	r0, r2, #28
 801052e:	460c      	mov	r4, r1
 8010530:	d458      	bmi.n	80105e4 <__sflush_r+0xc0>
 8010532:	684b      	ldr	r3, [r1, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	dc05      	bgt.n	8010544 <__sflush_r+0x20>
 8010538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801053a:	2b00      	cmp	r3, #0
 801053c:	dc02      	bgt.n	8010544 <__sflush_r+0x20>
 801053e:	2000      	movs	r0, #0
 8010540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010546:	2e00      	cmp	r6, #0
 8010548:	d0f9      	beq.n	801053e <__sflush_r+0x1a>
 801054a:	2300      	movs	r3, #0
 801054c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010550:	682f      	ldr	r7, [r5, #0]
 8010552:	602b      	str	r3, [r5, #0]
 8010554:	d032      	beq.n	80105bc <__sflush_r+0x98>
 8010556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010558:	89a3      	ldrh	r3, [r4, #12]
 801055a:	075a      	lsls	r2, r3, #29
 801055c:	d505      	bpl.n	801056a <__sflush_r+0x46>
 801055e:	6863      	ldr	r3, [r4, #4]
 8010560:	1ac0      	subs	r0, r0, r3
 8010562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010564:	b10b      	cbz	r3, 801056a <__sflush_r+0x46>
 8010566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010568:	1ac0      	subs	r0, r0, r3
 801056a:	2300      	movs	r3, #0
 801056c:	4602      	mov	r2, r0
 801056e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010570:	6a21      	ldr	r1, [r4, #32]
 8010572:	4628      	mov	r0, r5
 8010574:	47b0      	blx	r6
 8010576:	1c43      	adds	r3, r0, #1
 8010578:	89a3      	ldrh	r3, [r4, #12]
 801057a:	d106      	bne.n	801058a <__sflush_r+0x66>
 801057c:	6829      	ldr	r1, [r5, #0]
 801057e:	291d      	cmp	r1, #29
 8010580:	d82c      	bhi.n	80105dc <__sflush_r+0xb8>
 8010582:	4a2a      	ldr	r2, [pc, #168]	; (801062c <__sflush_r+0x108>)
 8010584:	40ca      	lsrs	r2, r1
 8010586:	07d6      	lsls	r6, r2, #31
 8010588:	d528      	bpl.n	80105dc <__sflush_r+0xb8>
 801058a:	2200      	movs	r2, #0
 801058c:	6062      	str	r2, [r4, #4]
 801058e:	04d9      	lsls	r1, r3, #19
 8010590:	6922      	ldr	r2, [r4, #16]
 8010592:	6022      	str	r2, [r4, #0]
 8010594:	d504      	bpl.n	80105a0 <__sflush_r+0x7c>
 8010596:	1c42      	adds	r2, r0, #1
 8010598:	d101      	bne.n	801059e <__sflush_r+0x7a>
 801059a:	682b      	ldr	r3, [r5, #0]
 801059c:	b903      	cbnz	r3, 80105a0 <__sflush_r+0x7c>
 801059e:	6560      	str	r0, [r4, #84]	; 0x54
 80105a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105a2:	602f      	str	r7, [r5, #0]
 80105a4:	2900      	cmp	r1, #0
 80105a6:	d0ca      	beq.n	801053e <__sflush_r+0x1a>
 80105a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105ac:	4299      	cmp	r1, r3
 80105ae:	d002      	beq.n	80105b6 <__sflush_r+0x92>
 80105b0:	4628      	mov	r0, r5
 80105b2:	f000 f8fd 	bl	80107b0 <_free_r>
 80105b6:	2000      	movs	r0, #0
 80105b8:	6360      	str	r0, [r4, #52]	; 0x34
 80105ba:	e7c1      	b.n	8010540 <__sflush_r+0x1c>
 80105bc:	6a21      	ldr	r1, [r4, #32]
 80105be:	2301      	movs	r3, #1
 80105c0:	4628      	mov	r0, r5
 80105c2:	47b0      	blx	r6
 80105c4:	1c41      	adds	r1, r0, #1
 80105c6:	d1c7      	bne.n	8010558 <__sflush_r+0x34>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d0c4      	beq.n	8010558 <__sflush_r+0x34>
 80105ce:	2b1d      	cmp	r3, #29
 80105d0:	d001      	beq.n	80105d6 <__sflush_r+0xb2>
 80105d2:	2b16      	cmp	r3, #22
 80105d4:	d101      	bne.n	80105da <__sflush_r+0xb6>
 80105d6:	602f      	str	r7, [r5, #0]
 80105d8:	e7b1      	b.n	801053e <__sflush_r+0x1a>
 80105da:	89a3      	ldrh	r3, [r4, #12]
 80105dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105e0:	81a3      	strh	r3, [r4, #12]
 80105e2:	e7ad      	b.n	8010540 <__sflush_r+0x1c>
 80105e4:	690f      	ldr	r7, [r1, #16]
 80105e6:	2f00      	cmp	r7, #0
 80105e8:	d0a9      	beq.n	801053e <__sflush_r+0x1a>
 80105ea:	0793      	lsls	r3, r2, #30
 80105ec:	680e      	ldr	r6, [r1, #0]
 80105ee:	bf08      	it	eq
 80105f0:	694b      	ldreq	r3, [r1, #20]
 80105f2:	600f      	str	r7, [r1, #0]
 80105f4:	bf18      	it	ne
 80105f6:	2300      	movne	r3, #0
 80105f8:	eba6 0807 	sub.w	r8, r6, r7
 80105fc:	608b      	str	r3, [r1, #8]
 80105fe:	f1b8 0f00 	cmp.w	r8, #0
 8010602:	dd9c      	ble.n	801053e <__sflush_r+0x1a>
 8010604:	6a21      	ldr	r1, [r4, #32]
 8010606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010608:	4643      	mov	r3, r8
 801060a:	463a      	mov	r2, r7
 801060c:	4628      	mov	r0, r5
 801060e:	47b0      	blx	r6
 8010610:	2800      	cmp	r0, #0
 8010612:	dc06      	bgt.n	8010622 <__sflush_r+0xfe>
 8010614:	89a3      	ldrh	r3, [r4, #12]
 8010616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801061a:	81a3      	strh	r3, [r4, #12]
 801061c:	f04f 30ff 	mov.w	r0, #4294967295
 8010620:	e78e      	b.n	8010540 <__sflush_r+0x1c>
 8010622:	4407      	add	r7, r0
 8010624:	eba8 0800 	sub.w	r8, r8, r0
 8010628:	e7e9      	b.n	80105fe <__sflush_r+0xda>
 801062a:	bf00      	nop
 801062c:	20400001 	.word	0x20400001

08010630 <_fflush_r>:
 8010630:	b538      	push	{r3, r4, r5, lr}
 8010632:	690b      	ldr	r3, [r1, #16]
 8010634:	4605      	mov	r5, r0
 8010636:	460c      	mov	r4, r1
 8010638:	b913      	cbnz	r3, 8010640 <_fflush_r+0x10>
 801063a:	2500      	movs	r5, #0
 801063c:	4628      	mov	r0, r5
 801063e:	bd38      	pop	{r3, r4, r5, pc}
 8010640:	b118      	cbz	r0, 801064a <_fflush_r+0x1a>
 8010642:	6983      	ldr	r3, [r0, #24]
 8010644:	b90b      	cbnz	r3, 801064a <_fflush_r+0x1a>
 8010646:	f7ff fa15 	bl	800fa74 <__sinit>
 801064a:	4b14      	ldr	r3, [pc, #80]	; (801069c <_fflush_r+0x6c>)
 801064c:	429c      	cmp	r4, r3
 801064e:	d11b      	bne.n	8010688 <_fflush_r+0x58>
 8010650:	686c      	ldr	r4, [r5, #4]
 8010652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0ef      	beq.n	801063a <_fflush_r+0xa>
 801065a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801065c:	07d0      	lsls	r0, r2, #31
 801065e:	d404      	bmi.n	801066a <_fflush_r+0x3a>
 8010660:	0599      	lsls	r1, r3, #22
 8010662:	d402      	bmi.n	801066a <_fflush_r+0x3a>
 8010664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010666:	f7ff faa3 	bl	800fbb0 <__retarget_lock_acquire_recursive>
 801066a:	4628      	mov	r0, r5
 801066c:	4621      	mov	r1, r4
 801066e:	f7ff ff59 	bl	8010524 <__sflush_r>
 8010672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010674:	07da      	lsls	r2, r3, #31
 8010676:	4605      	mov	r5, r0
 8010678:	d4e0      	bmi.n	801063c <_fflush_r+0xc>
 801067a:	89a3      	ldrh	r3, [r4, #12]
 801067c:	059b      	lsls	r3, r3, #22
 801067e:	d4dd      	bmi.n	801063c <_fflush_r+0xc>
 8010680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010682:	f7ff fa96 	bl	800fbb2 <__retarget_lock_release_recursive>
 8010686:	e7d9      	b.n	801063c <_fflush_r+0xc>
 8010688:	4b05      	ldr	r3, [pc, #20]	; (80106a0 <_fflush_r+0x70>)
 801068a:	429c      	cmp	r4, r3
 801068c:	d101      	bne.n	8010692 <_fflush_r+0x62>
 801068e:	68ac      	ldr	r4, [r5, #8]
 8010690:	e7df      	b.n	8010652 <_fflush_r+0x22>
 8010692:	4b04      	ldr	r3, [pc, #16]	; (80106a4 <_fflush_r+0x74>)
 8010694:	429c      	cmp	r4, r3
 8010696:	bf08      	it	eq
 8010698:	68ec      	ldreq	r4, [r5, #12]
 801069a:	e7da      	b.n	8010652 <_fflush_r+0x22>
 801069c:	0801099c 	.word	0x0801099c
 80106a0:	080109bc 	.word	0x080109bc
 80106a4:	0801097c 	.word	0x0801097c

080106a8 <_lseek_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4d07      	ldr	r5, [pc, #28]	; (80106c8 <_lseek_r+0x20>)
 80106ac:	4604      	mov	r4, r0
 80106ae:	4608      	mov	r0, r1
 80106b0:	4611      	mov	r1, r2
 80106b2:	2200      	movs	r2, #0
 80106b4:	602a      	str	r2, [r5, #0]
 80106b6:	461a      	mov	r2, r3
 80106b8:	f7fb fb96 	bl	800bde8 <_lseek>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	d102      	bne.n	80106c6 <_lseek_r+0x1e>
 80106c0:	682b      	ldr	r3, [r5, #0]
 80106c2:	b103      	cbz	r3, 80106c6 <_lseek_r+0x1e>
 80106c4:	6023      	str	r3, [r4, #0]
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	200194c8 	.word	0x200194c8

080106cc <__swhatbuf_r>:
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	460e      	mov	r6, r1
 80106d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106d4:	2900      	cmp	r1, #0
 80106d6:	b096      	sub	sp, #88	; 0x58
 80106d8:	4614      	mov	r4, r2
 80106da:	461d      	mov	r5, r3
 80106dc:	da08      	bge.n	80106f0 <__swhatbuf_r+0x24>
 80106de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80106e2:	2200      	movs	r2, #0
 80106e4:	602a      	str	r2, [r5, #0]
 80106e6:	061a      	lsls	r2, r3, #24
 80106e8:	d410      	bmi.n	801070c <__swhatbuf_r+0x40>
 80106ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ee:	e00e      	b.n	801070e <__swhatbuf_r+0x42>
 80106f0:	466a      	mov	r2, sp
 80106f2:	f000 f8bb 	bl	801086c <_fstat_r>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	dbf1      	blt.n	80106de <__swhatbuf_r+0x12>
 80106fa:	9a01      	ldr	r2, [sp, #4]
 80106fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010700:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010704:	425a      	negs	r2, r3
 8010706:	415a      	adcs	r2, r3
 8010708:	602a      	str	r2, [r5, #0]
 801070a:	e7ee      	b.n	80106ea <__swhatbuf_r+0x1e>
 801070c:	2340      	movs	r3, #64	; 0x40
 801070e:	2000      	movs	r0, #0
 8010710:	6023      	str	r3, [r4, #0]
 8010712:	b016      	add	sp, #88	; 0x58
 8010714:	bd70      	pop	{r4, r5, r6, pc}
	...

08010718 <__smakebuf_r>:
 8010718:	898b      	ldrh	r3, [r1, #12]
 801071a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801071c:	079d      	lsls	r5, r3, #30
 801071e:	4606      	mov	r6, r0
 8010720:	460c      	mov	r4, r1
 8010722:	d507      	bpl.n	8010734 <__smakebuf_r+0x1c>
 8010724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	6123      	str	r3, [r4, #16]
 801072c:	2301      	movs	r3, #1
 801072e:	6163      	str	r3, [r4, #20]
 8010730:	b002      	add	sp, #8
 8010732:	bd70      	pop	{r4, r5, r6, pc}
 8010734:	ab01      	add	r3, sp, #4
 8010736:	466a      	mov	r2, sp
 8010738:	f7ff ffc8 	bl	80106cc <__swhatbuf_r>
 801073c:	9900      	ldr	r1, [sp, #0]
 801073e:	4605      	mov	r5, r0
 8010740:	4630      	mov	r0, r6
 8010742:	f7ff fa57 	bl	800fbf4 <_malloc_r>
 8010746:	b948      	cbnz	r0, 801075c <__smakebuf_r+0x44>
 8010748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801074c:	059a      	lsls	r2, r3, #22
 801074e:	d4ef      	bmi.n	8010730 <__smakebuf_r+0x18>
 8010750:	f023 0303 	bic.w	r3, r3, #3
 8010754:	f043 0302 	orr.w	r3, r3, #2
 8010758:	81a3      	strh	r3, [r4, #12]
 801075a:	e7e3      	b.n	8010724 <__smakebuf_r+0xc>
 801075c:	4b0d      	ldr	r3, [pc, #52]	; (8010794 <__smakebuf_r+0x7c>)
 801075e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010760:	89a3      	ldrh	r3, [r4, #12]
 8010762:	6020      	str	r0, [r4, #0]
 8010764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010768:	81a3      	strh	r3, [r4, #12]
 801076a:	9b00      	ldr	r3, [sp, #0]
 801076c:	6163      	str	r3, [r4, #20]
 801076e:	9b01      	ldr	r3, [sp, #4]
 8010770:	6120      	str	r0, [r4, #16]
 8010772:	b15b      	cbz	r3, 801078c <__smakebuf_r+0x74>
 8010774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010778:	4630      	mov	r0, r6
 801077a:	f000 f889 	bl	8010890 <_isatty_r>
 801077e:	b128      	cbz	r0, 801078c <__smakebuf_r+0x74>
 8010780:	89a3      	ldrh	r3, [r4, #12]
 8010782:	f023 0303 	bic.w	r3, r3, #3
 8010786:	f043 0301 	orr.w	r3, r3, #1
 801078a:	81a3      	strh	r3, [r4, #12]
 801078c:	89a0      	ldrh	r0, [r4, #12]
 801078e:	4305      	orrs	r5, r0
 8010790:	81a5      	strh	r5, [r4, #12]
 8010792:	e7cd      	b.n	8010730 <__smakebuf_r+0x18>
 8010794:	0800fa0d 	.word	0x0800fa0d

08010798 <__malloc_lock>:
 8010798:	4801      	ldr	r0, [pc, #4]	; (80107a0 <__malloc_lock+0x8>)
 801079a:	f7ff ba09 	b.w	800fbb0 <__retarget_lock_acquire_recursive>
 801079e:	bf00      	nop
 80107a0:	200194bc 	.word	0x200194bc

080107a4 <__malloc_unlock>:
 80107a4:	4801      	ldr	r0, [pc, #4]	; (80107ac <__malloc_unlock+0x8>)
 80107a6:	f7ff ba04 	b.w	800fbb2 <__retarget_lock_release_recursive>
 80107aa:	bf00      	nop
 80107ac:	200194bc 	.word	0x200194bc

080107b0 <_free_r>:
 80107b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107b2:	2900      	cmp	r1, #0
 80107b4:	d044      	beq.n	8010840 <_free_r+0x90>
 80107b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107ba:	9001      	str	r0, [sp, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f1a1 0404 	sub.w	r4, r1, #4
 80107c2:	bfb8      	it	lt
 80107c4:	18e4      	addlt	r4, r4, r3
 80107c6:	f7ff ffe7 	bl	8010798 <__malloc_lock>
 80107ca:	4a1e      	ldr	r2, [pc, #120]	; (8010844 <_free_r+0x94>)
 80107cc:	9801      	ldr	r0, [sp, #4]
 80107ce:	6813      	ldr	r3, [r2, #0]
 80107d0:	b933      	cbnz	r3, 80107e0 <_free_r+0x30>
 80107d2:	6063      	str	r3, [r4, #4]
 80107d4:	6014      	str	r4, [r2, #0]
 80107d6:	b003      	add	sp, #12
 80107d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107dc:	f7ff bfe2 	b.w	80107a4 <__malloc_unlock>
 80107e0:	42a3      	cmp	r3, r4
 80107e2:	d908      	bls.n	80107f6 <_free_r+0x46>
 80107e4:	6825      	ldr	r5, [r4, #0]
 80107e6:	1961      	adds	r1, r4, r5
 80107e8:	428b      	cmp	r3, r1
 80107ea:	bf01      	itttt	eq
 80107ec:	6819      	ldreq	r1, [r3, #0]
 80107ee:	685b      	ldreq	r3, [r3, #4]
 80107f0:	1949      	addeq	r1, r1, r5
 80107f2:	6021      	streq	r1, [r4, #0]
 80107f4:	e7ed      	b.n	80107d2 <_free_r+0x22>
 80107f6:	461a      	mov	r2, r3
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	b10b      	cbz	r3, 8010800 <_free_r+0x50>
 80107fc:	42a3      	cmp	r3, r4
 80107fe:	d9fa      	bls.n	80107f6 <_free_r+0x46>
 8010800:	6811      	ldr	r1, [r2, #0]
 8010802:	1855      	adds	r5, r2, r1
 8010804:	42a5      	cmp	r5, r4
 8010806:	d10b      	bne.n	8010820 <_free_r+0x70>
 8010808:	6824      	ldr	r4, [r4, #0]
 801080a:	4421      	add	r1, r4
 801080c:	1854      	adds	r4, r2, r1
 801080e:	42a3      	cmp	r3, r4
 8010810:	6011      	str	r1, [r2, #0]
 8010812:	d1e0      	bne.n	80107d6 <_free_r+0x26>
 8010814:	681c      	ldr	r4, [r3, #0]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	6053      	str	r3, [r2, #4]
 801081a:	4421      	add	r1, r4
 801081c:	6011      	str	r1, [r2, #0]
 801081e:	e7da      	b.n	80107d6 <_free_r+0x26>
 8010820:	d902      	bls.n	8010828 <_free_r+0x78>
 8010822:	230c      	movs	r3, #12
 8010824:	6003      	str	r3, [r0, #0]
 8010826:	e7d6      	b.n	80107d6 <_free_r+0x26>
 8010828:	6825      	ldr	r5, [r4, #0]
 801082a:	1961      	adds	r1, r4, r5
 801082c:	428b      	cmp	r3, r1
 801082e:	bf04      	itt	eq
 8010830:	6819      	ldreq	r1, [r3, #0]
 8010832:	685b      	ldreq	r3, [r3, #4]
 8010834:	6063      	str	r3, [r4, #4]
 8010836:	bf04      	itt	eq
 8010838:	1949      	addeq	r1, r1, r5
 801083a:	6021      	streq	r1, [r4, #0]
 801083c:	6054      	str	r4, [r2, #4]
 801083e:	e7ca      	b.n	80107d6 <_free_r+0x26>
 8010840:	b003      	add	sp, #12
 8010842:	bd30      	pop	{r4, r5, pc}
 8010844:	200194c0 	.word	0x200194c0

08010848 <_read_r>:
 8010848:	b538      	push	{r3, r4, r5, lr}
 801084a:	4d07      	ldr	r5, [pc, #28]	; (8010868 <_read_r+0x20>)
 801084c:	4604      	mov	r4, r0
 801084e:	4608      	mov	r0, r1
 8010850:	4611      	mov	r1, r2
 8010852:	2200      	movs	r2, #0
 8010854:	602a      	str	r2, [r5, #0]
 8010856:	461a      	mov	r2, r3
 8010858:	f7fb fa66 	bl	800bd28 <_read>
 801085c:	1c43      	adds	r3, r0, #1
 801085e:	d102      	bne.n	8010866 <_read_r+0x1e>
 8010860:	682b      	ldr	r3, [r5, #0]
 8010862:	b103      	cbz	r3, 8010866 <_read_r+0x1e>
 8010864:	6023      	str	r3, [r4, #0]
 8010866:	bd38      	pop	{r3, r4, r5, pc}
 8010868:	200194c8 	.word	0x200194c8

0801086c <_fstat_r>:
 801086c:	b538      	push	{r3, r4, r5, lr}
 801086e:	4d07      	ldr	r5, [pc, #28]	; (801088c <_fstat_r+0x20>)
 8010870:	2300      	movs	r3, #0
 8010872:	4604      	mov	r4, r0
 8010874:	4608      	mov	r0, r1
 8010876:	4611      	mov	r1, r2
 8010878:	602b      	str	r3, [r5, #0]
 801087a:	f7fb fa9a 	bl	800bdb2 <_fstat>
 801087e:	1c43      	adds	r3, r0, #1
 8010880:	d102      	bne.n	8010888 <_fstat_r+0x1c>
 8010882:	682b      	ldr	r3, [r5, #0]
 8010884:	b103      	cbz	r3, 8010888 <_fstat_r+0x1c>
 8010886:	6023      	str	r3, [r4, #0]
 8010888:	bd38      	pop	{r3, r4, r5, pc}
 801088a:	bf00      	nop
 801088c:	200194c8 	.word	0x200194c8

08010890 <_isatty_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	4d06      	ldr	r5, [pc, #24]	; (80108ac <_isatty_r+0x1c>)
 8010894:	2300      	movs	r3, #0
 8010896:	4604      	mov	r4, r0
 8010898:	4608      	mov	r0, r1
 801089a:	602b      	str	r3, [r5, #0]
 801089c:	f7fb fa99 	bl	800bdd2 <_isatty>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_isatty_r+0x1a>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_isatty_r+0x1a>
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	200194c8 	.word	0x200194c8

080108b0 <_init>:
 80108b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b2:	bf00      	nop
 80108b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108b6:	bc08      	pop	{r3}
 80108b8:	469e      	mov	lr, r3
 80108ba:	4770      	bx	lr

080108bc <_fini>:
 80108bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108be:	bf00      	nop
 80108c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108c2:	bc08      	pop	{r3}
 80108c4:	469e      	mov	lr, r3
 80108c6:	4770      	bx	lr
